#line 2 "sqlparser_flex.cpp"

#line 4 "sqlparser_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

#ifdef yyget_lloc
#define yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc yyget_lloc
#endif

#ifdef yyset_lloc
#define yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc yyset_lloc
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 275
#define YY_END_OF_BUFFER 276
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1182] =
    {   0,
      272,  272,    0,    0,  253,  253,  256,  256,  276,  274,
      262,  262,  263,  274,  263,  250,  263,  263,  263,  241,
      269,  265,  267,  273,  274,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  255,
      263,  275,  253,  254,  256,  257,  262,  271,    0,  261,
      246,    0,  245,  241,    0,  268,  270,  266,    0,  259,
      260,  260,  260,  260,  260,    6,  260,  260,  260,  260,
      260,   14,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
       61,  260,   62,   67,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  251,  260,  260,  260,  260,
      260,  260,  260,  236,   85,  260,   88,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  129,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  264,  253,  252,  256,  258,
      261,    0,    0,  245,    0,    0,  242,    0,    0,  259,
        1,    5,  260,    3,    4,  260,    7,  204,  260,  260,

      260,  260,  222,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,   30,
      260,  260,  260,  260,  260,  260,  260,  260,  260,   40,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,   52,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  226,  260,  260,  260,   69,
      260,  197,  260,  260,  260,  260,  260,  260,  260,  260,
      194,  260,  260,  193,   79,  260,  260,  260,  260,   82,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  105,  260,  260,  260,  260,  113,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  190,  260,  260,
      260,  260,  260,  260,  260,  260,  155,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  189,  260,  260,  260,
      260,    0,  244,    0,    0,  243,    0,    0,  260,  260,
      260,  260,  260,  260,   12,  260,  260,   16,  221,  260,
      223,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,   27,  260,  260,  260,  260,
      260,   33,  260,  260,  260,   37,   38,   39,  260,  260,

      260,  260,  260,  260,  260,  158,  260,  260,  260,  260,
      260,   53,  260,   54,  260,  260,  260,  260,  260,   58,
      260,  260,  260,  260,  260,  260,   66,  260,   68,  162,
      142,  260,  195,   71,   73,  260,  260,  260,   76,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
       48,  260,  260,  240,  260,  260,  260,   86,  260,  260,
      260,  187,  260,  260,  260,  260,  260,  163,  260,  260,
      260,  260,  260,  260,  260,  177,   97,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  106,  260,  260,  260,
      260,  260,  260,  114,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  232,  125,  157,
      126,  260,  260,  260,  247,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  188,  120,  139,  260,  140,  141,
        0,    0,    0,    2,  234,    8,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  202,  260,   25,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,   41,  260,  260,  260,  260,  260,  249,   46,
       47,   49,  260,  154,  260,  260,  260,  260,   55,   56,
      260,  260,  260,   63,  260,  260,  260,  260,  260,  260,

       72,   74,  260,  260,  260,  260,  260,  260,   78,  260,
      260,  260,  227,  260,  228,  260,  180,  260,  260,  260,
      260,  260,   89,   90,  260,  260,  260,  260,  238,  260,
      260,  260,  260,  260,  260,  143,  182,  260,  260,  260,
      260,  260,  260,  103,  260,  260,  260,  260,  111,  260,
      260,  260,  260,  260,  153,  260,  260,  260,  118,  260,
      192,  260,  206,  260,  260,  123,  260,  260,  260,  260,
      260,  132,  260,  260,  260,  134,  260,  260,  260,  138,
      261,    0,    0,  260,   10,   11,   13,  260,  260,  260,
      260,  260,  260,  260,   19,  260,   21,  260,  260,  260,

      260,  260,   23,  260,  260,  260,  260,  260,  260,  260,
      260,  260,   32,  260,  260,  260,  260,   36,   42,  260,
       44,  260,  260,  260,   50,   51,  260,  172,  145,  260,
      260,   57,  260,   59,  260,  260,   65,  260,  210,  260,
      260,  260,   75,  152,  167,  260,  260,   77,  260,  260,
      260,  260,  260,  208,  260,  260,   84,   87,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,   98,
       99,  260,  260,  102,  174,  260,  260,  109,  108,  260,
      260,  260,  171,  260,  260,  260,  260,  117,  119,  191,
      121,  260,  122,  124,  260,  260,  260,  260,  260,  260,

      260,  133,  135,  260,  260,    0,    0,    9,  260,   15,
      260,  260,  260,   18,  260,  233,   20,   91,  260,  260,
      260,  219,  260,  260,  185,  217,  260,  260,  260,  260,
      260,   30,   31,  260,  260,  159,  260,   43,   45,  260,
      260,  260,  213,  260,  260,  260,  260,  260,  260,  260,
      260,   70,  260,  260,  260,  260,  260,   81,  260,   83,
      260,  260,  260,  260,  156,  260,  260,   95,   96,  260,
      260,  260,  100,  260,  260,  260,  112,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  128,  260,  260,  260,
      248,  239,  260,  137,  146,    0,  260,  260,  260,  175,

      220,  260,  260,  260,  260,  260,  260,  216,  215,  214,
       28,  260,  260,   34,   35,  260,  260,  260,  260,  199,
      260,  211,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  229,  260,  260,   93,  260,  260,  260,  260,
      260,  101,  104,  260,  260,  260,  260,  260,  115,  260,
      116,  260,  260,  260,  260,  130,  260,  260,  260,  260,
      147,  260,  260,   17,  260,  260,  260,  237,  201,  260,
      260,  260,  224,  260,  260,  260,  260,  260,  186,  260,
      260,  260,  260,   64,  164,  260,  260,  260,  260,  260,
      260,  260,  260,  181,  184,   94,  260,  260,  173,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  127,  260,
      183,  136,  260,  260,  148,  260,  144,   22,   24,  260,
      260,  260,   29,  178,  260,  260,  212,  260,   60,  260,
      196,  260,  260,  260,  260,   80,  260,  260,   92,  107,
      260,  179,  260,  260,  260,  260,  231,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  200,  198,
      260,  260,  260,  260,  260,  260,  260,  110,  260,  260,
      260,  260,  260,  235,  205,  131,  260,  260,  203,  260,
       26,  260,  260,  260,  168,  260,  260,  260,  260,  260,
      207,  260,  260,  260,  260,  137,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  230,  260,
      260,  260,  225,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  149,  176,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  160,  260,  260,  260,  260,
      260,  170,  260,  260,  218,  260,  165,  260,  166,  260,
      260,  151,  260,  260,  260,  150,  260,  260,  260,  260,
      260,  169,  260,  209,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  161,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    7,    7,    8,    7,
        7,    9,   10,    7,   11,   12,   13,   14,   14,   15,
       14,   16,   14,   14,   14,   17,   14,    1,    7,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,    1,   50,    7,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,    1,   78,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[79] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    5,    6,    7,
        1,    1,    6,    8,    8,    8,    8,    1,    1,    1,
        1,    9,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,    1,   11,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    1
    } ;

static const flex_int16_t yy_base[1194] =
    {   0,
        0,    0,    0,    0,  452,  418,  375,  374,  422, 2488,
       77,   80,  401,    0, 2488, 2488,  373,   71,  372,   77,
       76, 2488,  360, 2488,  352,  108,   71,  159,  209,   63,
      259,   85,   77,  133,   64,   79,  149,  177,  324,  370,
      207,   64,  231,  419,  473,  156,   91,  258,    0, 2488,
      285, 2488,    0,  349,    0, 2488,  113, 2488,  314,    0,
      150,    0,  257,  289,  319, 2488, 2488, 2488,  154,    0,
        0,   95,  185,  295,   84,   99,  126,  281,  312,  114,
      121,    0,  169,  317,  170,  366,  271,  176,  193,  520,
      209,  208,  272,  303,  302,  320,  313,  361,  324,  314,

      322,  327,  371,  367,  373,  370,  379,  428,  415,  392,
        0,  387,  427,  411,  427,  462,  436,  476,  449,  487,
      486,  461,  486,  472,  521, 2488,  470,  485,  478,  516,
      499,  528,  512,  532,  531,  524,  542,  527,  543,  538,
      531,  529,  552,  574,  553,  545,  618,  555,  572,  585,
      587,  566,  581,  595,  596,  597,  595,  637,  591,  605,
      596,  614,  593,  615,  651,  623,  641,  670,  643,  642,
      641,  653,  668,  654,  657, 2488,    0, 2488,    0, 2488,
        0,  724,    0,  704,  732,  736,  740,  665,  673,    0,
        0,    0,  706,    0,    0,  702,    0,    0,  713,  700,

      727,  736,    0,  731,  718,  739,  731,  743,  728,  736,
      741,  737,  741,  740,  755,  738,  740,  759,  755,  760,
      771,  775,  762,  791,  794,  795,  783,  788,  797,    0,
      788,  799,  802,  787,  795,  803,  792,  792,  810,  796,
      815,  805,  815,  812,  807,  818,  818,  807,  806,  822,
      843,  839,  840,  852,  853,  855,  840,  848,  847,    0,
      852,    0,  845,  862,  849,  866,  863,  872,  858,  855,
      892,  861,  870,  261,  869,  874,  859,  884,  868,    0,
      881,  899,  901,  910,  898,  899,  894,  911,  917,  918,
      906,  926,  909,  926,  915,  917,  934,  919,  930,  916,

      957,  924,  923,  928,  953,  943,  949,  956,  965,  953,
      964,  958,  973,  964,  976,  963,  256,  962,  970,  966,
      977,  974,  982,  974,  990,  981,  993,    0,  981,  984,
      996,  992,  999,  997, 1017, 1001,    0, 1018, 1024, 1016,
     1019, 1021, 1027, 1037, 1025, 1019, 1041, 1035, 1034, 1039,
     1038, 1090, 1095,  291, 1099, 1103, 1035, 1051, 1053, 1049,
     1066, 1096, 1088, 1086,    0, 1086, 1105,    0,    0, 1100,
     1107, 1099, 1091, 1107, 1112, 1101, 1110, 1111, 1108, 1117,
     1115, 1101, 1102, 1104, 1119, 1153, 1114, 1114, 1108, 1112,
     1154, 1142, 1160, 1154, 1152,    0,    0,    0, 1147, 1150,

     1147, 1150, 1170, 1154, 1169,    0, 1167, 1156, 1157, 1163,
     1174,    0, 1175,    0, 1180, 1162, 1183, 1165, 1171,    0,
     1176, 1192, 1197, 1199, 1200, 1202,    0, 1209,    0, 1216,
        0,  243, 1214,    0,    0, 1204, 1213, 1221,    0, 1222,
     1213, 1224, 1223, 1213, 1227, 1232, 1228, 1210, 1218, 1219,
        0, 1233, 1235, 1233, 1225, 1242, 1243,    0, 1255, 1255,
     1257,    0, 1263, 1269, 1256, 1275, 1261,    0, 1277, 1282,
     1283, 1276, 1282, 1263, 1284,    0,    0, 1277, 1271, 1279,
     1292, 1276, 1284, 1276, 1278, 1296,    0, 1286, 1288, 1298,
     1303, 1319, 1318,    0, 1321, 1329, 1324, 1319, 1327, 1320,

     1332, 1320, 1329, 1338, 1342, 1341, 1342,    0,    0,    0,
     1329, 1340, 1338, 1332,    0, 1331, 1339, 1339, 1333, 1336,
     1351, 1354, 1352, 1356,    0,    0,    0, 1381,    0,    0,
      244, 1387, 1372,    0,    0,    0, 1387, 1374, 1370, 1391,
     1393, 1393, 1396, 1381, 1396, 1383, 1383, 1390, 1391, 1386,
     1404, 1389, 1400, 1392,  241, 1406,    0, 1398, 1409, 1405,
     1415, 1416, 1410, 1407, 1443, 1435, 1444,  226, 1441, 1440,
     1439, 1449,    0, 1435, 1436, 1438, 1449, 1445,    0,    0,
      215,  343, 1437, 1457, 1448, 1443, 1461, 1453,    0, 1457,
     1460, 1459, 1464,    0, 1450, 1452, 1460, 1465, 1453, 1463,

        0,    0, 1476, 1484, 1489, 1504, 1490, 1485,    0, 1508,
     1494, 1488,    0, 1513,    0, 1497,    0, 1510, 1508, 1510,
     1499, 1506,    0,    0, 1516, 1502, 1508, 1510,    0, 1521,
     1507, 1509, 1510, 1517, 1511,    0,    0, 1516, 1528, 1530,
     1535, 1551, 1558,    0, 1545, 1565, 1547, 1568,    0, 1550,
     1556, 1571, 1561, 1569,    0, 1571, 1568, 1572,    0, 1575,
     1563, 1574,    0, 1574, 1570, 1566, 1566, 1573, 1579, 1589,
     1577,    0, 1570, 1581, 1613,    0, 1602, 1609, 1623,    0,
     2488, 1625, 1618, 1614,    0,  209,    0, 1624,  204, 1610,
     1610, 1614, 1630, 1629, 1616, 1616,    0, 1617, 1618, 1625,

     1620, 1639, 1622, 1623, 1640, 1639, 1633, 1630, 1636, 1648,
     1642, 1656,    0, 1661, 1679, 1677, 1681,    0,    0, 1680,
        0, 1672, 1686, 1666,    0,    0, 1680,    0,    0, 1685,
     1687,    0, 1678,    0, 1687,  193,    0, 1689,    0, 1671,
     1695, 1690,    0,    0,    0, 1677, 1698,    0, 1680, 1700,
     1682, 1691, 1698,    0, 1703, 1708,    0,    0, 1692, 1725,
     1719, 1719, 1731, 1733, 1738, 1719, 1740, 1727, 1738,    0,
        0, 1743, 1746,    0,    0, 1747, 1738,    0,    0, 1738,
     1734, 1753,    0, 1754, 1742, 1742, 1743,    0,    0,    0,
        0,  169,  166,    0, 1758, 1740, 1747, 1759, 1760, 1751,

     1747,    0,    0, 1769, 1774, 1783, 1782,    0, 1795,    0,
     1785, 1796, 1789,    0, 1798,    0,    0,    0, 1795, 1800,
     1801,    0, 1798, 1799,  156,    0, 1803, 1805, 1791, 1807,
     1812,    0,    0, 1813, 1810,    0, 1796,    0,    0, 1805,
     1817, 1805,    0, 1819, 1815, 1814, 1800, 1814, 1847, 1848,
     1843,    0, 1838, 1844, 1850, 1846, 1852,    0, 1847,    0,
     1845, 1859, 1850, 1862,    0, 1853, 1853,    0,    0, 1862,
     1858, 1859,    0, 1852, 1862, 1872,  128, 1855, 1854, 1857,
     1858, 1866, 1861, 1880, 1893, 1873,    0, 1901, 1891, 1911,
        0,    0, 1899, 1917, 2488, 1905, 1912, 1919, 1904,  119,

        0, 1908, 1910, 1921, 1919, 1914, 1908,    0,    0,    0,
     1945, 1910, 1918,    0,    0, 1917, 1922, 1928, 1916,  117,
     1934,    0, 1926, 1924, 1962, 1946, 1950, 1951, 1950, 1954,
     1962, 1958,    0, 1959, 1964,    0, 1972, 1966, 1976, 1973,
     1978,    0,    0, 1979, 1964, 1981, 1982, 1983,    0, 1985,
        0, 1979, 1983, 1974, 1978,    0, 1988, 1995, 1977, 2015,
     2488, 2019, 2016,    0, 2026, 2015, 2010,    0,    0, 2027,
     2024, 2015,    0, 2029, 2031, 2026, 2017, 2018,    0, 2035,
     2032, 2038, 2029,    0,    0, 2039, 2036,  109, 2041,  106,
     2043, 2036, 2041,    0,    0,    0, 2032, 2033,    0, 2037,

     2038, 2058,   94, 2062, 2058, 2064, 2074, 2083,    0, 2075,
        0,    0, 2071, 2089,    0, 2086,    0,    0,    0, 2081,
     2090, 2090,    0,    0, 2078, 2093,    0, 2095,    0, 2097,
        0, 2086, 2086,   72, 2087,    0, 2103, 2080,    0,    0,
     2087,    0, 2103,   69, 2106, 2101,    0, 2094, 2110, 2100,
     2120, 2135, 2130, 2136, 2140, 2128, 2129, 2141,    0,    0,
     2138, 2137, 2147, 2135, 2149, 2141, 2155,    0, 2139, 2155,
     2147, 2147, 2141,    0,    0,    0, 2144, 2145,    0, 2146,
        0, 2161, 2163, 2147,    0, 2153, 2158, 2158, 2189, 2178,
        0, 2187, 2180, 2198, 2199,    0, 2185, 2187, 2188, 2194,

     2191, 2208, 2189, 2210, 2209, 2206, 2195, 2198,    0, 2200,
     2206, 2219,    0, 2199, 2203, 2219, 2203, 2221,   62, 2214,
     2212, 2214,    0,    0, 2237, 2242, 2252, 2245, 2256, 2248,
     2245, 2251, 2246, 2262, 2252,    0, 2251, 2250, 2253, 2252,
     2257,    0, 2269, 2257,    0, 2271,    0, 2258,    0, 2263,
     2262,    0, 2277, 2273, 2268,    0,   54, 2269, 2275, 2286,
     2278,    0, 2293,    0, 2302, 2294, 2304, 2305, 2301, 2302,
     2308, 2306, 2320,   39, 2317, 2313, 2324, 2324, 2306,    0,
     2488, 2381, 2392, 2403, 2414, 2417, 2420, 2430, 2441, 2451,
     2462, 2466, 2476

    } ;

static const flex_int16_t yy_def[1194] =
    {   0,
     1181,    1, 1182, 1182, 1183, 1183, 1184, 1184, 1181, 1181,
     1181, 1181, 1181, 1185, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1186, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1181,
     1181, 1181, 1188, 1181, 1189, 1181, 1181, 1181, 1185, 1190,
     1181, 1191, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1192,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1181, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1181, 1188, 1181, 1189, 1181,
     1190, 1181, 1193, 1181, 1181, 1181, 1181, 1181, 1181, 1192,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1181, 1181, 1193, 1181, 1181, 1181, 1181, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1181, 1181, 1181, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1181, 1181, 1181, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1181, 1181, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1181, 1181, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1181, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
        0, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181

    } ;

static const flex_int16_t yy_nxt[2567] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   15,   15,
       17,   18,   19,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   49,   49,   50,   10,
       10,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   49,   49,   51,   57,   57,
       57,   57,   57,   57,   61,   61,   61,   61,   63, 1175,
       64,   64,   64,   64,   66,   67,   95,   78,   96,  109,

      115,   79,   97,   65, 1160,  116,  145,   80,   98,  117,
       81,  106, 1131,  171,   57,   57,   57,   82,  107, 1070,
      191,  196, 1064,  197,  108,   95,   78,   96,  109,  115,
       79,   97,   65,   72,  116,  145,   80,   98,  117,   81,
      106,   73,  171,   74, 1045,   75,   82,  107,   76,  191,
      196,   77,  197,  108,  198,  204, 1035,  205,  110, 1033,
      111,  112,   72,   61,   61,   61,   61,  981,  113,  965,
       73,  118,   74,  114,   75,  119,  182,   76,  945,  120,
       77,   83,  188,  198,  204,  121,  205,  110,   84,  111,
      112,  168,   85,  169,  189,   86,  170,  113,   87,  122,

      118,   88,  114,  123,  119,  182,  907,  124,  120,  206,
       83,  188,  209,  125,  121,  217,  885,   84,  192,  884,
      168,   85,  169,  189,   86,  170,  193,   87,  122,  140,
       88,   89,  123,  141,  218,   90,  124,  142,  206,   91,
      143,  209,  125,  848,  217,   92,  144,  192,   93,  225,
      226,   94,  531,  146,  811,  193,  681,  147,  140,  809,
       89,  148,  141,  218,   90,  724,  142,  149,   91,  143,
      184,  184,  184,  184,   92,  144,  714,   93,  225,  226,
       94,   99,  146,  185,  172,  100,  147,  173,  174,  101,
      148,  702,  102,  599,  175,  103,  149,  215,  104,  531,

       63,  105,   64,   64,   64,   64,  493,  216,  227,  199,
       99,  446,  185,  172,  100,   65,  173,  174,  101,  180,
      194,  102,  200,  175,  103,  228,  215,  104,  186,  186,
      105,  126,  187,  187,  187,  187,  216,  227,  199,  207,
      201,  195,  229,  208,   65,  230,  127,  202,  128,  194,
      129,  200,  231,  203,  228,  239,  178,  237,  725,  726,
      130,  240,  176,  241,  238,  131,  132,  133,  207,  201,
      195,  229,  208,   69,  230,  127,  202,  128,   68,  129,
       62,  231,  203,   60,  239,  232,  237,  233,  210,  130,
      240,  234,  241,  238,  131,  132,  133,  134,  235,  211,

      212,  213,  236,  244,  242,  135,  245,  136,  214,  137,
      243,  246,  138,  139,  232,  247,  233,  210,  252,   58,
      234, 1181,  253,   56,   56,   54,  134,  235,  211,  212,
      213,  236,  244,  242,  135,  245,  136,  214,  137,  243,
      246,  138,  139,  150,  247,  151,  257,  252,  152,  153,
      248,  253,  154,  155,  156,  250,  157,  258,  251,   54,
      158,  159,  254,  160,  249,  161, 1181,  255,  256,  261,
     1181,  264,  150, 1181,  151,  257,  265,  152,  153,  248,
     1181,  154,  155,  156,  250,  157,  258,  251,  259,  158,
      159,  254,  160,  249,  161,  162,  255,  256,  261,  163,

      264,  270,  164,  165,  262,  265,  271,  274,  260,  166,
      268,  277,  167, 1181,  278, 1181,  263,  259, 1181,  266,
      272,  267,  269,  279,  162,  273, 1181, 1181,  163,  282,
      270,  164,  165,  262,  285,  271,  274,  260,  166,  268,
      277,  167,  219,  278,  220,  263,  275,  221,  266,  272,
      267,  269,  279,  222,  273,  223,  276,  280,  282,  286,
      224,  283,  284,  285,  287,  288,  281,  289,  290,  291,
      294,  219,  295,  220,  296,  275,  221,  292,  293,  300,
      301, 1181,  222,  309,  223,  276,  280, 1181,  286,  224,
      283,  284, 1181,  287,  288,  310,  289,  290,  291,  294,

      297,  295,  318,  296,  298,  311,  292,  293,  300,  301,
      299, 1181,  309, 1181,  313,  319,  312,  320,  321,  322,
      315,  314,  323, 1181,  310,  328, 1181,  316,  317,  297,
     1181,  318, 1181,  298,  311,  329,  330,  331,  332,  299,
      302,  333,  303,  313,  319,  312,  320,  321,  322,  315,
      314,  323,  304,  305,  328,  306,  316,  317,  307,  324,
      337,  308,  325,  338,  329,  330,  331,  332,  344,  302,
      333,  303,  345, 1181,  346,  348,  326,  334, 1181,  327,
      347,  304,  305,  339,  306,  335,  336,  307,  324,  337,
      308,  325,  338,  340,  349,  350,  351,  344,  357,  358,

      341,  345,  342,  346,  348,  326,  334,  343,  327,  347,
     1181, 1181,  339, 1181,  335,  336, 1181,  184,  184,  184,
      184, 1181,  340,  349,  350,  351, 1181,  357,  358,  341,
      185,  342,  359,  352,  352,  360,  343,  353,  353,  353,
      353,  355,  355,  361,  362,  356,  356,  356,  356,  187,
      187,  187,  187,  187,  187,  187,  187,  363,  364,  185,
      365,  359,  366,  367,  360,  368,  370,  372,  373,  374,
      371,  377,  361,  362,  375,  382,  378,  383,  384,  385,
      369,  379,  380,  376,  381,  386,  363,  364,  387,  365,
      388,  366,  367,  389,  368,  370,  372,  373,  374,  371,

      377,  390,  391,  375,  382,  378,  383,  384,  385,  369,
      379,  380,  376,  381,  386,  392,  393,  387,  395,  388,
      396,  397,  389,  398,  399,  400,  401,  402,  403,  404,
      390,  391,  405,  406,  407,  394,  408,  409,  410,  411,
      414,  417,  418,  415,  392,  393,  412,  395,  419,  396,
      397,  420,  398,  399,  400,  401,  402,  403,  404,  413,
      416,  405,  406,  407,  394,  408,  409,  410,  411,  414,
      417,  418,  415,  421,  422,  412,  423,  419,  424,  425,
      420,  426,  428,  429,  430,  431,  432,  433,  413,  416,
      434,  427,  435,  436,  437,  439,  440,  444,  445,  447,

      448,  449,  421,  422,  438,  423,  450,  424,  425,  451,
      426,  428,  429,  430,  431,  432,  433,  441,  452,  434,
      427,  435,  436,  437,  439,  440,  444,  445,  447,  448,
      449,  442,  453,  438,  454,  450,  455,  456,  451,  457,
      458,  459,  443,  460,  461,  462,  441,  452,  463,  465,
      466,  467,  468,  471,  473,  474, 1181,  477,  469,  478,
      442,  453,  472,  454,  479,  455,  456,  464,  457,  458,
      459,  470,  460,  461,  462,  480,  481,  463,  465,  466,
      467,  468,  471,  473,  474,  475,  477,  469,  478,  476,
      482,  472,  483,  479,  484,  485,  464,  486,  487,  489,

      470,  490,  491,  492,  480,  481,  494,  495,  488,  496,
      497,  498,  499,  500,  475,  501,  502,  503,  476,  482,
      504,  483,  505,  484,  485,  506,  486,  487,  489,  507,
      490,  491,  492,  508,  509,  494,  495,  510,  496,  497,
      498,  499,  500,  511,  501,  502,  503,  512,  513,  504,
      515,  505,  516,  514,  506,  517,  518,  519,  507,  520,
      521,  522,  508,  509,  523,  524,  510,  526,  529,  527,
      530,  532,  511,  528, 1181, 1181,  512,  513,  525,  515,
     1181,  516,  514, 1181,  517,  518,  519, 1181,  520,  521,
      522,  533,  534,  523,  524,  535,  526,  529,  527,  530,

      532,  536,  528,  353,  353,  353,  353,  525,  353,  353,
      353,  353,  356,  356,  356,  356,  356,  356,  356,  356,
      533,  534,  537,  538,  535,  539,  540,  541,  542,  543,
      536,  544,  545,  546,  547,  548,  549,  551,  552,  553,
      550,  554,  555,  556,  557,  558, 1181,  564,  565, 1181,
      566,  537,  538,  567,  539,  540,  541,  542,  543, 1181,
      544,  545,  546,  547,  548,  549,  551,  552,  553,  550,
      554,  555,  556,  557,  558,  559,  564,  565,  560,  566,
      568,  569,  567,  570,  571,  572,  573,  574,  561,  575,
      562,  576,  577,  578,  563,  579,  580,  581,  582,  583,

      584,  585,  586,  587,  559,  588,  589,  560,  590,  568,
      569,  591,  570,  571,  572,  573,  574,  561,  575,  562,
      576,  577,  578,  563,  579,  580,  581,  582,  583,  584,
      585,  586,  587,  592,  588,  589,  593,  590,  594,  595,
      591,  596,  597,  598,  600,  601,  602,  603,  604,  605,
      606,  607,  608,  609,  610,  612,  613,  614,  615,  616,
      611,  617,  592,  618,  619,  593,  620,  594,  595,  621,
      596,  597,  598,  600,  601,  602,  603,  604,  605,  606,
      607,  608,  609,  610,  612,  613,  614,  615,  616,  611,
      617,  622,  618,  619,  623,  620,  624,  625,  621,  626,

      627,  628,  629,  630,  632,  633,  634,  631,  635,  636,
      637,  638,  639,  640,  641,  642,  643,  644,  645,  646,
      622,  647,  648,  623,  649,  624,  625,  650,  626,  627,
      628,  629,  630,  632,  633,  634,  631,  635,  636,  637,
      638,  639,  640,  641,  642,  643,  644,  645,  646,  651,
      647,  648,  652,  649,  654,  655,  650,  656,  653,  657,
      658,  659,  660,  661,  662,  663,  664,  665,  666,  667,
      668,  669,  670,  671,  672,  673,  674,  675,  651,  676,
      677,  652,  678,  654,  655,  679,  656,  653,  657,  658,
      659,  660,  661,  662,  663,  664,  665,  666,  667,  668,

      669,  670,  671,  672,  673,  674,  675,  680,  676,  677,
      682,  678,  683,  684,  679,  685,  686,  687,  688,  689,
      690,  691,  692,  693,  694,  695,  696,  697,  698,  699,
      700,  701,  703,  704,  705,  706,  680,  707,  708,  682,
      709,  683,  684,  710,  685,  686,  687,  688,  689,  690,
      691,  692,  693,  694,  695,  696,  697,  698,  699,  700,
      701,  703,  704,  705,  706,  711,  707,  708,  712,  709,
      713,  715,  710,  716,  717,  718,  719,  720,  721,  722,
      723,  727,  728,  729,  730,  731,  732,  733,  734,  735,
      736,  737,  738,  739,  711,  740,  741,  712,  742,  713,

      715,  743,  716,  717,  718,  719,  720,  721,  722,  723,
      727,  728,  729,  730,  731,  732,  733,  734,  735,  736,
      737,  738,  739,  744,  740,  741,  745,  742,  746,  747,
      743,  748,  749,  750,  751,  752,  753,  754,  755,  756,
      757,  758,  759,  760,  761,  762,  763,  764,  765,  766,
      767,  768,  744,  769,  770,  745,  771,  746,  747,  772,
      748,  749,  750,  751,  752,  753,  754,  755,  756,  757,
      758,  759,  760,  761,  762,  763,  764,  765,  766,  767,
      768,  773,  769,  770,  774,  771,  775,  776,  772,  777,
      778,  779,  780,  781,  782,  783,  784,  787,  788,  789,

      790,  785,  791,  792,  793,  786,  794,  795,  796,  797,
      773,  798,  799,  774,  800,  775,  776,  801,  777,  778,
      779,  780,  781,  782,  783,  784,  787,  788,  789,  790,
      785,  791,  792,  793,  786,  794,  795,  796,  797,  802,
      798,  799,  803,  800,  804,  805,  801,  806,  807,  808,
      810,  812,  813,  814,  815,  816,  817,  818,  819,  820,
      821,  822,  823,  824,  825,  826,  827,  828,  802,  829,
      830,  803,  831,  804,  805,  832,  806,  807,  808,  810,
      812,  813,  814,  815,  816,  817,  818,  819,  820,  821,
      822,  823,  824,  825,  826,  827,  828,  833,  829,  830,

      834,  831,  835,  836,  832,  837,  838,  839,  840,  841,
      842,  843,  844,  845,  846,  849,  850,  851,  852,  853,
      854,  855,  856,  857,  858,  859,  833,  860,  847,  834,
      861,  835,  836,  862,  837,  838,  839,  840,  841,  842,
      843,  844,  845,  846,  849,  850,  851,  852,  853,  854,
      855,  856,  857,  858,  859,  863,  860,  847,  864,  861,
      865,  866,  862,  867,  868,  869,  870,  871,  872,  873,
      874,  875,  876,  877,  878,  879,  880,  881,  882,  883,
      886,  887,  888,  889,  863,  890,  891,  864,  892,  865,
      866,  893,  867,  868,  869,  870,  871,  872,  873,  874,

      875,  876,  877,  878,  879,  880,  881,  882,  883,  886,
      887,  888,  889,  894,  890,  891,  895,  892,  896,  897,
      893,  898,  899,  900,  901,  902,  903,  904,  905,  906,
      908,  909,  910,  911,  912,  913,  914,  915,  916,  917,
      918,  919,  894,  920,  921,  895,  922,  896,  897,  923,
      898,  899,  900,  901,  902,  903,  904,  905,  906,  908,
      909,  910,  911,  912,  913,  914,  915,  916,  917,  918,
      919,  924,  920,  921,  925,  922,  926,  927,  923,  928,
      929,  930,  931,  932,  933,  934,  935,  936,  937,  938,
      939,  940,  941,  942,  943,  944,  946,  947,  948,  949,

      924,  950,  951,  925,  952,  926,  927,  955,  928,  929,
      930,  931,  932,  933,  934,  935,  936,  937,  938,  939,
      940,  941,  942,  943,  944,  946,  947,  948,  949,  956,
      950,  951,  957,  952,  953,  954,  955,  958,  959,  960,
      961,  962,  963,  964,  966,  967,  968,  969,  970,  971,
      972,  975, 1181,  976,  977,  978,  979,  980,  956,  973,
      982,  957,  983,  953,  954,  984,  958,  959,  960,  961,
      962,  963,  964,  966,  967,  968,  969,  970,  971,  972,
      975,  974,  976,  977,  978,  979,  980,  985,  986,  982,
      987,  983,  988,  989,  984,  990,  991,  992,  993,  994,

      995,  996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004,
      974, 1005, 1006, 1007, 1008, 1009,  985,  986, 1010,  987,
     1011,  988,  989, 1012,  990,  991,  992,  993,  994,  995,
      996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1013,
     1005, 1006, 1007, 1008, 1009, 1014, 1015, 1010, 1016, 1011,
     1017, 1018, 1012, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1028, 1029, 1030, 1031, 1032, 1034, 1013, 1036,
     1037, 1038, 1040, 1041, 1014, 1015, 1042, 1016, 1043, 1017,
     1018, 1039, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
     1027, 1028, 1029, 1030, 1031, 1032, 1034, 1044, 1036, 1037,

     1038, 1040, 1041, 1046, 1047, 1042, 1048, 1043, 1049, 1050,
     1039, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
     1060, 1061, 1062, 1063, 1065, 1066, 1044, 1067, 1068, 1069,
     1071, 1072, 1046, 1047, 1073, 1048, 1074, 1049, 1050, 1075,
     1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
     1061, 1062, 1063, 1065, 1066, 1076, 1067, 1068, 1069, 1071,
     1072, 1077, 1078, 1073, 1079, 1074, 1080, 1081, 1075, 1082,
     1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
     1093, 1094, 1095, 1096, 1076, 1097, 1098, 1099, 1100, 1101,
     1077, 1078, 1102, 1079, 1103, 1080, 1081, 1104, 1082, 1083,

     1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
     1094, 1095, 1096, 1105, 1097, 1098, 1099, 1100, 1101, 1106,
     1107, 1102, 1108, 1103, 1109, 1110, 1104, 1111, 1112, 1113,
     1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
     1124, 1125, 1105, 1126, 1127, 1128, 1129, 1130, 1106, 1107,
     1132, 1108, 1133, 1109, 1110, 1134, 1111, 1112, 1113, 1114,
     1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
     1125, 1135, 1126, 1127, 1128, 1129, 1130, 1136, 1137, 1132,
     1138, 1133, 1139, 1140, 1134, 1141, 1142, 1143, 1144, 1145,
     1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155,

     1135, 1156, 1157, 1158, 1159, 1161, 1136, 1137, 1162, 1138,
     1163, 1139, 1140, 1164, 1141, 1142, 1143, 1144, 1145, 1146,
     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1165,
     1156, 1157, 1158, 1159, 1161, 1166, 1167, 1162, 1168, 1163,
     1169, 1170, 1164, 1171, 1172, 1173, 1174, 1176, 1177, 1178,
     1179, 1180, 1181, 1181, 1181, 1181, 1181, 1181, 1165, 1181,
     1181, 1181, 1181, 1181, 1166, 1167, 1181, 1168, 1181, 1169,
     1170, 1181, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179,
     1180,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   59, 1181,   59, 1181,   59,   59,
       59,   59,   59,   59,   59,   70,   70,   71, 1181,   71,
      177,  177,  177,  177, 1181,  177,  177,  177,  177,  177,
      177,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  181, 1181, 1181,  181,  181,  181,  181,  181,  181,
      181,  181,  183,  183,  183,  183,  183,  183, 1181,  183,
      183,  183,  183,  190, 1181,  190,  354,  354,  354,  354,
      354, 1181,  354,  354,  354,  354,  354,    9, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181
    } ;

static const flex_int16_t yy_chk[2567] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   11,   11,
       11,   12,   12,   12,   18,   18,   18,   18,   20, 1174,
       20,   20,   20,   20,   21,   21,   30,   27,   30,   33,

       35,   27,   30,   20, 1157,   36,   42,   27,   30,   36,
       27,   32, 1119,   47,   57,   57,   57,   27,   32, 1044,
       72,   75, 1034,   76,   32,   30,   27,   30,   33,   35,
       27,   30,   20,   26,   36,   42,   27,   30,   36,   27,
       32,   26,   47,   26, 1003,   26,   27,   32,   26,   72,
       75,   26,   76,   32,   77,   80,  990,   81,   34,  988,
       34,   34,   26,   61,   61,   61,   61,  920,   34,  900,
       26,   37,   26,   34,   26,   37,   61,   26,  877,   37,
       26,   28,   69,   77,   80,   37,   81,   34,   28,   34,
       34,   46,   28,   46,   69,   28,   46,   34,   28,   38,

       37,   28,   34,   38,   37,   61,  825,   38,   37,   83,
       28,   69,   85,   38,   37,   88,  793,   28,   73,  792,
       46,   28,   46,   69,   28,   46,   73,   28,   38,   41,
       28,   29,   38,   41,   89,   29,   38,   41,   83,   29,
       41,   85,   38,  736,   88,   29,   41,   73,   29,   91,
       92,   29,  531,   43,  689,   73,  531,   43,   41,  686,
       29,   43,   41,   89,   29,  581,   41,   43,   29,   41,
       63,   63,   63,   63,   29,   41,  568,   29,   91,   92,
       29,   31,   43,   63,   48,   31,   43,   48,   48,   31,
       43,  555,   31,  432,   48,   31,   43,   87,   31,  354,

       64,   31,   64,   64,   64,   64,  317,   87,   93,   78,
       31,  274,   63,   48,   31,   64,   48,   48,   31,   59,
       74,   31,   78,   48,   31,   94,   87,   31,   65,   65,
       31,   39,   65,   65,   65,   65,   87,   93,   78,   84,
       79,   74,   95,   84,   64,   96,   39,   79,   39,   74,
       39,   78,   97,   79,   94,  100,   54,   99,  582,  582,
       39,  101,   51,  102,   99,   39,   39,   39,   84,   79,
       74,   95,   84,   25,   96,   39,   79,   39,   23,   39,
       19,   97,   79,   17,  100,   98,   99,   98,   86,   39,
      101,   98,  102,   99,   39,   39,   39,   40,   98,   86,

       86,   86,   98,  104,  103,   40,  105,   40,   86,   40,
      103,  106,   40,   40,   98,  107,   98,   86,  110,   13,
       98,    9,  112,    8,    7,    6,   40,   98,   86,   86,
       86,   98,  104,  103,   40,  105,   40,   86,   40,  103,
      106,   40,   40,   44,  107,   44,  114,  110,   44,   44,
      108,  112,   44,   44,   44,  109,   44,  115,  109,    5,
       44,   44,  113,   44,  108,   44,    0,  113,  113,  117,
        0,  119,   44,    0,   44,  114,  119,   44,   44,  108,
        0,   44,   44,   44,  109,   44,  115,  109,  116,   44,
       44,  113,   44,  108,   44,   45,  113,  113,  117,   45,

      119,  122,   45,   45,  118,  119,  122,  124,  116,   45,
      121,  127,   45,    0,  128,    0,  118,  116,    0,  120,
      123,  120,  121,  129,   45,  123,    0,    0,   45,  131,
      122,   45,   45,  118,  133,  122,  124,  116,   45,  121,
      127,   45,   90,  128,   90,  118,  125,   90,  120,  123,
      120,  121,  129,   90,  123,   90,  125,  130,  131,  134,
       90,  132,  132,  133,  135,  136,  130,  137,  138,  139,
      141,   90,  142,   90,  143,  125,   90,  140,  140,  145,
      146,    0,   90,  148,   90,  125,  130,    0,  134,   90,
      132,  132,    0,  135,  136,  149,  137,  138,  139,  141,

      144,  142,  152,  143,  144,  149,  140,  140,  145,  146,
      144,    0,  148,    0,  150,  153,  149,  154,  155,  156,
      151,  150,  157,    0,  149,  159,    0,  151,  151,  144,
        0,  152,    0,  144,  149,  160,  161,  162,  163,  144,
      147,  164,  147,  150,  153,  149,  154,  155,  156,  151,
      150,  157,  147,  147,  159,  147,  151,  151,  147,  158,
      166,  147,  158,  167,  160,  161,  162,  163,  169,  147,
      164,  147,  170,    0,  171,  172,  158,  165,    0,  158,
      171,  147,  147,  167,  147,  165,  165,  147,  158,  166,
      147,  158,  167,  168,  173,  174,  175,  169,  188,  189,

      168,  170,  168,  171,  172,  158,  165,  168,  158,  171,
        0,    0,  167,    0,  165,  165,    0,  184,  184,  184,
      184,    0,  168,  173,  174,  175,    0,  188,  189,  168,
      184,  168,  193,  182,  182,  196,  168,  182,  182,  182,
      182,  185,  185,  199,  200,  185,  185,  185,  185,  186,
      186,  186,  186,  187,  187,  187,  187,  201,  202,  184,
      204,  193,  205,  206,  196,  206,  207,  208,  209,  210,
      207,  212,  199,  200,  211,  214,  213,  215,  216,  217,
      206,  213,  213,  211,  213,  218,  201,  202,  219,  204,
      220,  205,  206,  221,  206,  207,  208,  209,  210,  207,

      212,  222,  223,  211,  214,  213,  215,  216,  217,  206,
      213,  213,  211,  213,  218,  224,  225,  219,  226,  220,
      227,  228,  221,  229,  231,  232,  233,  234,  235,  236,
      222,  223,  237,  238,  239,  225,  240,  241,  242,  243,
      245,  247,  248,  246,  224,  225,  244,  226,  249,  227,
      228,  250,  229,  231,  232,  233,  234,  235,  236,  244,
      246,  237,  238,  239,  225,  240,  241,  242,  243,  245,
      247,  248,  246,  251,  252,  244,  253,  249,  254,  255,
      250,  256,  257,  258,  259,  261,  263,  264,  244,  246,
      265,  256,  266,  267,  268,  269,  270,  272,  273,  275,

      276,  277,  251,  252,  268,  253,  278,  254,  255,  279,
      256,  257,  258,  259,  261,  263,  264,  271,  281,  265,
      256,  266,  267,  268,  269,  270,  272,  273,  275,  276,
      277,  271,  282,  268,  283,  278,  284,  285,  279,  286,
      287,  288,  271,  289,  290,  291,  271,  281,  292,  293,
      294,  295,  296,  298,  299,  300,    0,  302,  297,  303,
      271,  282,  298,  283,  304,  284,  285,  292,  286,  287,
      288,  297,  289,  290,  291,  305,  306,  292,  293,  294,
      295,  296,  298,  299,  300,  301,  302,  297,  303,  301,
      307,  298,  308,  304,  309,  310,  292,  311,  312,  313,

      297,  314,  315,  316,  305,  306,  318,  319,  312,  320,
      321,  322,  323,  324,  301,  324,  325,  326,  301,  307,
      327,  308,  329,  309,  310,  330,  311,  312,  313,  331,
      314,  315,  316,  332,  333,  318,  319,  334,  320,  321,
      322,  323,  324,  335,  324,  325,  326,  336,  338,  327,
      339,  329,  340,  338,  330,  341,  342,  343,  331,  344,
      345,  346,  332,  333,  347,  347,  334,  348,  350,  349,
      351,  357,  335,  349,    0,    0,  336,  338,  347,  339,
        0,  340,  338,    0,  341,  342,  343,    0,  344,  345,
      346,  358,  359,  347,  347,  360,  348,  350,  349,  351,

      357,  361,  349,  352,  352,  352,  352,  347,  353,  353,
      353,  353,  355,  355,  355,  355,  356,  356,  356,  356,
      358,  359,  362,  363,  360,  364,  366,  367,  370,  371,
      361,  372,  373,  374,  375,  376,  377,  378,  379,  380,
      377,  381,  382,  383,  384,  385,    0,  387,  388,    0,
      389,  362,  363,  390,  364,  366,  367,  370,  371,    0,
      372,  373,  374,  375,  376,  377,  378,  379,  380,  377,
      381,  382,  383,  384,  385,  386,  387,  388,  386,  389,
      391,  392,  390,  393,  394,  395,  399,  400,  386,  401,
      386,  402,  403,  404,  386,  405,  407,  408,  409,  410,

      411,  413,  415,  416,  386,  417,  418,  386,  419,  391,
      392,  421,  393,  394,  395,  399,  400,  386,  401,  386,
      402,  403,  404,  386,  405,  407,  408,  409,  410,  411,
      413,  415,  416,  422,  417,  418,  423,  419,  424,  425,
      421,  426,  428,  430,  433,  436,  437,  438,  440,  441,
      442,  443,  444,  445,  446,  447,  448,  449,  450,  452,
      446,  453,  422,  454,  455,  423,  456,  424,  425,  457,
      426,  428,  430,  433,  436,  437,  438,  440,  441,  442,
      443,  444,  445,  446,  447,  448,  449,  450,  452,  446,
      453,  459,  454,  455,  460,  456,  461,  463,  457,  464,

      465,  466,  467,  469,  470,  471,  472,  469,  473,  474,
      475,  478,  479,  480,  481,  482,  483,  484,  485,  486,
      459,  488,  489,  460,  490,  461,  463,  491,  464,  465,
      466,  467,  469,  470,  471,  472,  469,  473,  474,  475,
      478,  479,  480,  481,  482,  483,  484,  485,  486,  492,
      488,  489,  493,  490,  495,  496,  491,  497,  493,  498,
      499,  500,  501,  502,  503,  504,  505,  506,  507,  511,
      512,  513,  514,  516,  517,  518,  519,  520,  492,  521,
      522,  493,  523,  495,  496,  524,  497,  493,  498,  499,
      500,  501,  502,  503,  504,  505,  506,  507,  511,  512,

      513,  514,  516,  517,  518,  519,  520,  528,  521,  522,
      532,  523,  533,  537,  524,  538,  539,  540,  541,  542,
      543,  544,  545,  546,  547,  548,  549,  550,  551,  552,
      553,  554,  556,  558,  559,  560,  528,  561,  562,  532,
      563,  533,  537,  564,  538,  539,  540,  541,  542,  543,
      544,  545,  546,  547,  548,  549,  550,  551,  552,  553,
      554,  556,  558,  559,  560,  565,  561,  562,  566,  563,
      567,  569,  564,  570,  571,  572,  574,  575,  576,  577,
      578,  583,  584,  585,  586,  587,  588,  590,  591,  592,
      593,  595,  596,  597,  565,  598,  599,  566,  600,  567,

      569,  603,  570,  571,  572,  574,  575,  576,  577,  578,
      583,  584,  585,  586,  587,  588,  590,  591,  592,  593,
      595,  596,  597,  604,  598,  599,  605,  600,  606,  607,
      603,  608,  610,  611,  612,  614,  616,  618,  619,  620,
      621,  622,  625,  626,  627,  628,  630,  631,  632,  633,
      634,  635,  604,  638,  639,  605,  640,  606,  607,  641,
      608,  610,  611,  612,  614,  616,  618,  619,  620,  621,
      622,  625,  626,  627,  628,  630,  631,  632,  633,  634,
      635,  642,  638,  639,  643,  640,  645,  646,  641,  647,
      648,  650,  651,  652,  653,  654,  656,  657,  658,  660,

      661,  656,  662,  664,  665,  656,  666,  667,  668,  669,
      642,  670,  671,  643,  673,  645,  646,  674,  647,  648,
      650,  651,  652,  653,  654,  656,  657,  658,  660,  661,
      656,  662,  664,  665,  656,  666,  667,  668,  669,  675,
      670,  671,  677,  673,  678,  679,  674,  682,  683,  684,
      688,  690,  691,  692,  693,  694,  695,  696,  698,  699,
      700,  701,  702,  703,  704,  705,  706,  707,  675,  708,
      709,  677,  710,  678,  679,  711,  682,  683,  684,  688,
      690,  691,  692,  693,  694,  695,  696,  698,  699,  700,
      701,  702,  703,  704,  705,  706,  707,  712,  708,  709,

      714,  710,  715,  716,  711,  717,  720,  722,  723,  724,
      727,  730,  731,  733,  735,  738,  740,  741,  742,  746,
      747,  749,  750,  751,  752,  753,  712,  755,  735,  714,
      756,  715,  716,  759,  717,  720,  722,  723,  724,  727,
      730,  731,  733,  735,  738,  740,  741,  742,  746,  747,
      749,  750,  751,  752,  753,  760,  755,  735,  761,  756,
      762,  763,  759,  764,  765,  766,  767,  768,  769,  772,
      773,  776,  777,  780,  781,  782,  784,  785,  786,  787,
      795,  796,  797,  798,  760,  799,  800,  761,  801,  762,
      763,  804,  764,  765,  766,  767,  768,  769,  772,  773,

      776,  777,  780,  781,  782,  784,  785,  786,  787,  795,
      796,  797,  798,  805,  799,  800,  806,  801,  807,  809,
      804,  811,  812,  813,  815,  819,  820,  821,  823,  824,
      827,  828,  829,  830,  831,  834,  835,  837,  840,  841,
      842,  844,  805,  845,  846,  806,  847,  807,  809,  848,
      811,  812,  813,  815,  819,  820,  821,  823,  824,  827,
      828,  829,  830,  831,  834,  835,  837,  840,  841,  842,
      844,  849,  845,  846,  850,  847,  851,  853,  848,  854,
      855,  856,  857,  859,  861,  862,  863,  864,  866,  867,
      870,  871,  872,  874,  875,  876,  878,  879,  880,  881,

      849,  882,  883,  850,  884,  851,  853,  886,  854,  855,
      856,  857,  859,  861,  862,  863,  864,  866,  867,  870,
      871,  872,  874,  875,  876,  878,  879,  880,  881,  888,
      882,  883,  889,  884,  885,  885,  886,  890,  893,  894,
      896,  897,  898,  899,  902,  903,  904,  905,  906,  907,
      907,  912,    0,  913,  916,  917,  918,  919,  888,  911,
      921,  889,  923,  885,  885,  924,  890,  893,  894,  896,
      897,  898,  899,  902,  903,  904,  905,  906,  907,  907,
      912,  911,  913,  916,  917,  918,  919,  925,  926,  921,
      927,  923,  928,  929,  924,  930,  931,  932,  934,  935,

      937,  938,  939,  940,  941,  944,  945,  946,  947,  948,
      911,  950,  952,  953,  954,  955,  925,  926,  957,  927,
      958,  928,  929,  959,  930,  931,  932,  934,  935,  937,
      938,  939,  940,  941,  944,  945,  946,  947,  948,  960,
      950,  952,  953,  954,  955,  962,  963,  957,  965,  958,
      966,  967,  959,  970,  971,  972,  974,  975,  976,  977,
      978,  980,  981,  982,  983,  986,  987,  989,  960,  991,
      992,  993,  997,  998,  962,  963, 1000,  965, 1001,  966,
      967,  993,  970,  971,  972,  974,  975,  976,  977,  978,
      980,  981,  982,  983,  986,  987,  989, 1002,  991,  992,

      993,  997,  998, 1004, 1005, 1000, 1006, 1001, 1007, 1008,
      993, 1010, 1013, 1014, 1016, 1020, 1021, 1022, 1025, 1026,
     1028, 1030, 1032, 1033, 1035, 1037, 1002, 1038, 1041, 1043,
     1045, 1046, 1004, 1005, 1048, 1006, 1049, 1007, 1008, 1050,
     1010, 1013, 1014, 1016, 1020, 1021, 1022, 1025, 1026, 1028,
     1030, 1032, 1033, 1035, 1037, 1051, 1038, 1041, 1043, 1045,
     1046, 1052, 1053, 1048, 1054, 1049, 1055, 1056, 1050, 1057,
     1058, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070,
     1071, 1072, 1073, 1077, 1051, 1078, 1080, 1082, 1083, 1084,
     1052, 1053, 1086, 1054, 1087, 1055, 1056, 1088, 1057, 1058,

     1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071,
     1072, 1073, 1077, 1089, 1078, 1080, 1082, 1083, 1084, 1090,
     1092, 1086, 1093, 1087, 1094, 1095, 1088, 1097, 1098, 1099,
     1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110,
     1111, 1112, 1089, 1114, 1115, 1116, 1117, 1118, 1090, 1092,
     1120, 1093, 1121, 1094, 1095, 1122, 1097, 1098, 1099, 1100,
     1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111,
     1112, 1125, 1114, 1115, 1116, 1117, 1118, 1126, 1127, 1120,
     1128, 1121, 1129, 1130, 1122, 1131, 1132, 1133, 1134, 1135,
     1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1148, 1150,

     1125, 1151, 1153, 1154, 1155, 1158, 1126, 1127, 1159, 1128,
     1160, 1129, 1130, 1161, 1131, 1132, 1133, 1134, 1135, 1137,
     1138, 1139, 1140, 1141, 1143, 1144, 1146, 1148, 1150, 1163,
     1151, 1153, 1154, 1155, 1158, 1165, 1166, 1159, 1167, 1160,
     1168, 1169, 1161, 1170, 1171, 1172, 1173, 1175, 1176, 1177,
     1178, 1179,    0,    0,    0,    0,    0,    0, 1163,    0,
        0,    0,    0,    0, 1165, 1166,    0, 1167,    0, 1168,
     1169,    0, 1170, 1171, 1172, 1173, 1175, 1176, 1177, 1178,
     1179, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,

     1183, 1183, 1183, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1185,    0, 1185,    0, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1186, 1186, 1187,    0, 1187,
     1188, 1188, 1188, 1188,    0, 1188, 1188, 1188, 1188, 1188,
     1188, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1190,    0,    0, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1191, 1191, 1191, 1191, 1191, 1191,    0, 1191,
     1191, 1191, 1191, 1192,    0, 1192, 1193, 1193, 1193, 1193,
     1193,    0, 1193, 1193, 1193, 1193, 1193, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./sqlparser.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "./sqlparser.l"

#include "node.h"
#include "sqlparser_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#line 1436 "sqlparser_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1449 "sqlparser_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 99 "./sqlparser.l"

#line 1736 "sqlparser_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1182 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1181 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 100 "./sqlparser.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 101 "./sqlparser.l"
{ return ALTER; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 102 "./sqlparser.l"
{ return AND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 103 "./sqlparser.l"
{ return ANY; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 104 "./sqlparser.l"
{ return ALL; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 105 "./sqlparser.l"
{ return AS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 106 "./sqlparser.l"
{ return ASC; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 107 "./sqlparser.l"
{ return BEGI; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 108 "./sqlparser.l"
{ return BETWEEN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 109 "./sqlparser.l"
{ return BIGINT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 110 "./sqlparser.l"
{ return BINARY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 111 "./sqlparser.l"
{ return BOTH; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "./sqlparser.l"
{ return BROWSE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "./sqlparser.l"
{ return BY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 114 "./sqlparser.l"
{ return CASCADE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 115 "./sqlparser.l"
{ return CASE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 116 "./sqlparser.l"
{ return CHARACTER; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 117 "./sqlparser.l"
{ return CLUSTER; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 118 "./sqlparser.l"
{ return COLUMN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 119 "./sqlparser.l"
{ return COLUMNS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 120 "./sqlparser.l"
{ return COMMIT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 121 "./sqlparser.l"
{ return CONSISTENT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 122 "./sqlparser.l"
{ return CREATE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 123 "./sqlparser.l"
{ return CREATETIME; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 124 "./sqlparser.l"
{ return CROSS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 125 "./sqlparser.l"
{ return CURRENT_USER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 126 "./sqlparser.l"
{ return DATE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 127 "./sqlparser.l"
{ return DATETIME; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 128 "./sqlparser.l"
{ return DEALLOCATE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 129 "./sqlparser.l"
{ return DECIMAL; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 130 "./sqlparser.l"
{ return DEFAULT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 131 "./sqlparser.l"
{ return DELETE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 132 "./sqlparser.l"
{ return DESC; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 133 "./sqlparser.l"
{ return DESCRIBE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 134 "./sqlparser.l"
{ return DISTINCT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 135 "./sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 136 "./sqlparser.l"
{ return DROP; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 137 "./sqlparser.l"
{ return DUAL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 138 "./sqlparser.l"
{ return ELSE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 139 "./sqlparser.l"
{ return END; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 140 "./sqlparser.l"
{ return ERROR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 141 "./sqlparser.l"
{ return EXCEPT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 142 "./sqlparser.l"
{ return EXECUTE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 143 "./sqlparser.l"
{ return EXISTS; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 144 "./sqlparser.l"
{ return EXPLAIN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 145 "./sqlparser.l"
{ return FETCH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 146 "./sqlparser.l"
{ return FIRST; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "./sqlparser.l"
{ return NEXT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "./sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "./sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 150 "./sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 151 "./sqlparser.l"
{ return FOR; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 152 "./sqlparser.l"
{ return FROM; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 153 "./sqlparser.l"
{ return FULL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 154 "./sqlparser.l"
{ return GRANT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 155 "./sqlparser.l"
{ return GROUP; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 156 "./sqlparser.l"
{ return GLOBAL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 157 "./sqlparser.l"
{ return HASH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 158 "./sqlparser.l"
{ return HAVING; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 159 "./sqlparser.l"
{ return IDENTIFIED; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 160 "./sqlparser.l"
{ return IF; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 161 "./sqlparser.l"
{ return IN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 162 "./sqlparser.l"
{ return INNER; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 163 "./sqlparser.l"
{ return INTERSECT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 164 "./sqlparser.l"
{ return INSERT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 165 "./sqlparser.l"
{ return INTO; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 166 "./sqlparser.l"
{ return IS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 167 "./sqlparser.l"
{ return JOIN; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "./sqlparser.l"
{ return KEY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 169 "./sqlparser.l"
{ return LEADING; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "./sqlparser.l"
{ return LEFT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "./sqlparser.l"
{ return LIMIT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 172 "./sqlparser.l"
{ return LIKE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 173 "./sqlparser.l"
{ return LOCAL; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "./sqlparser.l"
{ return LOCKED; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 175 "./sqlparser.l"
{ return LOOP; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 176 "./sqlparser.l"
{ return MEMORY; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 177 "./sqlparser.l"
{ return MERGE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "./sqlparser.l"
{ return MOD; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "./sqlparser.l"
{ return MODIFYTIME; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "./sqlparser.l"
{ return NATURAL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "./sqlparser.l"
{ return NOT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "./sqlparser.l"
{ return NUMERIC; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "./sqlparser.l"
{ return OFFSET; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "./sqlparser.l"
{ return ON; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "./sqlparser.l"
{ return ONLY; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "./sqlparser.l"
{ return OPTION; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "./sqlparser.l"
{ return OR; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "./sqlparser.l"
{ return ORDER; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "./sqlparser.l"
{ return OUTER; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 190 "./sqlparser.l"
{ return COMMENT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 191 "./sqlparser.l"
{ return PARAMETERS; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 192 "./sqlparser.l"
{ return PASSWORD; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 193 "./sqlparser.l"
{ return PRECISION; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 194 "./sqlparser.l"
{ return PREPARE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 195 "./sqlparser.l"
{ return PRIMARY; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 196 "./sqlparser.l"
{ return REAL; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 197 "./sqlparser.l"
{ return REMOTE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 198 "./sqlparser.l"
{ return RENAME; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 199 "./sqlparser.l"
{ return REPLACE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 200 "./sqlparser.l"
{ return RESTRICT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 201 "./sqlparser.l"
{ return REVOKE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 202 "./sqlparser.l"
{ return RIGHT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 203 "./sqlparser.l"
{ return ROLLBACK; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 204 "./sqlparser.l"
{ return ROW; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 205 "./sqlparser.l"
{ return ROWS; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 206 "./sqlparser.l"
{ return PRIVILEGES; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 207 "./sqlparser.l"
{ return SELECT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 208 "./sqlparser.l"
{ return SCHEMA; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 209 "./sqlparser.l"
{ return PROCESSLIST; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 210 "./sqlparser.l"
{ return SCOPE; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 211 "./sqlparser.l"
{ return SESSION; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 212 "./sqlparser.l"
{ return SET; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 213 "./sqlparser.l"
{ return SHOW; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 214 "./sqlparser.l"
{ return SMALLINT; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 215 "./sqlparser.l"
{ return SNAPSHOT; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 216 "./sqlparser.l"
{ return SPFILE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 217 "./sqlparser.l"
{ return START; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 218 "./sqlparser.l"
{ return STATIC; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 219 "./sqlparser.l"
{ return WEAK;   }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 220 "./sqlparser.l"
{ return STRONG; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 221 "./sqlparser.l"
{ return SYSTEM; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 222 "./sqlparser.l"
{ return TABLE; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 223 "./sqlparser.l"
{ return TABLES; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 224 "./sqlparser.l"
{ return THEN; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 225 "./sqlparser.l"
{ return TIME; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 226 "./sqlparser.l"
{ return TIMESTAMP; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 227 "./sqlparser.l"
{ return TINYINT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 228 "./sqlparser.l"
{ return TO; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 229 "./sqlparser.l"
{ return TRAILING; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 230 "./sqlparser.l"
{ return TRANSACTION; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 231 "./sqlparser.l"
{ return UNION; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 232 "./sqlparser.l"
{ return UPDATE; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 233 "./sqlparser.l"
{ return USING; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 234 "./sqlparser.l"
{ return VALUES; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 235 "./sqlparser.l"
{ return VARBINARY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 236 "./sqlparser.l"
{ return VARCHAR; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 237 "./sqlparser.l"
{ return WHERE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 238 "./sqlparser.l"
{ return WHEN; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 239 "./sqlparser.l"
{ return WITH; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 240 "./sqlparser.l"
{ return WORK; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 241 "./sqlparser.l"
{ return KILL; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 242 "./sqlparser.l"
{ return QUERY; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 243 "./sqlparser.l"
{ return CONNECTION; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 244 "./sqlparser.l"
{ return FROZEN;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 245 "./sqlparser.l"
{ return GLOBAL_ALIAS; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 246 "./sqlparser.l"
{ return SESSION_ALIAS; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 247 "./sqlparser.l"
{ return CHANGE_OBI; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 248 "./sqlparser.l"
{ return SWITCH_CLUSTER; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 249 "./sqlparser.l"
{ return SET_MASTER_CLUSTER; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 250 "./sqlparser.l"
{ return SET_SLAVE_CLUSTER;  }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 251 "./sqlparser.l"
{ return MASTER; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 252 "./sqlparser.l"
{ return SLAVE;  }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 253 "./sqlparser.l"
{ return FORCE;  }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 254 "./sqlparser.l"
{ return TOP; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 255 "./sqlparser.l"
{ return PERCENT; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 256 "./sqlparser.l"
{ return TIES; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 257 "./sqlparser.l"
{ return FAST; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 258 "./sqlparser.l"
{ return DISABLE; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 259 "./sqlparser.l"
{ return EXTERNALPUSHDOWN; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 260 "./sqlparser.l"
{ return IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 261 "./sqlparser.l"
{ return KEEP; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 262 "./sqlparser.l"
{ return PLAN; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 263 "./sqlparser.l"
{ return KEEPFIXED; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 264 "./sqlparser.l"
{ return MAX_GRANT_PERCENT; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 265 "./sqlparser.l"
{ return MIN_GRANT_PERCENT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 266 "./sqlparser.l"
{ return MAXDOP; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 267 "./sqlparser.l"
{ return MAXRECURSION; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 268 "./sqlparser.l"
{ return NO_PERFORMANCE_SPOOL; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 269 "./sqlparser.l"
{ return PARAMETERIZATION; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 270 "./sqlparser.l"
{ return SIMPLE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 271 "./sqlparser.l"
{ return FORCED; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 272 "./sqlparser.l"
{ return RECOMPILE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 273 "./sqlparser.l"
{ return ROBUST; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 274 "./sqlparser.l"
{ return CHECKSUM; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 275 "./sqlparser.l"
{ return BINARY_CHECKSUM; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 276 "./sqlparser.l"
{ return RANK; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 277 "./sqlparser.l"
{ return DENSE_RANK; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 278 "./sqlparser.l"
{ return ROW_NUMBER; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 279 "./sqlparser.l"
{ return NTILE; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 280 "./sqlparser.l"
{ return PARTITION; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 281 "./sqlparser.l"
{ return RANGE; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 282 "./sqlparser.l"
{ return UNBOUNDED; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 283 "./sqlparser.l"
{ return PRECEDING; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 284 "./sqlparser.l"
{ return CURRENT; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 285 "./sqlparser.l"
{ return FOLLOWING; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 286 "./sqlparser.l"
{ return OVER; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 287 "./sqlparser.l"
{ return VARP; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 288 "./sqlparser.l"
{ return VAR; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 289 "./sqlparser.l"
{ return SUM; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 290 "./sqlparser.l"
{ return STDEVP; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 291 "./sqlparser.l"
{ return STDEV; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 292 "./sqlparser.l"
{ return MIN; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 293 "./sqlparser.l"
{ return MAX; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 294 "./sqlparser.l"
{ return LEAD; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 295 "./sqlparser.l"
{ return LAST_VALUE; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 296 "./sqlparser.l"
{ return LAG; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 297 "./sqlparser.l"
{ return GROUPING_ID; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 298 "./sqlparser.l"
{ return GROUPING; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 299 "./sqlparser.l"
{ return FIRST_VALUE; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 300 "./sqlparser.l"
{ return COUNT_BIG; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 301 "./sqlparser.l"
{ return COUNT; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 302 "./sqlparser.l"
{ return CHECKSUM_AGG; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 303 "./sqlparser.l"
{ return AVG; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 304 "./sqlparser.l"
{ return SYSTEM_USER; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 305 "./sqlparser.l"
{ return STUFF; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 306 "./sqlparser.l"
{ return SESSION_USER; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 307 "./sqlparser.l"
{ return NULLIF; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 308 "./sqlparser.l"
{ return MIN_ACTIVE_ROWVERSION; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 309 "./sqlparser.l"
{ return ISNULL; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 310 "./sqlparser.l"
{ return IDENTITY; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 311 "./sqlparser.l"
{ return GETUTCDATE; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 312 "./sqlparser.l"
{ return GETDATE; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 313 "./sqlparser.l"
{ return DATEPART; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 314 "./sqlparser.l"
{ return DATENAME; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 315 "./sqlparser.l"
{ return DATEDIFF; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 316 "./sqlparser.l"
{ return DATEADD; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 317 "./sqlparser.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 318 "./sqlparser.l"
{ return CONVERT; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 319 "./sqlparser.l"
{ return COALESCE; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 320 "./sqlparser.l"
{ return CAST; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 321 "./sqlparser.l"
{ return BIT; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 322 "./sqlparser.l"
{ return CHAR; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 323 "./sqlparser.l"
{ return DATETIME2; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 324 "./sqlparser.l"
{ return DATETIMEOFFSET; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 325 "./sqlparser.l"
{ return INT; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 326 "./sqlparser.l"
{ return MONEY; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 327 "./sqlparser.l"
{ return NCHAR; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 328 "./sqlparser.l"
{ return NVARCHAR; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 329 "./sqlparser.l"
{ return SMALLDATETIME; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 330 "./sqlparser.l"
{ return SMALLMONEY; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 331 "./sqlparser.l"
{ return TEXT; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 332 "./sqlparser.l"
{ return COLLATE; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 333 "./sqlparser.l"
{ return APPLY; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 334 "./sqlparser.l"
{ return SYSTEM_TIME; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 335 "./sqlparser.l"
{ return OF; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 336 "./sqlparser.l"
{ return CONTAINED; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 337 "./sqlparser.l"
{ return PIVOT; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 338 "./sqlparser.l"
{ return UNPIVOT; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 340 "./sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return NULLX;
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 345 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return INTNUM;
}
	YY_BREAK
case 242:
#line 353 "./sqlparser.l"
case 243:
#line 354 "./sqlparser.l"
case 244:
YY_RULE_SETUP
#line 354 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 245:
#line 362 "./sqlparser.l"
case 246:
YY_RULE_SETUP
#line 362 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 369 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return BOOL;
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 376 "./sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return UNKNOWN;
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 381 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return BOOL;
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 388 "./sqlparser.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 394 "./sqlparser.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "N'";
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 400 "./sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 253:
/* rule 253 can match eol */
YY_RULE_SETUP
#line 404 "./sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 408 "./sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return STRING;
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 417 "./sqlparser.l"
{
    BEGIN(sb);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '[';
}
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 423 "./sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 427 "./sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << ']';
    std::string text = ((ParseResult*)yyextra)->buf_.str();
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, text.c_str());
    nd->terminalToken_.str = text.substr(1, text.length() - 2);
    yylval->node = nd;
    return NAME;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 437 "./sqlparser.l"
{
  fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return ERROR;
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 442 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = std::string(yytext+1, yytext + strlen(yytext) - 1);
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return NAME;
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 451 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_TEMP_VARIABLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = yytext + 1;    // skip '@'
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return TEMP_VARIABLE;
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 460 "./sqlparser.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return NAME;
}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 469 "./sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 470 "./sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 472 "./sqlparser.l"
{ return yytext[0];}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 474 "./sqlparser.l"
{ return CNNOP; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 475 "./sqlparser.l"
{ return COMP_EQ; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 476 "./sqlparser.l"
{ return COMP_GE; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 477 "./sqlparser.l"
{ return COMP_GT; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 478 "./sqlparser.l"
{ return COMP_LE; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 479 "./sqlparser.l"
{ return COMP_LT; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 480 "./sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 481 "./sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 483 "./sqlparser.l"

	YY_BREAK
case 273:
YY_RULE_SETUP
#line 485 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
case YY_STATE_EOF(sb):
#line 492 "./sqlparser.l"
{ return END_P; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 494 "./sqlparser.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return ERROR;
}
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 498 "./sqlparser.l"
ECHO;
	YY_BREAK
#line 3264 "sqlparser_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1182 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1182 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1181);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 498 "./sqlparser.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

