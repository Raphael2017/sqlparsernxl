#line 2 "sqlparser_flex.cpp"

#line 4 "sqlparser_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

#ifdef yyget_lloc
#define yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc yyget_lloc
#endif

#ifdef yyset_lloc
#define yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc yyset_lloc
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 287
#define YY_END_OF_BUFFER 288
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1205] =
    {   0,
      284,  284,    0,    0,  257,  257,  260,  260,  288,  286,
      266,  266,  267,  286,  267,  267,  267,  254,  267,  267,
      267,  267,  267,  245,  273,  269,  271,  285,  286,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  259,  267,  267,  287,  257,  258,  260,
      261,  266,  275,    0,  280,  281,  278,  276,  265,  277,
      250,    0,  279,  249,  245,    0,  272,  274,  270,    0,
      263,  264,  264,  264,  264,  264,    6,  264,  264,  264,
      264,  264,   14,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,   61,  264,   62,   67,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  255,  264,  264,  264,
      264,  264,  264,  264,  236,   85,  264,   88,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  129,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  283,  282,  268,  257,
      256,  260,  262,  265,    0,    0,  249,    0,    0,  246,

        0,    0,  263,    1,    5,  264,    3,    4,  264,    7,
      204,  264,  264,  264,  264,  222,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,   30,  264,  264,  264,  264,  264,  264,  264,
      264,  264,   40,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,   52,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  226,  264,
      264,  264,   69,  264,  197,  264,  264,  264,  264,  264,
      264,  264,  264,  194,  264,  264,  193,   79,  264,  264,
      264,  264,   82,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  105,  264,  264,  264,  264,  113,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      190,  264,  264,  264,  264,  264,  264,  264,  264,  155,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  189,
      264,  264,  264,  264,    0,  248,    0,    0,  247,    0,
        0,  264,  264,  264,  264,  264,  264,   12,  264,  264,
       16,  221,  264,  223,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,   27,  264,

      264,  264,  264,  264,   33,  264,  264,  264,   37,   38,
       39,  264,  264,  264,  264,  264,  264,  264,  158,  264,
      264,  264,  264,  264,   53,  264,   54,  264,  264,  264,
      264,  264,   58,  264,  264,  264,  264,  264,  264,   66,
      264,   68,  162,  142,  264,  195,   71,   73,  264,  264,
      264,   76,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,   48,  264,  264,  244,  264,  264,  264,
       86,  264,  264,  264,  264,  187,  264,  264,  264,  264,
      264,  163,  264,  264,  264,  264,  264,  264,  264,  177,
       97,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      106,  264,  264,  264,  264,  264,  264,  114,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  232,  125,  157,  126,  264,  264,  264,  251,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  188,  120,
      139,  264,  140,  141,    0,    0,    0,    2,  234,    8,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  202,  264,
       25,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,   41,  264,  264,  264,
      264,  264,  253,   46,   47,   49,  264,  154,  264,  264,

      264,  264,   55,   56,  264,  264,  264,   63,  264,  264,
      264,  264,  264,  264,   72,   74,  264,  264,  264,  264,
      264,  264,   78,  264,  264,  264,  227,  264,  228,  264,
      180,  264,  264,  264,  264,  264,  264,   89,   90,  264,
      264,  264,  264,  264,  238,  264,  264,  264,  264,  264,
      264,  143,  182,  264,  264,  264,  264,  264,  264,  103,
      264,  264,  264,  264,  111,  264,  264,  264,  264,  264,
      153,  264,  264,  264,  118,  264,  192,  264,  206,  264,
      264,  123,  264,  264,  264,  264,  264,  132,  264,  264,
      264,  134,  264,  264,  264,  138,  265,    0,    0,  264,

       10,   11,   13,  264,  264,  264,  264,  264,  264,  264,
       19,  264,   21,  264,  264,  264,  264,  264,   23,  264,
      264,  264,  264,  264,  264,  264,  264,  264,   32,  264,
      264,  264,  264,   36,   42,  264,   44,  264,  264,  264,
       50,   51,  264,  172,  145,  264,  264,   57,  264,   59,
      264,  264,   65,  264,  210,  264,  264,  264,   75,  152,
      167,  264,  264,   77,  264,  264,  264,  264,  264,  208,
      264,  264,   84,  264,   87,  240,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,   98,   99,  264,
      264,  102,  174,  264,  264,  109,  108,  264,  264,  264,

      171,  264,  264,  264,  264,  117,  119,  191,  121,  264,
      122,  124,  264,  264,  264,  264,  264,  264,  264,  133,
      135,  264,  264,    0,    0,    9,  264,   15,  264,  264,
      264,   18,  264,  233,   20,   91,  264,  264,  264,  219,
      264,  264,  185,  217,  264,  264,  264,  264,  264,   30,
       31,  241,  264,  264,  159,  264,   43,   45,  264,  264,
      264,  213,  264,  264,  264,  264,  264,  264,  264,  264,
      264,   70,  264,  264,  264,  264,  264,   81,  264,   83,
      264,  264,  264,  264,  264,  156,  264,  264,   95,   96,
      264,  264,  264,  100,  264,  264,  264,  112,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  128,  264,  264,
      264,  252,  239,  264,  137,  146,    0,  264,  264,  264,
      175,  220,  264,  264,  264,  264,  264,  264,  216,  215,
      214,   28,  264,  264,   34,   35,  264,  264,  264,  264,
      199,  264,  211,  264,  242,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  229,  243,  264,  264,   93,  264,
      264,  264,  264,  264,  101,  104,  264,  264,  264,  264,
      264,  115,  264,  116,  264,  264,  264,  264,  130,  264,
      264,  264,  264,  147,  264,  264,   17,  264,  264,  264,
      237,  201,  264,  264,  264,  224,  264,  264,  264,  264,

      264,  186,  264,  264,  264,  264,   64,  164,  264,  264,
      264,  264,  264,  264,  264,  264,  181,  184,   94,  264,
      264,  173,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  127,  264,  183,  136,  264,  264,  148,  264,  144,
       22,   24,  264,  264,  264,   29,  178,  264,  264,  212,
      264,   60,  264,  196,  264,  264,  264,  264,   80,  264,
      264,   92,  107,  264,  179,  264,  264,  264,  264,  231,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  200,  198,  264,  264,  264,  264,  264,  264,  264,
      110,  264,  264,  264,  264,  264,  235,  205,  131,  264,

      264,  203,  264,   26,  264,  264,  264,  168,  264,  264,
      264,  264,  264,  207,  264,  264,  264,  264,  137,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  230,  264,  264,  264,  225,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  149,  176,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  160,  264,
      264,  264,  264,  264,  170,  264,  264,  218,  264,  165,
      264,  166,  264,  264,  151,  264,  264,  264,  150,  264,
      264,  264,  264,  264,  169,  264,  209,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  161,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    9,   10,    7,
        7,   11,   12,    7,   13,   14,   15,   16,   16,   17,
       16,   18,   16,   16,   16,   19,   16,    1,    7,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,    1,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,    1,   81,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[82] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    1,    1,    5,
        6,    7,    1,    1,    6,    8,    8,    8,    8,    1,
        1,    1,    1,    9,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1,   11,    1,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1
    } ;

static const flex_int16_t yy_base[1217] =
    {   0,
        0,    0,    0,    0,  617,  614,  569,  567,  618, 2501,
       80,   83,  587,    0, 2501,  499,  497, 2501,  443,  441,
       75,   73,   82,   81,   80, 2501,  440, 2501,  431,   76,
       76,   81,  129,  121,  180,  131,   69,  180,   68,  132,
      195,  232,  292,  236,  244,   63,  259,  342,  301,  174,
       86,  361,    0, 2501,  430,  100, 2501,    0,  439,    0,
     2501,  125, 2501,  412, 2501, 2501, 2501, 2501,    0, 2501,
      336,    0, 2501,  409,  415,  214, 2501, 2501, 2501,  133,
        0,    0,  138,  141,  266,  130,  145,  190,  239,  404,
      185,  198,    0,  202,  268,  215,  347,  407,  237,  261,

      420,  277,  284,  293,  321,  315,  349,  339,  452,  416,
      393,  397,  401,  418,  402,  407,  409,  418,  466,  451,
      466,    0,  460,  463,  461,  467,  474,  466,  473,  483,
      475,  512,  471,  508,  479,  520, 2501,  497,  520,  506,
      511,  523,  523,  532,  531,  526,  519,  536,  522,  538,
      530,  526,  524,  549,  566,  547,  539,  611,  548,  575,
      578,  590,  544,  575,  589,  590,  591,  590,  630,  586,
      597,  589,  611,  591,  614,  645,  619,  645,  666,  633,
      632,  644,  652,  664,  650,  654, 2501, 2501, 2501,    0,
     2501,    0, 2501,    0,  721,    0,  725,  733,  114,  739,

      661,  669,    0,    0,    0,  688,    0,    0,  682,    0,
        0,  697,  685,  702,  728,    0,  727,  714,  737,  725,
      741,  726,  734,  735,  735,  744,  735,  749,  732,  734,
      748,  742,  746,  760,  757,  749,  768,  788,  788,  779,
      785,  794,    0,  785,  797,  800,  785,  793,  801,  788,
      789,  807,  792,  811,  801,  811,  802,  804,  827,  815,
      807,  801,  815,  815,  812,  834,  845,  850,  852,  838,
      846,  846,    0,  851,    0,  844,  861,  846,  863,  860,
      870,  854,  852,  873,  859,  868,  352,  867,  877,  862,
      883,  866,    0,  872,  896,  897,  905,  897,  898,  894,

      911,  917,  918,  906,  924,  907,  924,  913,  915,  927,
      919,  928,  915,  935,  923,  921,  922,  947,  939,  948,
      954,  962,  954,  965,  960,  975,  966,  978,  965,  349,
      962,  970,  965,  976,  973,  982,  974,  988,  980,  990,
        0,  977,  981,  990,  983,  990,  987, 1003,  986,    0,
     1021, 1015, 1013, 1014, 1023, 1030, 1039, 1028, 1022, 1045,
     1033, 1031, 1038, 1040, 1060, 1090,  387, 1094, 1100, 1051,
     1049, 1053, 1055, 1076, 1092, 1085, 1082,    0, 1083, 1102,
        0,    0, 1097, 1104, 1095, 1087, 1103, 1108, 1098, 1107,
     1108, 1105, 1114, 1112, 1098, 1099, 1102, 1117, 1149, 1112,

     1112, 1105, 1108, 1126, 1122, 1155, 1150, 1148,    0,    0,
        0, 1144, 1148, 1145, 1147, 1167, 1153, 1167,    0, 1165,
     1154, 1155, 1161, 1172,    0, 1173,    0, 1178, 1161, 1181,
     1164, 1169,    0, 1172, 1168, 1173, 1182, 1192, 1195,    0,
     1205,    0, 1213,    0,  343, 1211,    0,    0, 1202, 1211,
     1219,    0, 1220, 1211, 1222, 1221, 1211, 1226, 1231, 1227,
     1209, 1217, 1218,    0, 1232, 1234, 1232, 1224, 1241, 1240,
        0, 1233, 1233, 1242, 1249,    0, 1260, 1268, 1256, 1275,
     1262,    0, 1278, 1283, 1284, 1277, 1283, 1264, 1286,    0,
        0, 1279, 1273, 1281, 1294, 1278, 1286, 1278, 1280, 1299,

        0, 1288, 1291, 1300, 1303, 1299, 1320,    0, 1299, 1315,
     1318, 1318, 1328, 1322, 1334, 1322, 1331, 1340, 1344, 1343,
     1344,    0,    0,    0, 1332, 1343, 1341, 1335,    0, 1334,
     1342, 1342, 1336, 1339, 1354, 1357, 1355, 1357,    0,    0,
        0, 1361,    0,    0,  164, 1366, 1352,    0,    0,    0,
     1375, 1370, 1368, 1392, 1395, 1395, 1399, 1384, 1399, 1386,
     1386, 1393, 1394, 1389, 1408, 1393, 1404, 1396,  342, 1410,
        0, 1402, 1413, 1409, 1418, 1420, 1413, 1409, 1424, 1414,
     1423,  303, 1422, 1428, 1436, 1448,    0, 1437, 1439, 1441,
     1453, 1449,    0,    0,  294,  164, 1441, 1461, 1452, 1447,

     1465, 1457,    0, 1462, 1465, 1464, 1469,    0, 1455, 1457,
     1465, 1469, 1457, 1467,    0,    0, 1478, 1466, 1469, 1483,
     1470, 1466,    0, 1497, 1492, 1488,    0, 1516,    0, 1501,
        0, 1514, 1513, 1515, 1504, 1516, 1512,    0,    0, 1507,
     1523, 1509, 1516, 1518,    0, 1529, 1515, 1517, 1518, 1525,
     1519,    0,    0, 1523, 1536, 1537, 1541, 1536, 1541,    0,
     1528, 1550, 1539, 1569,    0, 1553, 1562, 1578, 1568, 1577,
        0, 1579, 1576, 1580,    0, 1583, 1571, 1582,    0, 1583,
     1580, 1575, 1575, 1582, 1588, 1597, 1585,    0, 1578, 1587,
     1599,    0, 1586, 1592, 1607,    0, 2501, 1610, 1611, 1616,

        0,  290,    0, 1628,  288, 1617, 1618, 1622, 1639, 1638,
     1625, 1625,    0, 1626, 1627, 1634, 1629, 1649, 1632, 1633,
     1650, 1649, 1643, 1639, 1645, 1656, 1649, 1642, 1660, 1647,
     1664, 1663, 1668,    0,    0, 1675,    0, 1676, 1692, 1675,
        0,    0, 1690,    0,    0, 1695, 1698,    0, 1689,    0,
     1698,  287, 1700, 1701,    0, 1683, 1707, 1702,    0,    0,
        0, 1690, 1711,    0, 1693, 1713, 1695, 1704, 1711,    0,
     1716, 1720,    0, 1696,    0,    0, 1704, 1716, 1708, 1708,
     1722, 1731, 1745, 1728, 1752, 1740, 1751,    0,    0, 1757,
     1760,    0,    0, 1761, 1752,    0,    0, 1752, 1748, 1767,

        0, 1768, 1757, 1757, 1758,    0,    0,    0,    0,  285,
      271,    0, 1773, 1755, 1762, 1774, 1774, 1765, 1761,    0,
        0, 1781, 1766, 1773, 1771,    0, 1785,    0, 1776, 1795,
     1797,    0, 1808,    0,    0,    0, 1808, 1814, 1815,    0,
     1813, 1814,  235,    0, 1818, 1820, 1806, 1822, 1827,    0,
        0,    0, 1828, 1826,    0, 1812,    0,    0, 1821, 1833,
     1821,    0, 1835, 1830, 1829, 1814, 1827, 1838, 1841, 1840,
     1834,    0, 1830, 1837, 1851, 1856, 1864,    0, 1862,    0,
     1861, 1875, 1877, 1868, 1880,    0, 1871, 1871,    0,    0,
     1880, 1876, 1877,    0, 1871, 1881, 1891,  231, 1874, 1873,

     1876, 1877, 1884, 1879, 1898, 1884, 1889,    0, 1899, 1888,
     1906,    0,    0, 1902, 1929, 2501, 1919, 1929, 1937, 1922,
      218,    0, 1927, 1929, 1940, 1938, 1933, 1927,    0,    0,
        0, 1956, 1931, 1938,    0,    0, 1937, 1942, 1948, 1936,
      214, 1952,    0, 1943,    0, 1939, 1957, 1941, 1945, 1945,
     1944, 1948, 1966, 1962,    0,    0, 1972, 1979,    0, 1990,
     1985, 1995, 1993, 1998,    0,    0, 1999, 1984, 2001, 2002,
     2003,    0, 2006,    0, 2000, 2004, 1995, 1999,    0, 2007,
     2013, 1993, 2016, 2501, 2016, 2013,    0, 2023, 2011, 2006,
        0,    0, 2023, 2022, 2020,    0, 2034, 2045, 2042, 2036,

     2038,    0, 2055, 2053, 2059, 2050,    0,    0, 2060, 2057,
      209, 2062,  208, 2063, 2058, 2063,    0,    0,    0, 2054,
     2055,    0, 2057, 2057, 2059,  202, 2058, 2054, 2060, 2071,
     2080,    0, 2071,    0,    0, 2068, 2088,    0, 2092,    0,
        0,    0, 2087, 2105, 2107,    0,    0, 2098, 2114,    0,
     2116,    0, 2119,    0, 2108, 2108,  182, 2109,    0, 2125,
     2101,    0,    0, 2108,    0, 2126,  132, 2129, 2124,    0,
     2115, 2130, 2118, 2123, 2133, 2128, 2134, 2137, 2126, 2126,
     2138,    0,    0, 2136, 2137, 2154, 2142, 2165, 2159, 2176,
        0, 2161, 2177, 2170, 2170, 2164,    0,    0,    0, 2167,

     2167,    0, 2168,    0, 2183, 2187, 2171,    0, 2175, 2179,
     2177, 2193, 2177,    0, 2186, 2178, 2196, 2197,    0, 2183,
     2185, 2186, 2193, 2192, 2216, 2197, 2227, 2228, 2228, 2218,
     2221,    0, 2224, 2230, 2243,    0, 2222, 2226, 2242, 2226,
     2246,  126, 2237, 2234, 2234,    0,    0, 2242, 2242, 2252,
     2244, 2254, 2247, 2243, 2250, 2245, 2261, 2252,    0, 2253,
     2259, 2262, 2270, 2277,    0, 2292, 2281,    0, 2295,    0,
     2283,    0, 2288, 2286,    0, 2301, 2297, 2292,    0,  124,
     2293, 2299, 2309, 2299,    0, 2299,    0, 2303, 2295, 2304,
     2304, 2300, 2301, 2307, 2306, 2320,   97, 2317, 2314, 2327,

     2334, 2316,    0, 2501, 2394, 2405, 2416, 2427, 2430, 2433,
     2443, 2454, 2464, 2475, 2479, 2489
    } ;

static const flex_int16_t yy_def[1217] =
    {   0,
     1204,    1, 1205, 1205, 1206, 1206, 1207, 1207, 1204, 1204,
     1204, 1204, 1204, 1208, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1209, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1204, 1204, 1204, 1204, 1211, 1204, 1212,
     1204, 1204, 1204, 1208, 1204, 1204, 1204, 1204, 1213, 1204,
     1204, 1214, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1215, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1204, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1204, 1204, 1204, 1211,
     1204, 1212, 1204, 1213, 1204, 1216, 1204, 1204, 1204, 1204,

     1204, 1204, 1215, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1204, 1204, 1216, 1204, 1204, 1204,
     1204, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1204, 1204, 1204, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1204, 1204, 1204, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1204, 1204, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1204, 1204, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1204, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210,    0, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204
    } ;

static const flex_int16_t yy_nxt[2583] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   24,   24,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   53,   53,
       54,   10,   55,   10,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   53,   53,
       56,   62,   62,   62,   62,   62,   62,   69,   71,   71,
       71,   71,   72,  120,   74,   70,   75,   75,   75,   75,

       77,   78,   73,   83,   89,   94,  126,  156,   90,   76,
      182,   84,   95,   85,   91,   86,   96,   92,   87,   97,
      188,   88,   98,  120,   93,   99,   62,   62,   62,  200,
      200,  200,  200,   83,   89,   94,  126,  156,   90,   76,
      182,   84,   95,   85,   91,   86,   96,   92,   87,   97,
     1198,   88,   98,  100,   93,   99,  106,  101,  107,  117,
      127,  102,  108,  201,  128,  204,  118,  103,  109,  209,
      104,  210,  119,  105,  545,  202,  205, 1183,  697, 1154,
      189,  741,  742,  100,  206, 1093,  106,  101,  107,  117,
      127,  102,  108,  201,  128,  204,  118,  103,  109,  209,

      104,  210,  119,  105,  110,  202,  205,  121,  111,  122,
      123,  179,  112,  180,  206,  113,  181,  124,  114,  129,
      211,  115,  125,  130,  116,  199,  199,  131,  217,  200,
      200,  200,  200,  132,  110, 1087,  218,  121,  111,  122,
      123,  179,  112,  180,  219,  113,  181,  124,  114,  129,
      211,  115,  125,  130,  116, 1068,  133,  131,  217,  222,
      134, 1058, 1056,  132,  135,  145,  218, 1004,  151,  212,
      136,  988,  152,  146,  219,  147,  153,  148,  230,  154,
      149,  150,  213,  157,  968,  155,  133,  158,  928,  222,
      134,  159,  220,  207,  135,  145,  221,  160,  151,  212,

      136,  137,  152,  146,  231,  147,  153,  148,  230,  154,
      149,  150,  213,  157,  208,  155,  138,  158,  139,  238,
      140,  159,  220,  207,  906,  173,  221,  160,  239,  174,
      141,  240,  175,  176,  231,  142,  143,  144,  905,  177,
      867,  829,  178,  827,  208,  241,  138,  740,  139,  238,
      140,   71,   71,   71,   71,  173,  730,  242,  239,  174,
      141,  240,  175,  176,  195,  142,  143,  144,  161,  177,
      162,  223,  178,  163,  164,  241,  243,  165,  166,  167,
      244,  168,  224,  225,  226,  169,  170,  242,  171,  183,
      172,  227,  184,  185,  195,  718,  613,  545,  161,  186,

      162,  223,  507,  163,  164,  459,  243,  165,  166,  167,
      244,  168,  224,  225,  226,  169,  170,  193,  171,  183,
      172,  227,  184,  185,  197,  197,  197,  197,   74,  186,
       75,   75,   75,   75,  214,  228,  252,  198,  253,  254,
      257,  215,  258,   76,  232,  229,  233,  216,  191,  234,
      187,  250,  259,  255,   80,  235,  260,  236,  251,  256,
       79,   68,  237,   67,  214,  228,  252,  198,  253,  254,
      257,  215,  258,   76,  232,  229,  233,  216,  245,  234,
      246,  250,  259,  255,  247,  235,  260,  236,  251,  256,
      261,  248,  237,  263,  265,  249,  264,  266,  270,  271,

      267,  274,  272,  275,  262,  268,  269,  277,  245,  279,
      246,  280,  278,  283,  247,  276,  287,   66,  284,   65,
      261,  248,  273,  263,  265,  249,  264,  266,  270,  271,
      267,  274,  272,  275,  262,  268,  269,  277,  281,  279,
      290,  280,  278,  283,  285,  276,  287,  288,  284,  286,
      282,  291,  273,  292,  293,  295,  298,  289,  296,  297,
      299,  300,  301,  302,  294,  303,  304,  307,  281,  308,
      290,  305,  306,  309,  285,  313,  314,  288,  322,  286,
      282,  291,  331,  292,  293,  295,  298,  289,  296,  297,
      299,  300,  301,  302,  310,  303,  304,  307,  311,  308,

      323,  305,  306,  309,  312,  313,  314,   63,  322,  326,
      324,  332,  331,  333,  334,  335,  327, 1204,   61,  336,
       61,  325,  341,   59,  310,  328,   59, 1204,  311,  342,
      323,  343,  329,  330,  312,  315,  344,  316,  345,  326,
      324,  332,  346,  333,  334,  335,  327,  317,  318,  336,
      319,  325,  341,  320,  337,  328,  321,  338,  350,  342,
      357,  343,  329,  330,  358,  315,  344,  316,  345,  351,
     1204,  339,  346,  347,  340, 1204,  361,  317,  318,  359,
      319,  348,  349,  320,  337,  360,  321,  338,  350,  352,
      357,  353,  362,  363,  358,  364,  370,  371,  354,  351,

      355,  339, 1204,  347,  340,  356,  361, 1204, 1204,  359,
     1204,  348,  349, 1204, 1204,  360,  372,  373, 1204,  352,
     1204,  353,  362,  363, 1204,  364,  370,  371,  354,  374,
      355,  375,  365,  365,  376,  356,  366,  366,  366,  366,
      197,  197,  197,  197,  368,  368,  372,  373,  369,  369,
      369,  369,  377,  198,  200,  200,  200,  200,  378,  374,
      379,  375,  383,  380,  376,  381,  384,  385,  386,  387,
      388,  390,  395,  396,  397,  398,  399,  400,  401,  389,
      382,  391,  377,  198,  402,  403,  392,  393,  378,  394,
      379,  404,  383,  380,  405,  381,  384,  385,  386,  387,

      388,  390,  395,  396,  397,  398,  399,  400,  401,  389,
      382,  391,  406,  408,  402,  403,  392,  393,  409,  394,
      410,  404,  411,  412,  405,  413,  414,  415,  416,  417,
      418,  407,  419,  420,  421,  422,  423,  424,  425,  427,
      430, 1204,  406,  408,  431,  432,  433,  434,  409,  435,
      410,  426,  411,  412,  428,  413,  414,  415,  416,  417,
      418,  407,  419,  420,  421,  422,  423,  424,  425,  427,
      430,  429,  436,  437,  431,  432,  433,  434,  438,  435,
      439,  426,  441,  442,  428,  443,  444,  445,  446,  447,
      440,  448,  449,  452,  450,  453, 1204,  457,  458,  460,

      454,  429,  436,  437,  451,  461,  462,  463,  438,  464,
      439,  465,  441,  442,  455,  443,  444,  445,  446,  447,
      440,  448,  449,  452,  450,  453,  456,  457,  458,  460,
      454,  466,  467,  468,  451,  461,  462,  463,  469,  464,
      470,  465,  471,  472,  455,  473,  474,  476,  477,  479,
      480,  481,  482,  483,  487,  485,  488,  475,  491,  492,
      493,  466,  467,  468,  486,  489,  484,  478,  469,  490,
      470,  494,  471,  472,  495,  473,  474,  476,  477,  479,
      480,  481,  482,  483,  487,  485,  488,  475,  491,  492,
      493,  496,  497,  498,  486,  489,  484,  478,  499,  490,

      500,  494,  501,  503,  495,  504,  505,  506,  508,  509,
      510,  511,  512,  502,  513,  514,  516,  515,  517,  518,
      519,  496,  497,  498,  520,  521,  522,  523,  499,  524,
      500,  525,  501,  503,  526,  504,  505,  506,  508,  509,
      510,  511,  512,  529,  513,  514,  516,  515,  517,  518,
      519,  530,  531,  527,  520,  521,  522,  523,  528,  524,
      532,  525,  533,  534,  526,  535,  536,  540,  541,  543,
      537,  538,  542,  529,  544,  366,  366,  366,  366, 1204,
     1204,  530,  531,  527,  539, 1204, 1204, 1204,  528,  546,
      532,  547,  533,  534,  548,  535,  536,  540,  541,  543,

      537,  538,  542,  549,  544,  366,  366,  366,  366,  369,
      369,  369,  369,  550,  539,  369,  369,  369,  369,  546,
      551,  547,  552,  553,  548,  554,  555,  556,  557,  558,
      559,  560,  561,  549,  562,  563,  565,  566,  567,  564,
      568,  569,  570,  550,  571,  572, 1204,  578,  579,  580,
      551,  581,  552,  553,  582,  554,  555,  556,  557,  558,
      559,  560,  561,  583,  562,  563,  565,  566,  567,  564,
      568,  569,  570,  573,  571,  572,  574,  578,  579,  580,
      584,  581,  585,  586,  582,  587,  575,  588,  576,  589,
      590,  591,  577,  583,  592,  593,  594,  595,  596,  597,

      598,  599,  600,  573,  601,  602,  574,  603,  604,  605,
      584,  606,  585,  586,  607,  587,  575,  588,  576,  589,
      590,  591,  577,  608,  592,  593,  594,  595,  596,  597,
      598,  599,  600,  609,  601,  602,  610,  603,  604,  605,
      611,  606,  612,  614,  607,  615,  616,  617,  618,  619,
      620,  621,  622,  608,  623,  624,  626,  627,  628,  629,
      630,  625,  631,  609,  632,  633,  610,  634,  635,  636,
      611,  637,  612,  614,  638,  615,  616,  617,  618,  619,
      620,  621,  622,  639,  623,  624,  626,  627,  628,  629,
      630,  625,  631,  640,  632,  633,  641,  634,  635,  636,

      642,  637,  643,  644,  638,  645,  646,  648,  649,  650,
      647,  651,  652,  639,  653,  654,  655,  656,  657,  658,
      659,  660,  661,  640,  662,  663,  641,  664,  665,  666,
      642,  667,  643,  644,  670,  645,  646,  648,  649,  650,
      647,  651,  652,  671,  653,  654,  655,  656,  657,  658,
      659,  660,  661,  672,  662,  663,  668,  664,  665,  666,
      673,  667,  669,  674,  670,  675,  676,  677,  678,  679,
      680,  681,  682,  671,  683,  684,  685,  686,  687,  688,
      689,  690,  691,  672,  692,  693,  668,  694,  695,  696,
      673,  698,  669,  674,  699,  675,  676,  677,  678,  679,

      680,  681,  682,  700,  683,  684,  685,  686,  687,  688,
      689,  690,  691,  701,  692,  693,  702,  694,  695,  696,
      703,  698,  704,  705,  699,  706,  707,  708,  709,  710,
      711,  712,  713,  700,  714,  715,  716,  717,  719,  720,
      721,  722,  723,  701,  724,  725,  702,  726,  727,  728,
      703,  729,  704,  705,  731,  706,  707,  708,  709,  710,
      711,  712,  713,  732,  714,  715,  716,  717,  719,  720,
      721,  722,  723,  733,  724,  725,  734,  726,  727,  728,
      735,  729,  736,  737,  731,  738,  739,  743,  744,  745,
      746,  747,  748,  732,  749,  750,  751,  752,  753,  754,

      755,  756,  757,  733,  758,  759,  734,  760,  761,  762,
      735,  763,  736,  737,  764,  738,  739,  743,  744,  745,
      746,  747,  748,  765,  749,  750,  751,  752,  753,  754,
      755,  756,  757,  766,  758,  759,  767,  760,  761,  762,
      768,  763,  769,  770,  764,  771,  772,  773,  774,  775,
      776,  777,  778,  765,  779,  780,  781,  782,  783,  784,
      785,  786,  787,  766,  788,  789,  767,  790,  791,  792,
      768,  793,  769,  770,  794,  771,  772,  773,  774,  775,
      776,  777,  778,  795,  779,  780,  781,  782,  783,  784,
      785,  786,  787,  796,  788,  789,  797,  790,  791,  792,

      798,  793,  799,  800,  794,  801,  802,  805,  806,  807,
      808,  803,  809,  795,  810,  804,  811,  812,  813,  814,
      815,  816,  817,  796,  818,  819,  797,  820,  821,  822,
      798,  823,  799,  800,  824,  801,  802,  805,  806,  807,
      808,  803,  809,  825,  810,  804,  811,  812,  813,  814,
      815,  816,  817,  826,  818,  819,  828,  820,  821,  822,
      830,  823,  831,  832,  824,  833,  834,  835,  836,  837,
      838,  839,  840,  825,  841,  842,  843,  844,  845,  846,
      847,  848,  849,  826,  850,  851,  828,  852,  853,  854,
      830,  855,  831,  832,  856,  833,  834,  835,  836,  837,

      838,  839,  840,  857,  841,  842,  843,  844,  845,  846,
      847,  848,  849,  858,  850,  851,  859,  852,  853,  854,
      860,  855,  861,  862,  856,  863,  864,  865,  868,  869,
      870,  871,  872,  857,  873,  874,  875,  876,  877,  878,
      879,  866,  880,  858,  881,  882,  859,  883,  884,  885,
      860,  886,  861,  862,  887,  863,  864,  865,  868,  869,
      870,  871,  872,  888,  873,  874,  875,  876,  877,  878,
      879,  866,  880,  889,  881,  882,  890,  883,  884,  885,
      891,  886,  892,  893,  887,  894,  895,  896,  897,  898,
      899,  900,  901,  888,  902,  903,  904,  907,  908,  909,

      910,  911,  912,  889,  913,  914,  890,  915,  916,  917,
      891,  918,  892,  893,  919,  894,  895,  896,  897,  898,
      899,  900,  901,  920,  902,  903,  904,  907,  908,  909,
      910,  911,  912,  921,  913,  914,  922,  915,  916,  917,
      923,  918,  924,  925,  919,  926,  927,  929,  930,  931,
      932,  933,  934,  920,  935,  936,  937,  938,  939,  940,
      941,  942,  943,  921,  944,  945,  922,  946,  947,  948,
      923,  949,  924,  925,  950,  926,  927,  929,  930,  931,
      932,  933,  934,  951,  935,  936,  937,  938,  939,  940,
      941,  942,  943,  952,  944,  945,  953,  946,  947,  948,

      954,  949,  955,  956,  950,  957,  958,  959,  960,  961,
      962,  963,  964,  951,  965,  966,  967,  969,  970,  971,
      972,  973,  974,  952,  975,  978,  953,  976,  977,  979,
      954,  980,  955,  956,  981,  957,  958,  959,  960,  961,
      962,  963,  964,  982,  965,  966,  967,  969,  970,  971,
      972,  973,  974,  983,  975,  978,  984,  976,  977,  979,
      985,  980,  986,  987,  981,  989,  990,  991,  992,  993,
      994,  995,  996,  982,  998,  999, 1000, 1001, 1002, 1003,
     1005, 1006, 1007,  983, 1008, 1009,  984, 1010, 1011, 1012,
      985, 1013,  986,  987,  997,  989,  990,  991,  992,  993,

      994,  995, 1014, 1015,  998,  999, 1000, 1001, 1002, 1003,
     1005, 1006, 1007, 1016, 1008, 1009, 1017, 1010, 1011, 1012,
     1018, 1013, 1019, 1020,  997, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1014, 1015, 1028, 1029, 1030, 1031, 1032, 1033,
     1034, 1035, 1036, 1016, 1037, 1038, 1017, 1039, 1040, 1041,
     1018, 1042, 1019, 1020, 1043, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1044, 1045, 1028, 1029, 1030, 1031, 1032, 1033,
     1034, 1035, 1036, 1046, 1037, 1038, 1047, 1039, 1040, 1041,
     1048, 1042, 1049, 1050, 1043, 1051, 1052, 1053, 1054, 1055,
     1057, 1059, 1044, 1045, 1060, 1061, 1063, 1064, 1065, 1066,

     1067, 1069, 1070, 1046, 1071, 1062, 1047, 1072, 1073, 1074,
     1048, 1075, 1049, 1050, 1076, 1051, 1052, 1053, 1054, 1055,
     1057, 1059, 1077, 1078, 1060, 1061, 1063, 1064, 1065, 1066,
     1067, 1069, 1070, 1079, 1071, 1062, 1080, 1072, 1073, 1074,
     1081, 1075, 1082, 1083, 1076, 1084, 1085, 1086, 1088, 1089,
     1090, 1091, 1077, 1078, 1092, 1094, 1095, 1096, 1097, 1098,
     1099, 1100, 1101, 1079, 1102, 1103, 1080, 1104, 1105, 1106,
     1081, 1107, 1082, 1083, 1108, 1084, 1085, 1086, 1088, 1089,
     1090, 1091, 1109, 1110, 1092, 1094, 1095, 1096, 1097, 1098,
     1099, 1100, 1101, 1111, 1102, 1103, 1112, 1104, 1105, 1106,

     1113, 1107, 1114, 1115, 1108, 1116, 1117, 1118, 1119, 1120,
     1121, 1122, 1109, 1110, 1123, 1124, 1125, 1126, 1127, 1128,
     1129, 1130, 1131, 1111, 1132, 1133, 1112, 1134, 1135, 1136,
     1113, 1137, 1114, 1115, 1138, 1116, 1117, 1118, 1119, 1120,
     1121, 1122, 1139, 1140, 1123, 1124, 1125, 1126, 1127, 1128,
     1129, 1130, 1131, 1141, 1132, 1133, 1142, 1134, 1135, 1136,
     1143, 1137, 1144, 1145, 1138, 1146, 1147, 1148, 1149, 1150,
     1151, 1152, 1139, 1140, 1153, 1155, 1156, 1157, 1158, 1159,
     1160, 1161, 1162, 1141, 1163, 1164, 1142, 1165, 1166, 1167,
     1143, 1168, 1144, 1145, 1169, 1146, 1147, 1148, 1149, 1150,

     1151, 1152, 1170, 1171, 1153, 1155, 1156, 1157, 1158, 1159,
     1160, 1161, 1162, 1172, 1163, 1164, 1173, 1165, 1166, 1167,
     1174, 1168, 1175, 1176, 1169, 1177, 1178, 1179, 1180, 1181,
     1182, 1184, 1170, 1171, 1185, 1186, 1187, 1188, 1189, 1190,
     1191, 1192, 1193, 1172, 1194, 1195, 1173, 1196, 1197, 1199,
     1174, 1200, 1175, 1176, 1201, 1177, 1178, 1179, 1180, 1181,
     1182, 1184, 1202, 1203, 1185, 1186, 1187, 1188, 1189, 1190,
     1191, 1192, 1193, 1204, 1194, 1195, 1204, 1196, 1197, 1199,
     1204, 1200, 1204, 1204, 1201, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1202, 1203,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   64, 1204,   64,
     1204,   64,   64,   64,   64,   64,   64,   64,   81,   81,
       82, 1204,   82,  190,  190,  190,  190, 1204,  190,  190,
      190,  190,  190,  190,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  194, 1204, 1204,  194,  194,  194,
      194,  194,  194,  194,  194,  196,  196,  196,  196,  196,
      196, 1204,  196,  196,  196,  196,  203, 1204,  203,  367,
      367,  367,  367,  367, 1204,  367,  367,  367,  367,  367,

        9, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204
    } ;

static const flex_int16_t yy_chk[2583] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   11,   11,   11,   12,   12,   12,   21,   22,   22,
       22,   22,   23,   37,   24,   21,   24,   24,   24,   24,

       25,   25,   23,   30,   31,   32,   39,   46,   31,   24,
       51,   30,   32,   30,   31,   30,   32,   31,   30,   32,
       56,   30,   32,   37,   31,   32,   62,   62,   62,  199,
      199,  199,  199,   30,   31,   32,   39,   46,   31,   24,
       51,   30,   32,   30,   31,   30,   32,   31,   30,   32,
     1197,   30,   32,   33,   31,   32,   34,   33,   34,   36,
       40,   33,   34,   80,   40,   83,   36,   33,   34,   86,
       33,   87,   36,   33,  545,   80,   84, 1180,  545, 1142,
       56,  596,  596,   33,   84, 1067,   34,   33,   34,   36,
       40,   33,   34,   80,   40,   83,   36,   33,   34,   86,

       33,   87,   36,   33,   35,   80,   84,   38,   35,   38,
       38,   50,   35,   50,   84,   35,   50,   38,   35,   41,
       88,   35,   38,   41,   35,   76,   76,   41,   91,   76,
       76,   76,   76,   41,   35, 1057,   92,   38,   35,   38,
       38,   50,   35,   50,   94,   35,   50,   38,   35,   41,
       88,   35,   38,   41,   35, 1026,   42,   41,   91,   96,
       42, 1013, 1011,   41,   42,   44,   92,  941,   45,   89,
       42,  921,   45,   44,   94,   44,   45,   44,   99,   45,
       44,   44,   89,   47,  898,   45,   42,   47,  843,   96,
       42,   47,   95,   85,   42,   44,   95,   47,   45,   89,

       42,   43,   45,   44,  100,   44,   45,   44,   99,   45,
       44,   44,   89,   47,   85,   45,   43,   47,   43,  102,
       43,   47,   95,   85,  811,   49,   95,   47,  103,   49,
       43,  104,   49,   49,  100,   43,   43,   43,  810,   49,
      752,  705,   49,  702,   85,  105,   43,  595,   43,  102,
       43,   71,   71,   71,   71,   49,  582,  106,  103,   49,
       43,  104,   49,   49,   71,   43,   43,   43,   48,   49,
       48,   97,   49,   48,   48,  105,  107,   48,   48,   48,
      108,   48,   97,   97,   97,   48,   48,  106,   48,   52,
       48,   97,   52,   52,   71,  569,  445,  367,   48,   52,

       48,   97,  330,   48,   48,  287,  107,   48,   48,   48,
      108,   48,   97,   97,   97,   48,   48,   64,   48,   52,
       48,   97,   52,   52,   74,   74,   74,   74,   75,   52,
       75,   75,   75,   75,   90,   98,  111,   74,  112,  113,
      115,   90,  116,   75,  101,   98,  101,   90,   59,  101,
       55,  110,  117,  114,   29,  101,  118,  101,  110,  114,
       27,   20,  101,   19,   90,   98,  111,   74,  112,  113,
      115,   90,  116,   75,  101,   98,  101,   90,  109,  101,
      109,  110,  117,  114,  109,  101,  118,  101,  110,  114,
      119,  109,  101,  120,  121,  109,  120,  123,  125,  126,

      124,  128,  127,  129,  119,  124,  124,  130,  109,  131,
      109,  131,  130,  133,  109,  129,  135,   17,  133,   16,
      119,  109,  127,  120,  121,  109,  120,  123,  125,  126,
      124,  128,  127,  129,  119,  124,  124,  130,  132,  131,
      138,  131,  130,  133,  134,  129,  135,  136,  133,  134,
      132,  139,  127,  140,  141,  142,  144,  136,  143,  143,
      145,  146,  147,  148,  141,  149,  150,  152,  132,  153,
      138,  151,  151,  154,  134,  156,  157,  136,  159,  134,
      132,  139,  163,  140,  141,  142,  144,  136,  143,  143,
      145,  146,  147,  148,  155,  149,  150,  152,  155,  153,

      160,  151,  151,  154,  155,  156,  157,   13,  159,  161,
      160,  164,  163,  165,  166,  167,  161,    9,    8,  168,
        7,  160,  170,    6,  155,  162,    5,    0,  155,  171,
      160,  172,  162,  162,  155,  158,  173,  158,  174,  161,
      160,  164,  175,  165,  166,  167,  161,  158,  158,  168,
      158,  160,  170,  158,  169,  162,  158,  169,  177,  171,
      180,  172,  162,  162,  181,  158,  173,  158,  174,  178,
        0,  169,  175,  176,  169,    0,  183,  158,  158,  182,
      158,  176,  176,  158,  169,  182,  158,  169,  177,  178,
      180,  179,  184,  185,  181,  186,  201,  202,  179,  178,

      179,  169,    0,  176,  169,  179,  183,    0,    0,  182,
        0,  176,  176,    0,    0,  182,  206,  209,    0,  178,
        0,  179,  184,  185,    0,  186,  201,  202,  179,  212,
      179,  213,  195,  195,  214,  179,  195,  195,  195,  195,
      197,  197,  197,  197,  198,  198,  206,  209,  198,  198,
      198,  198,  215,  197,  200,  200,  200,  200,  217,  212,
      218,  213,  220,  219,  214,  219,  220,  221,  222,  223,
      224,  225,  227,  228,  229,  230,  231,  232,  233,  224,
      219,  226,  215,  197,  234,  235,  226,  226,  217,  226,
      218,  236,  220,  219,  237,  219,  220,  221,  222,  223,

      224,  225,  227,  228,  229,  230,  231,  232,  233,  224,
      219,  226,  238,  239,  234,  235,  226,  226,  240,  226,
      241,  236,  242,  244,  237,  245,  246,  247,  248,  249,
      250,  238,  251,  252,  253,  254,  255,  256,  257,  258,
      260,    0,  238,  239,  261,  262,  263,  264,  240,  265,
      241,  257,  242,  244,  259,  245,  246,  247,  248,  249,
      250,  238,  251,  252,  253,  254,  255,  256,  257,  258,
      260,  259,  266,  267,  261,  262,  263,  264,  268,  265,
      269,  257,  270,  271,  259,  272,  274,  276,  277,  278,
      269,  279,  280,  282,  281,  283,    0,  285,  286,  288,

      284,  259,  266,  267,  281,  289,  290,  291,  268,  292,
      269,  294,  270,  271,  284,  272,  274,  276,  277,  278,
      269,  279,  280,  282,  281,  283,  284,  285,  286,  288,
      284,  295,  296,  297,  281,  289,  290,  291,  298,  292,
      299,  294,  300,  301,  284,  302,  303,  304,  305,  306,
      307,  308,  309,  310,  312,  311,  313,  303,  315,  316,
      317,  295,  296,  297,  311,  314,  310,  305,  298,  314,
      299,  318,  300,  301,  319,  302,  303,  304,  305,  306,
      307,  308,  309,  310,  312,  311,  313,  303,  315,  316,
      317,  320,  321,  322,  311,  314,  310,  305,  323,  314,

      324,  318,  325,  326,  319,  327,  328,  329,  331,  332,
      333,  334,  335,  325,  336,  337,  338,  337,  339,  340,
      342,  320,  321,  322,  343,  344,  345,  346,  323,  347,
      324,  348,  325,  326,  349,  327,  328,  329,  331,  332,
      333,  334,  335,  352,  336,  337,  338,  337,  339,  340,
      342,  353,  354,  351,  343,  344,  345,  346,  351,  347,
      355,  348,  356,  357,  349,  358,  359,  361,  362,  363,
      360,  360,  362,  352,  364,  365,  365,  365,  365,    0,
        0,  353,  354,  351,  360,    0,    0,    0,  351,  370,
      355,  371,  356,  357,  372,  358,  359,  361,  362,  363,

      360,  360,  362,  373,  364,  366,  366,  366,  366,  368,
      368,  368,  368,  374,  360,  369,  369,  369,  369,  370,
      375,  371,  376,  377,  372,  379,  380,  383,  384,  385,
      386,  387,  388,  373,  389,  390,  391,  392,  393,  390,
      394,  395,  396,  374,  397,  398,    0,  400,  401,  402,
      375,  403,  376,  377,  404,  379,  380,  383,  384,  385,
      386,  387,  388,  405,  389,  390,  391,  392,  393,  390,
      394,  395,  396,  399,  397,  398,  399,  400,  401,  402,
      406,  403,  407,  408,  404,  412,  399,  413,  399,  414,
      415,  416,  399,  405,  417,  418,  420,  421,  422,  423,

      424,  426,  428,  399,  429,  430,  399,  431,  432,  434,
      406,  435,  407,  408,  436,  412,  399,  413,  399,  414,
      415,  416,  399,  437,  417,  418,  420,  421,  422,  423,
      424,  426,  428,  438,  429,  430,  439,  431,  432,  434,
      441,  435,  443,  446,  436,  449,  450,  451,  453,  454,
      455,  456,  457,  437,  458,  459,  460,  461,  462,  463,
      465,  459,  466,  438,  467,  468,  439,  469,  470,  472,
      441,  472,  443,  446,  473,  449,  450,  451,  453,  454,
      455,  456,  457,  474,  458,  459,  460,  461,  462,  463,
      465,  459,  466,  475,  467,  468,  477,  469,  470,  472,

      478,  472,  479,  480,  473,  481,  483,  484,  485,  486,
      483,  487,  488,  474,  489,  492,  493,  494,  495,  496,
      497,  498,  499,  475,  500,  502,  477,  503,  504,  505,
      478,  506,  479,  480,  509,  481,  483,  484,  485,  486,
      483,  487,  488,  510,  489,  492,  493,  494,  495,  496,
      497,  498,  499,  511,  500,  502,  507,  503,  504,  505,
      512,  506,  507,  513,  509,  514,  515,  516,  517,  518,
      519,  520,  521,  510,  525,  526,  527,  528,  530,  531,
      532,  533,  534,  511,  535,  536,  507,  537,  538,  542,
      512,  546,  507,  513,  547,  514,  515,  516,  517,  518,

      519,  520,  521,  551,  525,  526,  527,  528,  530,  531,
      532,  533,  534,  552,  535,  536,  553,  537,  538,  542,
      554,  546,  555,  556,  547,  557,  558,  559,  560,  561,
      562,  563,  564,  551,  565,  566,  567,  568,  570,  572,
      573,  574,  575,  552,  576,  577,  553,  578,  579,  580,
      554,  581,  555,  556,  583,  557,  558,  559,  560,  561,
      562,  563,  564,  584,  565,  566,  567,  568,  570,  572,
      573,  574,  575,  585,  576,  577,  586,  578,  579,  580,
      588,  581,  589,  590,  583,  591,  592,  597,  598,  599,
      600,  601,  602,  584,  604,  605,  606,  607,  609,  610,

      611,  612,  613,  585,  614,  617,  586,  618,  619,  620,
      588,  621,  589,  590,  622,  591,  592,  597,  598,  599,
      600,  601,  602,  624,  604,  605,  606,  607,  609,  610,
      611,  612,  613,  625,  614,  617,  626,  618,  619,  620,
      628,  621,  630,  632,  622,  633,  634,  635,  636,  637,
      640,  641,  642,  624,  643,  644,  646,  647,  648,  649,
      650,  651,  654,  625,  655,  656,  626,  657,  658,  659,
      628,  661,  630,  632,  662,  633,  634,  635,  636,  637,
      640,  641,  642,  663,  643,  644,  646,  647,  648,  649,
      650,  651,  654,  664,  655,  656,  666,  657,  658,  659,

      667,  661,  668,  669,  662,  670,  672,  673,  674,  676,
      677,  672,  678,  663,  680,  672,  681,  682,  683,  684,
      685,  686,  687,  664,  689,  690,  666,  691,  693,  694,
      667,  695,  668,  669,  698,  670,  672,  673,  674,  676,
      677,  672,  678,  699,  680,  672,  681,  682,  683,  684,
      685,  686,  687,  700,  689,  690,  704,  691,  693,  694,
      706,  695,  707,  708,  698,  709,  710,  711,  712,  714,
      715,  716,  717,  699,  718,  719,  720,  721,  722,  723,
      724,  725,  726,  700,  727,  728,  704,  729,  730,  731,
      706,  732,  707,  708,  733,  709,  710,  711,  712,  714,

      715,  716,  717,  736,  718,  719,  720,  721,  722,  723,
      724,  725,  726,  738,  727,  728,  739,  729,  730,  731,
      740,  732,  743,  746,  733,  747,  749,  751,  753,  754,
      756,  757,  758,  736,  762,  763,  765,  766,  767,  768,
      769,  751,  771,  738,  772,  774,  739,  777,  778,  779,
      740,  780,  743,  746,  781,  747,  749,  751,  753,  754,
      756,  757,  758,  782,  762,  763,  765,  766,  767,  768,
      769,  751,  771,  783,  772,  774,  784,  777,  778,  779,
      785,  780,  786,  787,  781,  790,  791,  794,  795,  798,
      799,  800,  802,  782,  803,  804,  805,  813,  814,  815,

      816,  817,  818,  783,  819,  822,  784,  823,  824,  825,
      785,  827,  786,  787,  829,  790,  791,  794,  795,  798,
      799,  800,  802,  830,  803,  804,  805,  813,  814,  815,
      816,  817,  818,  831,  819,  822,  833,  823,  824,  825,
      837,  827,  838,  839,  829,  841,  842,  845,  846,  847,
      848,  849,  853,  830,  854,  856,  859,  860,  861,  863,
      864,  865,  866,  831,  867,  868,  833,  869,  870,  871,
      837,  873,  838,  839,  874,  841,  842,  845,  846,  847,
      848,  849,  853,  875,  854,  856,  859,  860,  861,  863,
      864,  865,  866,  876,  867,  868,  877,  869,  870,  871,

      879,  873,  881,  882,  874,  883,  884,  885,  887,  888,
      891,  892,  893,  875,  895,  896,  897,  899,  900,  901,
      902,  903,  904,  876,  905,  907,  877,  906,  906,  909,
      879,  910,  881,  882,  911,  883,  884,  885,  887,  888,
      891,  892,  893,  914,  895,  896,  897,  899,  900,  901,
      902,  903,  904,  915,  905,  907,  917,  906,  906,  909,
      918,  910,  919,  920,  911,  923,  924,  925,  926,  927,
      928,  928,  932,  914,  933,  934,  937,  938,  939,  940,
      942,  944,  946,  915,  947,  948,  917,  949,  950,  951,
      918,  952,  919,  920,  932,  923,  924,  925,  926,  927,

      928,  928,  953,  954,  933,  934,  937,  938,  939,  940,
      942,  944,  946,  957,  947,  948,  958,  949,  950,  951,
      960,  952,  961,  962,  932,  963,  964,  967,  968,  969,
      970,  971,  953,  954,  973,  975,  976,  977,  978,  980,
      981,  982,  983,  957,  985,  986,  958,  988,  989,  990,
      960,  993,  961,  962,  994,  963,  964,  967,  968,  969,
      970,  971,  995,  997,  973,  975,  976,  977,  978,  980,
      981,  982,  983,  998,  985,  986,  999,  988,  989,  990,
     1000,  993, 1001, 1003,  994, 1004, 1005, 1006, 1009, 1010,
     1012, 1014,  995,  997, 1015, 1016, 1020, 1021, 1023, 1024,

     1025, 1027, 1028,  998, 1029, 1016,  999, 1030, 1031, 1033,
     1000, 1036, 1001, 1003, 1037, 1004, 1005, 1006, 1009, 1010,
     1012, 1014, 1039, 1043, 1015, 1016, 1020, 1021, 1023, 1024,
     1025, 1027, 1028, 1044, 1029, 1016, 1045, 1030, 1031, 1033,
     1048, 1036, 1049, 1051, 1037, 1053, 1055, 1056, 1058, 1060,
     1061, 1064, 1039, 1043, 1066, 1068, 1069, 1071, 1072, 1073,
     1074, 1075, 1076, 1044, 1077, 1078, 1045, 1079, 1080, 1081,
     1048, 1084, 1049, 1051, 1085, 1053, 1055, 1056, 1058, 1060,
     1061, 1064, 1086, 1087, 1066, 1068, 1069, 1071, 1072, 1073,
     1074, 1075, 1076, 1088, 1077, 1078, 1089, 1079, 1080, 1081,

     1090, 1084, 1092, 1093, 1085, 1094, 1095, 1096, 1100, 1101,
     1103, 1105, 1086, 1087, 1106, 1107, 1109, 1110, 1111, 1112,
     1113, 1115, 1116, 1088, 1117, 1118, 1089, 1120, 1121, 1122,
     1090, 1123, 1092, 1093, 1124, 1094, 1095, 1096, 1100, 1101,
     1103, 1105, 1125, 1126, 1106, 1107, 1109, 1110, 1111, 1112,
     1113, 1115, 1116, 1127, 1117, 1118, 1128, 1120, 1121, 1122,
     1129, 1123, 1130, 1131, 1124, 1133, 1134, 1135, 1137, 1138,
     1139, 1140, 1125, 1126, 1141, 1143, 1144, 1145, 1148, 1149,
     1150, 1151, 1152, 1127, 1153, 1154, 1128, 1155, 1156, 1157,
     1129, 1158, 1130, 1131, 1160, 1133, 1134, 1135, 1137, 1138,

     1139, 1140, 1161, 1162, 1141, 1143, 1144, 1145, 1148, 1149,
     1150, 1151, 1152, 1163, 1153, 1154, 1164, 1155, 1156, 1157,
     1166, 1158, 1167, 1169, 1160, 1171, 1173, 1174, 1176, 1177,
     1178, 1181, 1161, 1162, 1182, 1183, 1184, 1186, 1188, 1189,
     1190, 1191, 1192, 1163, 1193, 1194, 1164, 1195, 1196, 1198,
     1166, 1199, 1167, 1169, 1200, 1171, 1173, 1174, 1176, 1177,
     1178, 1181, 1201, 1202, 1182, 1183, 1184, 1186, 1188, 1189,
     1190, 1191, 1192,    0, 1193, 1194,    0, 1195, 1196, 1198,
        0, 1199,    0,    0, 1200,    0,    0,    0,    0,    0,
        0,    0, 1201, 1202, 1205, 1205, 1205, 1205, 1205, 1205,

     1205, 1205, 1205, 1205, 1205, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1208,    0, 1208,
        0, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209, 1209,
     1210,    0, 1210, 1211, 1211, 1211, 1211,    0, 1211, 1211,
     1211, 1211, 1211, 1211, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1213,    0,    0, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1214, 1214, 1214, 1214, 1214,
     1214,    0, 1214, 1214, 1214, 1214, 1215,    0, 1215, 1216,
     1216, 1216, 1216, 1216,    0, 1216, 1216, 1216, 1216, 1216,

     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./sqlparser.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "./sqlparser.l"

#include "node.h"
#include "sqlparser_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#line 1448 "sqlparser_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1461 "sqlparser_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 99 "./sqlparser.l"

#line 1748 "sqlparser_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1205 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1204 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 100 "./sqlparser.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 101 "./sqlparser.l"
{ return ALTER; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 102 "./sqlparser.l"
{ return AND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 103 "./sqlparser.l"
{ return ANY; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 104 "./sqlparser.l"
{ return ALL; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 105 "./sqlparser.l"
{ return AS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 106 "./sqlparser.l"
{ return ASC; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 107 "./sqlparser.l"
{ return BEGI; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 108 "./sqlparser.l"
{ return BETWEEN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 109 "./sqlparser.l"
{ return BIGINT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 110 "./sqlparser.l"
{ return BINARY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 111 "./sqlparser.l"
{ return BOTH; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "./sqlparser.l"
{ return BROWSE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "./sqlparser.l"
{ return BY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 114 "./sqlparser.l"
{ return CASCADE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 115 "./sqlparser.l"
{ return CASE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 116 "./sqlparser.l"
{ return CHARACTER; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 117 "./sqlparser.l"
{ return CLUSTER; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 118 "./sqlparser.l"
{ return COLUMN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 119 "./sqlparser.l"
{ return COLUMNS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 120 "./sqlparser.l"
{ return COMMIT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 121 "./sqlparser.l"
{ return CONSISTENT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 122 "./sqlparser.l"
{ return CREATE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 123 "./sqlparser.l"
{ return CREATETIME; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 124 "./sqlparser.l"
{ return CROSS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 125 "./sqlparser.l"
{ return CURRENT_USER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 126 "./sqlparser.l"
{ return DATE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 127 "./sqlparser.l"
{ return DATETIME; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 128 "./sqlparser.l"
{ return DEALLOCATE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 129 "./sqlparser.l"
{ return DECIMAL; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 130 "./sqlparser.l"
{ return DEFAULT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 131 "./sqlparser.l"
{ return DELETE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 132 "./sqlparser.l"
{ return DESC; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 133 "./sqlparser.l"
{ return DESCRIBE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 134 "./sqlparser.l"
{ return DISTINCT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 135 "./sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 136 "./sqlparser.l"
{ return DROP; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 137 "./sqlparser.l"
{ return DUAL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 138 "./sqlparser.l"
{ return ELSE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 139 "./sqlparser.l"
{ return END; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 140 "./sqlparser.l"
{ return ERROR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 141 "./sqlparser.l"
{ return EXCEPT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 142 "./sqlparser.l"
{ return EXECUTE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 143 "./sqlparser.l"
{ return EXISTS; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 144 "./sqlparser.l"
{ return EXPLAIN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 145 "./sqlparser.l"
{ return FETCH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 146 "./sqlparser.l"
{ return FIRST; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "./sqlparser.l"
{ return NEXT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "./sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "./sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 150 "./sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 151 "./sqlparser.l"
{ return FOR; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 152 "./sqlparser.l"
{ return FROM; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 153 "./sqlparser.l"
{ return FULL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 154 "./sqlparser.l"
{ return GRANT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 155 "./sqlparser.l"
{ return GROUP; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 156 "./sqlparser.l"
{ return GLOBAL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 157 "./sqlparser.l"
{ return HASH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 158 "./sqlparser.l"
{ return HAVING; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 159 "./sqlparser.l"
{ return IDENTIFIED; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 160 "./sqlparser.l"
{ return IF; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 161 "./sqlparser.l"
{ return IN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 162 "./sqlparser.l"
{ return INNER; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 163 "./sqlparser.l"
{ return INTERSECT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 164 "./sqlparser.l"
{ return INSERT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 165 "./sqlparser.l"
{ return INTO; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 166 "./sqlparser.l"
{ return IS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 167 "./sqlparser.l"
{ return JOIN; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "./sqlparser.l"
{ return KEY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 169 "./sqlparser.l"
{ return LEADING; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "./sqlparser.l"
{ return LEFT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "./sqlparser.l"
{ return LIMIT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 172 "./sqlparser.l"
{ return LIKE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 173 "./sqlparser.l"
{ return LOCAL; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "./sqlparser.l"
{ return LOCKED; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 175 "./sqlparser.l"
{ return LOOP; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 176 "./sqlparser.l"
{ return MEMORY; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 177 "./sqlparser.l"
{ return MERGE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "./sqlparser.l"
{ return MOD; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "./sqlparser.l"
{ return MODIFYTIME; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "./sqlparser.l"
{ return NATURAL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "./sqlparser.l"
{ return NOT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "./sqlparser.l"
{ return NUMERIC; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "./sqlparser.l"
{ return OFFSET; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "./sqlparser.l"
{ return ON; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "./sqlparser.l"
{ return ONLY; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "./sqlparser.l"
{ return OPTION; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "./sqlparser.l"
{ return OR; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "./sqlparser.l"
{ return ORDER; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "./sqlparser.l"
{ return OUTER; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 190 "./sqlparser.l"
{ return COMMENT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 191 "./sqlparser.l"
{ return PARAMETERS; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 192 "./sqlparser.l"
{ return PASSWORD; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 193 "./sqlparser.l"
{ return PRECISION; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 194 "./sqlparser.l"
{ return PREPARE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 195 "./sqlparser.l"
{ return PRIMARY; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 196 "./sqlparser.l"
{ return REAL; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 197 "./sqlparser.l"
{ return REMOTE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 198 "./sqlparser.l"
{ return RENAME; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 199 "./sqlparser.l"
{ return REPLACE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 200 "./sqlparser.l"
{ return RESTRICT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 201 "./sqlparser.l"
{ return REVOKE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 202 "./sqlparser.l"
{ return RIGHT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 203 "./sqlparser.l"
{ return ROLLBACK; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 204 "./sqlparser.l"
{ return ROW; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 205 "./sqlparser.l"
{ return ROWS; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 206 "./sqlparser.l"
{ return PRIVILEGES; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 207 "./sqlparser.l"
{ return SELECT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 208 "./sqlparser.l"
{ return SCHEMA; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 209 "./sqlparser.l"
{ return PROCESSLIST; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 210 "./sqlparser.l"
{ return SCOPE; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 211 "./sqlparser.l"
{ return SESSION; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 212 "./sqlparser.l"
{ return SET; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 213 "./sqlparser.l"
{ return SHOW; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 214 "./sqlparser.l"
{ return SMALLINT; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 215 "./sqlparser.l"
{ return SNAPSHOT; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 216 "./sqlparser.l"
{ return SPFILE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 217 "./sqlparser.l"
{ return START; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 218 "./sqlparser.l"
{ return STATIC; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 219 "./sqlparser.l"
{ return WEAK;   }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 220 "./sqlparser.l"
{ return STRONG; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 221 "./sqlparser.l"
{ return SYSTEM; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 222 "./sqlparser.l"
{ return TABLE; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 223 "./sqlparser.l"
{ return TABLES; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 224 "./sqlparser.l"
{ return THEN; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 225 "./sqlparser.l"
{ return TIME; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 226 "./sqlparser.l"
{ return TIMESTAMP; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 227 "./sqlparser.l"
{ return TINYINT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 228 "./sqlparser.l"
{ return TO; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 229 "./sqlparser.l"
{ return TRAILING; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 230 "./sqlparser.l"
{ return TRANSACTION; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 231 "./sqlparser.l"
{ return UNION; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 232 "./sqlparser.l"
{ return UPDATE; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 233 "./sqlparser.l"
{ return USING; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 234 "./sqlparser.l"
{ return VALUES; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 235 "./sqlparser.l"
{ return VARBINARY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 236 "./sqlparser.l"
{ return VARCHAR; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 237 "./sqlparser.l"
{ return WHERE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 238 "./sqlparser.l"
{ return WHEN; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 239 "./sqlparser.l"
{ return WITH; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 240 "./sqlparser.l"
{ return WORK; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 241 "./sqlparser.l"
{ return KILL; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 242 "./sqlparser.l"
{ return QUERY; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 243 "./sqlparser.l"
{ return CONNECTION; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 244 "./sqlparser.l"
{ return FROZEN;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 245 "./sqlparser.l"
{ return GLOBAL_ALIAS; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 246 "./sqlparser.l"
{ return SESSION_ALIAS; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 247 "./sqlparser.l"
{ return CHANGE_OBI; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 248 "./sqlparser.l"
{ return SWITCH_CLUSTER; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 249 "./sqlparser.l"
{ return SET_MASTER_CLUSTER; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 250 "./sqlparser.l"
{ return SET_SLAVE_CLUSTER;  }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 251 "./sqlparser.l"
{ return MASTER; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 252 "./sqlparser.l"
{ return SLAVE;  }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 253 "./sqlparser.l"
{ return FORCE;  }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 254 "./sqlparser.l"
{ return TOP; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 255 "./sqlparser.l"
{ return PERCENT; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 256 "./sqlparser.l"
{ return TIES; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 257 "./sqlparser.l"
{ return FAST; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 258 "./sqlparser.l"
{ return DISABLE; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 259 "./sqlparser.l"
{ return EXTERNALPUSHDOWN; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 260 "./sqlparser.l"
{ return IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 261 "./sqlparser.l"
{ return KEEP; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 262 "./sqlparser.l"
{ return PLAN; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 263 "./sqlparser.l"
{ return KEEPFIXED; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 264 "./sqlparser.l"
{ return MAX_GRANT_PERCENT; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 265 "./sqlparser.l"
{ return MIN_GRANT_PERCENT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 266 "./sqlparser.l"
{ return MAXDOP; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 267 "./sqlparser.l"
{ return MAXRECURSION; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 268 "./sqlparser.l"
{ return NO_PERFORMANCE_SPOOL; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 269 "./sqlparser.l"
{ return PARAMETERIZATION; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 270 "./sqlparser.l"
{ return SIMPLE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 271 "./sqlparser.l"
{ return FORCED; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 272 "./sqlparser.l"
{ return RECOMPILE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 273 "./sqlparser.l"
{ return ROBUST; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 274 "./sqlparser.l"
{ return CHECKSUM; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 275 "./sqlparser.l"
{ return BINARY_CHECKSUM; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 276 "./sqlparser.l"
{ return RANK; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 277 "./sqlparser.l"
{ return DENSE_RANK; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 278 "./sqlparser.l"
{ return ROW_NUMBER; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 279 "./sqlparser.l"
{ return NTILE; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 280 "./sqlparser.l"
{ return PARTITION; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 281 "./sqlparser.l"
{ return RANGE; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 282 "./sqlparser.l"
{ return UNBOUNDED; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 283 "./sqlparser.l"
{ return PRECEDING; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 284 "./sqlparser.l"
{ return CURRENT; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 285 "./sqlparser.l"
{ return FOLLOWING; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 286 "./sqlparser.l"
{ return OVER; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 287 "./sqlparser.l"
{ return VARP; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 288 "./sqlparser.l"
{ return VAR; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 289 "./sqlparser.l"
{ return SUM; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 290 "./sqlparser.l"
{ return STDEVP; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 291 "./sqlparser.l"
{ return STDEV; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 292 "./sqlparser.l"
{ return MIN; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 293 "./sqlparser.l"
{ return MAX; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 294 "./sqlparser.l"
{ return LEAD; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 295 "./sqlparser.l"
{ return LAST_VALUE; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 296 "./sqlparser.l"
{ return LAG; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 297 "./sqlparser.l"
{ return GROUPING_ID; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 298 "./sqlparser.l"
{ return GROUPING; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 299 "./sqlparser.l"
{ return FIRST_VALUE; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 300 "./sqlparser.l"
{ return COUNT_BIG; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 301 "./sqlparser.l"
{ return COUNT; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 302 "./sqlparser.l"
{ return CHECKSUM_AGG; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 303 "./sqlparser.l"
{ return AVG; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 304 "./sqlparser.l"
{ return SYSTEM_USER; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 305 "./sqlparser.l"
{ return STUFF; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 306 "./sqlparser.l"
{ return SESSION_USER; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 307 "./sqlparser.l"
{ return NULLIF; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 308 "./sqlparser.l"
{ return MIN_ACTIVE_ROWVERSION; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 309 "./sqlparser.l"
{ return ISNULL; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 310 "./sqlparser.l"
{ return IDENTITY; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 311 "./sqlparser.l"
{ return GETUTCDATE; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 312 "./sqlparser.l"
{ return GETDATE; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 313 "./sqlparser.l"
{ return DATEPART; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 314 "./sqlparser.l"
{ return DATENAME; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 315 "./sqlparser.l"
{ return DATEDIFF; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 316 "./sqlparser.l"
{ return DATEADD; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 317 "./sqlparser.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 318 "./sqlparser.l"
{ return CONVERT; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 319 "./sqlparser.l"
{ return COALESCE; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 320 "./sqlparser.l"
{ return CAST; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 321 "./sqlparser.l"
{ return BIT; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 322 "./sqlparser.l"
{ return CHAR; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 323 "./sqlparser.l"
{ return DATETIME2; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 324 "./sqlparser.l"
{ return DATETIMEOFFSET; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 325 "./sqlparser.l"
{ return INT; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 326 "./sqlparser.l"
{ return MONEY; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 327 "./sqlparser.l"
{ return NCHAR; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 328 "./sqlparser.l"
{ return NVARCHAR; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 329 "./sqlparser.l"
{ return SMALLDATETIME; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 330 "./sqlparser.l"
{ return SMALLMONEY; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 331 "./sqlparser.l"
{ return TEXT; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 332 "./sqlparser.l"
{ return COLLATE; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 333 "./sqlparser.l"
{ return APPLY; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 334 "./sqlparser.l"
{ return SYSTEM_TIME; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 335 "./sqlparser.l"
{ return OF; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 336 "./sqlparser.l"
{ return CONTAINED; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 337 "./sqlparser.l"
{ return PIVOT; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 338 "./sqlparser.l"
{ return UNPIVOT; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 339 "./sqlparser.l"
{ return OUTPUT; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 340 "./sqlparser.l"
{ return DELETED; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 341 "./sqlparser.l"
{ return INSERTED; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 342 "./sqlparser.l"
{ return OPTIMIZE; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 345 "./sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return NULLX;
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 350 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return INTNUM;
}
	YY_BREAK
case 246:
#line 358 "./sqlparser.l"
case 247:
#line 359 "./sqlparser.l"
case 248:
YY_RULE_SETUP
#line 359 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 249:
#line 367 "./sqlparser.l"
case 250:
YY_RULE_SETUP
#line 367 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 374 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return BOOL;
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 381 "./sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return UNKNOWN;
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 386 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return BOOL;
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 393 "./sqlparser.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 399 "./sqlparser.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "N'";
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 405 "./sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 409 "./sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 413 "./sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return STRING;
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 422 "./sqlparser.l"
{
    BEGIN(sb);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '[';
}
	YY_BREAK
case 260:
/* rule 260 can match eol */
YY_RULE_SETUP
#line 428 "./sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 432 "./sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << ']';
    std::string text = ((ParseResult*)yyextra)->buf_.str();
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, text.c_str());
    nd->terminalToken_.str = text.substr(1, text.length() - 2);
    yylval->node = nd;
    return NAME;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 442 "./sqlparser.l"
{
  fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return ERROR;
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 447 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = std::string(yytext+1, yytext + strlen(yytext) - 1);
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return NAME;
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 456 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_TEMP_VARIABLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = yytext + 1;    // skip '@'
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return TEMP_VARIABLE;
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 465 "./sqlparser.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return NAME;
}
	YY_BREAK
case 265:
/* rule 265 can match eol */
YY_RULE_SETUP
#line 474 "./sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 475 "./sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 477 "./sqlparser.l"
{ return yytext[0];}
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 479 "./sqlparser.l"
{ return CNNOP; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 480 "./sqlparser.l"
{ return COMP_EQ; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 481 "./sqlparser.l"
{ return COMP_GE; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 482 "./sqlparser.l"
{ return COMP_GT; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 483 "./sqlparser.l"
{ return COMP_LE; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 484 "./sqlparser.l"
{ return COMP_LT; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 485 "./sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 486 "./sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 488 "./sqlparser.l"
{ return ASSIGN_ADD; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 489 "./sqlparser.l"
{ return ASSGIN_MINUS; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 490 "./sqlparser.l"
{ return ASSIGN_MUL; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 491 "./sqlparser.l"
{ return ASSIGN_DIV; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 492 "./sqlparser.l"
{ return ASSIGN_REM; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 493 "./sqlparser.l"
{ return ASSIGN_BITWISE_AND; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 494 "./sqlparser.l"
{ return ASSIGN_BITWISE_OR; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 495 "./sqlparser.l"
{ return ASSIGN_BITWISE_XOR; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 497 "./sqlparser.l"

	YY_BREAK
case 285:
YY_RULE_SETUP
#line 499 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
case YY_STATE_EOF(sb):
#line 506 "./sqlparser.l"
{ return END_P; }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 508 "./sqlparser.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return ERROR;
}
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 512 "./sqlparser.l"
ECHO;
	YY_BREAK
#line 3336 "sqlparser_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1205 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1205 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1204);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 512 "./sqlparser.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

