#line 2 "sqlparser_flex.cpp"

#line 4 "sqlparser_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

#ifdef yyget_lloc
#define yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc yyget_lloc
#endif

#ifdef yyset_lloc
#define yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc yyset_lloc
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 288
#define YY_END_OF_BUFFER 289
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1205] =
    {   0,
      285,  285,    0,    0,  258,  258,  261,  261,  289,  287,
      267,  267,  268,  287,  268,  268,  268,  255,  268,  268,
      268,  268,  268,  246,  274,  270,  272,  286,  287,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  260,  268,  268,  288,  258,  259,  261,
      262,  267,  276,    0,  281,  282,  279,  277,  266,  278,
      251,    0,  280,  250,  246,    0,  273,  275,  271,    0,
      264,  265,  265,  265,  265,  265,    6,  265,  265,  265,
      265,  265,   14,  265,  265,  265,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,   61,  265,   62,   67,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  256,  265,  265,  265,
      265,  265,  265,  265,  235,   85,  265,   88,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  129,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  284,  283,  269,
      258,  257,  261,  263,  266,    0,    0,  250,    0,    0,

      247,    0,    0,  264,    1,    5,  265,    3,    4,  265,
        7,  203,  265,  265,  265,  265,  221,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,   30,  265,  265,  265,  265,  265,  265,
      265,  265,  265,   40,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,   52,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  225,
      265,  265,  265,   69,  265,  196,  265,  265,  265,  265,
      265,  265,  265,  193,  265,  265,  192,   79,  265,  265,
      265,  265,   82,  265,  265,  265,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  105,  265,  265,  265,  265,  113,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  189,  265,  265,  265,  265,  265,  265,  265,  265,
      154,  265,  265,  265,  265,  265,  265,  265,  244,  265,
      265,  188,  265,  265,  265,  265,    0,  249,    0,    0,
      248,    0,    0,  265,  265,  265,  265,  265,  265,   12,
      265,  265,   16,  220,  265,  222,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,

       27,  265,  265,  265,  265,  265,   33,  265,  265,  265,
       37,   38,   39,  265,  265,  265,  265,  265,  265,  265,
      157,  265,  265,  265,  265,  265,   53,  265,   54,  265,
      265,  265,  265,  265,   58,  265,  265,  265,  265,  265,
      265,   66,  265,   68,  161,  142,  265,  194,   71,   73,
      265,  265,  265,   76,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,   48,  265,  265,  245,  265,  265,
      265,   86,  265,  265,  265,  265,  186,  265,  265,  265,
      265,  265,  162,  265,  265,  265,  265,  265,  265,  265,
      176,   97,  265,  265,  265,  265,  265,  265,  265,  265,

      265,  106,  265,  265,  265,  265,  265,  265,  114,  265,
      265,  265,  265,  243,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  231,  125,  156,  126,  265,  265,  265,
      252,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      187,  120,  139,  265,  140,  141,    0,    0,    0,    2,
      233,    8,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      201,  265,   25,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,   41,  265,
      265,  265,  265,  265,  254,   46,   47,   49,  265,  153,

      265,  265,  265,  265,   55,   56,  265,  265,  265,   63,
      265,  265,  265,  265,  265,  265,   72,   74,  265,  265,
      265,  265,  265,   78,  265,  265,  265,  226,  265,  227,
      265,  179,  265,  265,  265,  265,  265,  265,   89,   90,
      265,  265,  265,  265,  265,  237,  265,  265,  265,  265,
      265,  265,  143,  181,  265,  265,  265,  265,  265,  265,
      103,  265,  265,  265,  265,  111,  265,  265,  265,  265,
      265,  152,  265,  265,  265,  118,  265,  191,  265,  205,
      265,  265,  123,  265,  265,  265,  265,  265,  132,  265,
      265,  265,  134,  265,  265,  265,  138,  266,    0,    0,

      265,   10,   11,   13,  265,  265,  265,  265,  265,  265,
      265,   19,  265,   21,  265,  265,  265,  265,  265,   23,
      265,  265,  265,  265,  265,  265,  265,  265,  265,   32,
      265,  265,  265,  265,   36,   42,  265,   44,  265,  265,
      265,   50,   51,  265,  171,  145,  265,  265,   57,  265,
       59,  265,  265,   65,  265,  209,  265,  265,  265,   75,
      166,  265,  265,   77,  265,  265,  265,  265,  265,  207,
      265,  265,   84,  265,   87,  239,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,   98,   99,  265,
      265,  102,  173,  265,  265,  109,  108,  265,  265,  265,

      170,  265,  265,  265,  265,  117,  119,  190,  121,  265,
      122,  124,  265,  265,  265,  265,  265,  265,  265,  133,
      135,  265,  265,    0,    0,    9,  265,   15,  265,  265,
      265,   18,  265,  232,   20,   91,  265,  265,  265,  218,
      265,  265,  184,  216,  265,  265,  265,  265,  265,   30,
       31,  240,  265,  265,  158,  265,   43,   45,  265,  265,
      265,  212,  265,  265,  265,  265,  265,  265,  265,  265,
      265,   70,  265,  265,  265,  265,  265,   81,  265,   83,
      265,  265,  265,  265,  265,  155,  265,  265,   95,   96,
      265,  265,  265,  100,  265,  265,  265,  112,  265,  265,

      265,  265,  265,  265,  265,  265,  265,  128,  265,  265,
      265,  253,  238,  265,  137,  146,    0,  265,  265,  265,
      174,  219,  265,  265,  265,  265,  265,  265,  215,  214,
      213,   28,  265,  265,   34,   35,  265,  265,  265,  265,
      198,  265,  210,  265,  241,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  228,  242,  265,  265,   93,  265,
      265,  265,  265,  265,  101,  104,  265,  265,  265,  265,
      265,  115,  265,  116,  265,  265,  265,  265,  130,  265,
      265,  265,  265,  147,  265,  265,   17,  265,  265,  265,
      236,  200,  265,  265,  265,  223,  265,  265,  265,  265,

      265,  185,  265,  265,  265,  265,   64,  163,  265,  265,
      265,  265,  265,  265,  265,  265,  180,  183,   94,  265,
      265,  172,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  127,  265,  182,  136,  265,  265,  148,  265,  144,
       22,   24,  265,  265,  265,   29,  177,  265,  265,  211,
      265,   60,  265,  195,  265,  265,  265,  265,   80,  265,
      265,   92,  107,  265,  178,  265,  265,  265,  265,  230,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  199,  197,  265,  265,  265,  265,  265,  265,  265,
      110,  265,  265,  265,  265,  265,  234,  204,  131,  265,

      265,  202,  265,   26,  265,  265,  265,  167,  265,  265,
      265,  265,  265,  206,  265,  265,  265,  265,  137,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  229,  265,  265,  265,  224,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  149,  175,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  159,  265,
      265,  265,  265,  265,  169,  265,  265,  217,  265,  164,
      265,  165,  265,  265,  151,  265,  265,  265,  150,  265,
      265,  265,  265,  265,  168,  265,  208,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,

      265,  265,  160,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    8,    9,   10,    7,
        7,   11,   12,    7,   13,   14,   15,   16,   16,   17,
       16,   18,   16,   16,   16,   19,   16,    1,    7,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,    1,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
       79,   80,    1,   81,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[82] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    1,    1,    5,
        6,    7,    1,    1,    6,    8,    8,    8,    8,    1,
        1,    1,    1,    9,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1,   11,    1,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1
    } ;

static const flex_int16_t yy_base[1217] =
    {   0,
        0,    0,    0,    0,  620,  617,  573,  572,  614, 2511,
       80,   83,  591,    0, 2511,  559,  558, 2511,  500,  443,
       75,   73,   82,   81,   80, 2511,  441, 2511,  431,   76,
       76,   81,  129,  121,  180,  131,   69,  180,   68,  132,
      195,  232,  292,  236,  244,   63,  259,  342,  301,  174,
       86,  361,    0, 2511,  430,  100, 2511,    0,  439,    0,
     2511,  125, 2511,  412, 2511, 2511, 2511, 2511,    0, 2511,
      336,    0, 2511,  409,  415,  214, 2511, 2511, 2511,  133,
        0,    0,  138,  141,  266,  130,  145,  190,  239,  404,
      185,  198,    0,  202,  268,  215,  347,  407,  237,  261,

      420,  277,  284,  293,  321,  315,  349,  395,  452,  416,
      395,  398,  402,  418,  404,  417,  413,  422,  469,  452,
      468,    0,  461,  462,  463,  469,  474,  468,  476,  487,
      479,  512,  462,  476,  482,  517, 2511,  497,  520,  506,
      512,  524,  522,  535,  531,  526,  519,  536,  521,  538,
      530,  526,  524,  549,  572,  547,  539,  617,  547,  573,
      578,  579,  544,  559,  591,  593,  594,  584,  598,  631,
      595,  601,  593,  611,  590,  632,  640,  625,  655,  676,
      643,  659,  662,  650,  653,  639,  652, 2511, 2511, 2511,
        0, 2511,    0, 2511,    0,  731,    0,  735,  743,  114,

      719,  660,  668,    0,    0,    0,  686,    0,    0,  697,
        0,    0,  707,  695,  724,  733,    0,  733,  719,  740,
      733,  741,  730,  738,  740,  740,  773,  740,  754,  737,
      740,  754,  754,  758,  767,  764,  757,  775,  793,  798,
      785,  790,  798,    0,  789,  800,  804,  790,  798,  806,
      793,  794,  812,  797,  817,  807,  817,  825,  814,  832,
      825,  814,  808,  839,  843,  840,  840,  855,  856,  857,
      842,  850,  849,    0,  855,    0,  849,  866,  851,  868,
      865,  875,  859,  892,  863,  872,  352,  878,  883,  868,
      897,  887,    0,  895,  900,  901,  909,  897,  901,  896,

      914,  919,  920,  909,  928,  911,  928,  917,  919,  931,
      936,  932,  920,  945,  927,  931,  952,  969,  959,  952,
      958,  966,  954,  968,  962,  978,  968,  980,  968,  349,
      966,  974,  969,  981,  978,  990,  987,  988,  993,  984,
     1001,    0,  989,  992, 1004,  998, 1008, 1008, 1025, 1006,
        0, 1026, 1027, 1018, 1019, 1027, 1034, 1043,    0, 1031,
     1026, 1051, 1038, 1037, 1042, 1045, 1095, 1099,  387, 1106,
     1110, 1051, 1057, 1060, 1057, 1081, 1102, 1095, 1092,    0,
     1092, 1112,    0,    0, 1107, 1114, 1105, 1097, 1113, 1118,
     1107, 1117, 1116, 1114, 1123, 1122, 1108, 1109, 1111, 1126,

     1161, 1121, 1121, 1115, 1118, 1137, 1137, 1165, 1160, 1158,
        0,    0,    0, 1153, 1157, 1153, 1156, 1177, 1161, 1175,
        0, 1174, 1163, 1164, 1171, 1182,    0, 1183,    0, 1188,
     1170, 1190, 1173, 1178,    0, 1182, 1178, 1184, 1197, 1204,
     1207,    0, 1215,    0, 1223,    0,  343, 1221,    0,    0,
     1211, 1221, 1229,    0, 1220, 1231, 1230, 1220, 1234, 1239,
     1235, 1217, 1225, 1226,    0, 1242, 1243, 1240, 1232, 1248,
     1248,    0, 1241, 1240, 1244, 1254,    0, 1269, 1276, 1264,
     1284, 1270,    0, 1286, 1292, 1293, 1287, 1292, 1273, 1294,
        0,    0, 1287, 1281, 1289, 1302, 1286, 1295, 1287, 1289,

     1307,    0, 1296, 1298, 1308, 1311, 1307, 1329,    0, 1310,
     1330, 1333, 1328,    0, 1337, 1330, 1342, 1331, 1340, 1349,
     1353, 1352, 1353,    0,    0,    0, 1340, 1351, 1349, 1343,
        0, 1342, 1350, 1351, 1345, 1348, 1362, 1365, 1362, 1365,
        0,    0,    0, 1369,    0,    0,  164, 1374, 1363,    0,
        0,    0, 1390, 1382, 1380, 1402, 1404, 1404, 1407, 1392,
     1408, 1395, 1395, 1402, 1403, 1398, 1416, 1401, 1412, 1404,
      342, 1418,    0, 1410, 1422, 1418, 1427, 1428, 1421, 1416,
     1432, 1422, 1431,  303, 1433, 1443, 1448, 1460,    0, 1447,
     1448, 1450, 1461, 1457,    0,    0,  294,  164, 1450, 1470,

     1461, 1456, 1474, 1466,    0, 1470, 1473, 1472, 1477,    0,
     1463, 1465, 1474, 1478, 1466, 1475,    0,    0, 1486, 1475,
     1490, 1476, 1471,    0, 1499, 1497, 1497,    0, 1524,    0,
     1509,    0, 1522, 1520, 1522, 1511, 1524, 1520,    0,    0,
     1515, 1531, 1517, 1523, 1525,    0, 1536, 1522, 1524, 1525,
     1532, 1527,    0,    0, 1531, 1543, 1544, 1547, 1542, 1548,
        0, 1534, 1555, 1541, 1574,    0, 1562, 1570, 1586, 1576,
     1584,    0, 1586, 1583, 1588,    0, 1591, 1580, 1590,    0,
     1590, 1587, 1582, 1582, 1589, 1595, 1605, 1593,    0, 1585,
     1594, 1605,    0, 1592, 1599, 1613,    0, 2511, 1615, 1613,

     1621,    0,  290,    0, 1637,  288, 1625, 1626, 1630, 1646,
     1645, 1632, 1633,    0, 1634, 1635, 1642, 1637, 1656, 1639,
     1640, 1657, 1656, 1650, 1646, 1653, 1664, 1656, 1649, 1666,
     1653, 1671, 1669, 1673,    0,    0, 1677,    0, 1681, 1701,
     1683,    0,    0, 1698,    0,    0, 1703, 1705,    0, 1696,
        0, 1707,  287, 1706, 1709,    0, 1691, 1715, 1710,    0,
        0, 1697, 1718,    0, 1700, 1720, 1702, 1711, 1718,    0,
     1723, 1727,    0, 1703,    0,    0, 1710, 1722, 1715, 1714,
     1727, 1733, 1750, 1737, 1760, 1748, 1759,    0,    0, 1764,
     1767,    0,    0, 1768, 1760,    0,    0, 1760, 1756, 1775,

        0, 1776, 1764, 1764, 1765,    0,    0,    0,    0,  285,
      271,    0, 1780, 1762, 1769, 1781, 1782, 1773, 1768,    0,
        0, 1788, 1772, 1779, 1778,    0, 1791,    0, 1781, 1797,
     1802,    0, 1817,    0,    0,    0, 1816, 1822, 1823,    0,
     1820, 1821,  235,    0, 1825, 1828, 1814, 1830, 1835,    0,
        0,    0, 1836, 1833,    0, 1819,    0,    0, 1828, 1840,
     1828,    0, 1842, 1837, 1837, 1822, 1834, 1845, 1847, 1846,
     1841,    0, 1836, 1842, 1853, 1861, 1873,    0, 1870,    0,
     1869, 1883, 1884, 1875, 1887,    0, 1879, 1879,    0,    0,
     1888, 1884, 1885,    0, 1878, 1888, 1898,  231, 1881, 1880,

     1883, 1884, 1892, 1887, 1905, 1889, 1898,    0, 1906, 1894,
     1911,    0,    0, 1904, 1934, 2511, 1928, 1937, 1945, 1930,
      218,    0, 1934, 1936, 1947, 1946, 1941, 1935,    0,    0,
        0, 1967, 1937, 1944,    0,    0, 1943, 1949, 1955, 1943,
      214, 1959,    0, 1951,    0, 1947, 1964, 1948, 1951, 1951,
     1951, 1954, 1963, 1972,    0,    0, 1977, 1988,    0, 1998,
     1993, 2003, 2000, 2005,    0,    0, 2006, 1992, 2009, 2010,
     2011,    0, 2012,    0, 2006, 2010, 2002, 2006,    0, 2014,
     2020, 2001, 2024, 2511, 2023, 2020,    0, 2029, 2017, 2013,
        0,    0, 2029, 2027, 2023,    0, 2044, 2050, 2051, 2044,

     2046,    0, 2063, 2060, 2066, 2057,    0,    0, 2068, 2065,
      209, 2070,  208, 2071, 2064, 2069,    0,    0,    0, 2060,
     2062,    0, 2064, 2064, 2066,  202, 2066, 2062, 2068, 2077,
     2086,    0, 2078,    0,    0, 2074, 2093,    0, 2095,    0,
        0,    0, 2097, 2110, 2116,    0,    0, 2106, 2122,    0,
     2124,    0, 2126,    0, 2115, 2115,  182, 2117,    0, 2133,
     2109,    0,    0, 2116,    0, 2132,  132, 2135, 2130,    0,
     2122, 2137, 2125, 2130, 2141, 2136, 2141, 2144, 2132, 2132,
     2145,    0,    0, 2142, 2142, 2157, 2152, 2170, 2168, 2184,
        0, 2169, 2185, 2177, 2177, 2171,    0,    0,    0, 2175,

     2175,    0, 2176,    0, 2191, 2193, 2177,    0, 2181, 2186,
     2184, 2200, 2184,    0, 2194, 2186, 2203, 2204,    0, 2189,
     2191, 2193, 2199, 2197, 2219, 2207, 2232, 2237, 2236, 2226,
     2229,    0, 2231, 2237, 2250,    0, 2230, 2234, 2250, 2234,
     2252,  126, 2243, 2240, 2241,    0,    0, 2249, 2249, 2259,
     2252, 2262, 2254, 2250, 2256, 2251, 2268, 2258,    0, 2258,
     2262, 2272, 2275, 2286,    0, 2300, 2289,    0, 2303,    0,
     2290,    0, 2295, 2293,    0, 2309, 2305, 2300,    0,  124,
     2301, 2305, 2315, 2305,    0, 2306,    0, 2310, 2302, 2311,
     2312, 2308, 2308, 2314, 2312, 2326,   97, 2324, 2320, 2332,

     2337, 2326,    0, 2511, 2404, 2415, 2426, 2437, 2440, 2443,
     2453, 2464, 2474, 2485, 2489, 2499
    } ;

static const flex_int16_t yy_def[1217] =
    {   0,
     1204,    1, 1205, 1205, 1206, 1206, 1207, 1207, 1204, 1204,
     1204, 1204, 1204, 1208, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1209, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1204, 1204, 1204, 1204, 1211, 1204, 1212,
     1204, 1204, 1204, 1208, 1204, 1204, 1204, 1204, 1213, 1204,
     1204, 1214, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1215, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1204, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1204, 1204, 1204,
     1211, 1204, 1212, 1204, 1213, 1204, 1216, 1204, 1204, 1204,

     1204, 1204, 1204, 1215, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1204, 1204, 1216, 1204,
     1204, 1204, 1204, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1204, 1204, 1204, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1204, 1204, 1204,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1204, 1204, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1204, 1204, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1204, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,

     1210, 1210, 1210,    0, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204
    } ;

static const flex_int16_t yy_nxt[2593] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   24,   24,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   53,   53,
       54,   10,   55,   10,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   53,   53,
       56,   62,   62,   62,   62,   62,   62,   69,   71,   71,
       71,   71,   72,  120,   74,   70,   75,   75,   75,   75,

       77,   78,   73,   83,   89,   94,  126,  156,   90,   76,
      183,   84,   95,   85,   91,   86,   96,   92,   87,   97,
      189,   88,   98,  120,   93,   99,   62,   62,   62,  201,
      201,  201,  201,   83,   89,   94,  126,  156,   90,   76,
      183,   84,   95,   85,   91,   86,   96,   92,   87,   97,
     1198,   88,   98,  100,   93,   99,  106,  101,  107,  117,
      127,  102,  108,  202,  128,  205,  118,  103,  109,  210,
      104,  211,  119,  105,  547,  203,  206, 1183,  698, 1154,
      190,  742,  743,  100,  207, 1093,  106,  101,  107,  117,
      127,  102,  108,  202,  128,  205,  118,  103,  109,  210,

      104,  211,  119,  105,  110,  203,  206,  121,  111,  122,
      123,  180,  112,  181,  207,  113,  182,  124,  114,  129,
      212,  115,  125,  130,  116,  200,  200,  131,  218,  201,
      201,  201,  201,  132,  110, 1087,  219,  121,  111,  122,
      123,  180,  112,  181,  220,  113,  182,  124,  114,  129,
      212,  115,  125,  130,  116, 1068,  133,  131,  218,  223,
      134, 1058, 1056,  132,  135,  145,  219, 1004,  151,  213,
      136,  988,  152,  146,  220,  147,  153,  148,  231,  154,
      149,  150,  214,  157,  968,  155,  133,  158,  928,  223,
      134,  159,  221,  208,  135,  145,  222,  160,  151,  213,

      136,  137,  152,  146,  232,  147,  153,  148,  231,  154,
      149,  150,  214,  157,  209,  155,  138,  158,  139,  239,
      140,  159,  221,  208,  906,  174,  222,  160,  240,  175,
      141,  241,  176,  177,  232,  142,  143,  144,  905,  178,
      867,  829,  179,  827,  209,  242,  138,  741,  139,  239,
      140,   71,   71,   71,   71,  174,  731,  243,  240,  175,
      141,  241,  176,  177,  196,  142,  143,  144,  161,  178,
      162,  224,  179,  163,  164,  242,  244,  165,  166,  167,
      168,  169,  225,  226,  227,  170,  171,  243,  172,  184,
      173,  228,  185,  186,  196,  719,  615,  547,  161,  187,

      162,  224,  508,  163,  164,  460,  244,  165,  166,  167,
      168,  169,  225,  226,  227,  170,  171,  194,  172,  184,
      173,  228,  185,  186,  198,  198,  198,  198,   74,  187,
       75,   75,   75,   75,  215,  229,  245,  199,  253,  254,
      255,  216,  258,   76,  233,  230,  234,  217,  192,  235,
      188,  251,  259,  256,   80,  236,  260,  237,  252,  257,
      261,   79,  238,   68,  215,  229,  245,  199,  253,  254,
      255,  216,  258,   76,  233,  230,  234,  217,  246,  235,
      247,  251,  259,  256,  248,  236,  260,  237,  252,  257,
      261,  249,  238,  262,  264,  250,  266,  265,  267,  268,

      271,  272,  273,  275,  269,  270,  276,  263,  246,  284,
      247,  278,  285,  280,  248,  281,  279,  286,  277,  287,
       67,  249,  274,  262,  264,  250,  266,  265,  267,  268,
      271,  272,  273,  275,  269,  270,  276,  263,  282,  284,
      290,  278,  285,  280,  288,  281,  279,  286,  277,  287,
      283,  291,  274,  292,  289,  293,  295,  296,  297,  298,
      299,  300,  301,  302,  303,  294,  304,  307,  282,  308,
      290,  305,  306,  309,  288,  313,  314,  322,   66,   65,
      283,  291,  331,  292,  289,  293,  295,  296,  297,  298,
      299,  300,  301,  302,  303,  332,  304,  307,  323,  308,

      310,  305,  306,  309,  311,  313,  314,  322,  324,  326,
      312,   63,  331, 1204,  328,  333,  327,  334,  335,  325,
      336,  329,  330,   61,   61,  332,   59,  337,  323,   59,
      310,  342, 1204,  343,  311,  344,  345,  346,  324,  326,
      312,  315, 1204,  316,  328,  333,  327,  334,  335,  325,
      336,  329,  330,  317,  318,  338,  319,  337,  339,  320,
      347,  342,  321,  343,  351,  344,  345,  346,  348, 1204,
      358,  315,  340,  316,  363,  341,  349,  350, 1204,  352,
     1204,  364,  365,  317,  318,  338,  319,  359,  339,  320,
      347,  360,  321,  366,  351,  372,  373,  361,  348,  353,

      358,  354,  340,  362,  363,  341,  349,  350,  355,  352,
      356,  364,  365, 1204,  374,  357, 1204,  359, 1204, 1204,
     1204,  360, 1204,  366, 1204,  372,  373,  361, 1204,  353,
     1204,  354,  375,  362,  201,  201,  201,  201,  355,  376,
      356,  377,  367,  367,  374,  357,  368,  368,  368,  368,
      198,  198,  198,  198,  370,  370,  378,  379,  371,  371,
      371,  371,  375,  199,  380,  381,  382,  387,  383,  376,
      385,  377,  388,  389,  386,  390,  392,  397,  398,  399,
     1204,  400,  401,  384,  391, 1204,  378,  379, 1204,  402,
      403,  404,  405,  199,  380,  381,  382,  387,  383,  406,

      385,  407,  388,  389,  386,  390,  392,  397,  398,  399,
      393,  400,  401,  384,  391,  394,  395,  408,  396,  402,
      403,  404,  405,  410,  411,  412,  413,  414,  415,  406,
      416,  407,  417,  418,  419,  420,  409,  421,  422,  423,
      393,  424,  425,  426, 1204,  394,  395,  408,  396,  429,
      432,  433,  434,  410,  411,  412,  413,  414,  415,  430,
      416,  427,  417,  418,  419,  420,  409,  421,  422,  423,
      435,  424,  425,  426,  428,  436,  431,  437,  438,  429,
      432,  433,  434,  439,  440,  441,  443,  444,  445,  430,
      446,  427,  447,  448,  449,  442,  450,  451,  454,  452,

      435,  458,  459, 1204,  428,  436,  431,  437,  438,  453,
      461,  462,  463,  439,  440,  441,  443,  444,  445,  455,
      446,  464,  447,  448,  449,  442,  450,  451,  454,  452,
      465,  458,  459,  456,  466,  467,  468,  469,  470,  453,
      461,  462,  463,  471,  472,  457,  473,  474,  475,  455,
      477,  464,  478,  480,  481,  482,  483,  484,  488,  476,
      465,  489,  492,  456,  466,  467,  468,  469,  470,  493,
      485,  479,  486,  471,  472,  490,  473,  474,  475,  491,
      477,  487,  478,  480,  481,  482,  483,  484,  488,  476,
      494,  489,  492,  495,  496,  497,  498,  499,  500,  493,

      485,  479,  486,  501,  502,  490,  504,  505,  506,  491,
      507,  487,  509,  510,  511,  503,  512,  513,  514,  515,
      494,  518,  519,  495,  496,  497,  498,  499,  500,  516,
      520,  517,  521,  501,  502,  522,  504,  505,  506,  523,
      507,  524,  509,  510,  511,  525,  512,  513,  514,  515,
      526,  518,  519,  527,  528,  531,  532,  533,  529,  516,
      520,  517,  521,  530,  534,  522,  535,  536,  537,  523,
      538,  524,  542,  545,  543,  525,  539,  540,  544,  546,
      526, 1204, 1204,  527,  528,  531,  532,  533,  529,  548,
      541, 1204, 1204,  530,  534, 1204,  535,  536,  537,  549,

      538,  550,  542,  545,  543,  551,  539,  540,  544,  546,
      368,  368,  368,  368,  368,  368,  368,  368,  552,  548,
      541,  371,  371,  371,  371,  371,  371,  371,  371,  549,
      553,  550,  554,  555,  556,  551,  557,  558,  559,  560,
      561,  562,  563,  564,  567,  565,  568,  569,  552,  566,
      570,  571,  572,  573,  574, 1204,  580,  581, 1204,  582,
      553,  583,  554,  555,  556,  584,  557,  558,  559,  560,
      561,  562,  563,  564,  567,  565,  568,  569,  585,  566,
      570,  571,  572,  573,  574,  575,  580,  581,  576,  582,
      586,  583,  587,  588,  589,  584,  590,  591,  577,  592,

      578,  593,  594,  595,  579,  596,  597,  598,  585,  599,
      600,  601,  602,  603,  604,  575,  605,  606,  576,  607,
      586,  608,  587,  588,  589,  609,  590,  591,  577,  592,
      578,  593,  594,  595,  579,  596,  597,  598,  610,  599,
      600,  601,  602,  603,  604,  611,  605,  606,  612,  607,
      613,  608,  614,  616,  617,  609,  618,  619,  620,  621,
      622,  623,  624,  625,  627,  628,  629,  630,  610,  626,
      631,  632,  633,  634,  635,  611,  636,  637,  612,  638,
      613,  639,  614,  616,  617,  640,  618,  619,  620,  621,
      622,  623,  624,  625,  627,  628,  629,  630,  641,  626,

      631,  632,  633,  634,  635,  642,  636,  637,  643,  638,
      644,  639,  645,  646,  647,  640,  649,  650,  648,  651,
      652,  653,  654,  655,  656,  657,  658,  659,  641,  660,
      661,  662,  663,  664,  665,  642,  666,  667,  643,  668,
      644, 1204,  645,  646,  647,  671,  649,  650,  648,  651,
      652,  653,  654,  655,  656,  657,  658,  659,  672,  660,
      661,  662,  663,  664,  665,  669,  666,  667,  673,  668,
      674,  670,  675,  676,  677,  671,  678,  679,  680,  681,
      682,  683,  684,  685,  686,  687,  688,  689,  672,  690,
      691,  692,  693,  694,  695,  669,  696,  697,  673,  699,

      674,  670,  675,  676,  677,  700,  678,  679,  680,  681,
      682,  683,  684,  685,  686,  687,  688,  689,  701,  690,
      691,  692,  693,  694,  695,  702,  696,  697,  703,  699,
      704,  705,  706,  707,  708,  700,  709,  710,  711,  712,
      713,  714,  715,  716,  717,  718,  720,  721,  701,  722,
      723,  724,  725,  726,  727,  702,  728,  729,  703,  730,
      704,  705,  706,  707,  708,  732,  709,  710,  711,  712,
      713,  714,  715,  716,  717,  718,  720,  721,  733,  722,
      723,  724,  725,  726,  727,  734,  728,  729,  735,  730,
      736,  737,  738,  739,  740,  732,  744,  745,  746,  747,

      748,  749,  750,  751,  752,  753,  754,  755,  733,  756,
      757,  758,  759,  760,  761,  734,  762,  763,  735,  764,
      736,  737,  738,  739,  740,  765,  744,  745,  746,  747,
      748,  749,  750,  751,  752,  753,  754,  755,  766,  756,
      757,  758,  759,  760,  761,  767,  762,  763,  768,  764,
      769,  770,  771,  772,  773,  765,  774,  775,  776,  777,
      778,  779,  780,  781,  782,  783,  784,  785,  766,  786,
      787,  788,  789,  790,  791,  767,  792,  793,  768,  794,
      769,  770,  771,  772,  773,  795,  774,  775,  776,  777,
      778,  779,  780,  781,  782,  783,  784,  785,  796,  786,

      787,  788,  789,  790,  791,  797,  792,  793,  798,  794,
      799,  800,  801,  802,  805,  795,  806,  807,  803,  808,
      809,  810,  804,  811,  812,  813,  814,  815,  796,  816,
      817,  818,  819,  820,  821,  797,  822,  823,  798,  824,
      799,  800,  801,  802,  805,  825,  806,  807,  803,  808,
      809,  810,  804,  811,  812,  813,  814,  815,  826,  816,
      817,  818,  819,  820,  821,  828,  822,  823,  830,  824,
      831,  832,  833,  834,  835,  825,  836,  837,  838,  839,
      840,  841,  842,  843,  844,  845,  846,  847,  826,  848,
      849,  850,  851,  852,  853,  828,  854,  855,  830,  856,

      831,  832,  833,  834,  835,  857,  836,  837,  838,  839,
      840,  841,  842,  843,  844,  845,  846,  847,  858,  848,
      849,  850,  851,  852,  853,  859,  854,  855,  860,  856,
      861,  862,  863,  864,  868,  857,  865,  869,  870,  871,
      872,  873,  874,  875,  876,  877,  878,  879,  858,  880,
      866,  881,  882,  883,  884,  859,  885,  886,  860,  887,
      861,  862,  863,  864,  868,  888,  865,  869,  870,  871,
      872,  873,  874,  875,  876,  877,  878,  879,  889,  880,
      866,  881,  882,  883,  884,  890,  885,  886,  891,  887,
      892,  893,  894,  895,  896,  888,  897,  898,  899,  900,

      901,  902,  903,  904,  907,  908,  909,  910,  889,  911,
      912,  913,  914,  915,  916,  890,  917,  918,  891,  919,
      892,  893,  894,  895,  896,  920,  897,  898,  899,  900,
      901,  902,  903,  904,  907,  908,  909,  910,  921,  911,
      912,  913,  914,  915,  916,  922,  917,  918,  923,  919,
      924,  925,  926,  927,  929,  920,  930,  931,  932,  933,
      934,  935,  936,  937,  938,  939,  940,  941,  921,  942,
      943,  944,  945,  946,  947,  922,  948,  949,  923,  950,
      924,  925,  926,  927,  929,  951,  930,  931,  932,  933,
      934,  935,  936,  937,  938,  939,  940,  941,  952,  942,

      943,  944,  945,  946,  947,  953,  948,  949,  954,  950,
      955,  956,  957,  958,  959,  951,  960,  961,  962,  963,
      964,  965,  966,  967,  969,  970,  971,  972,  952,  973,
      974,  975,  976,  977,  978,  953,  979,  980,  954,  981,
      955,  956,  957,  958,  959,  982,  960,  961,  962,  963,
      964,  965,  966,  967,  969,  970,  971,  972,  983,  973,
      974,  975,  976,  977,  978,  984,  979,  980,  985,  981,
      986,  987,  989,  990,  991,  982,  992,  993,  994,  995,
      998,  999, 1000,  996, 1001, 1002, 1003, 1005,  983, 1006,
     1007, 1008, 1009, 1010, 1011,  984, 1012, 1013,  985, 1014,

      986,  987,  989,  990,  991,  997,  992,  993,  994,  995,
      998,  999, 1000, 1015, 1001, 1002, 1003, 1005, 1016, 1006,
     1007, 1008, 1009, 1010, 1011, 1017, 1012, 1013, 1018, 1014,
     1019, 1020, 1021, 1022, 1023,  997, 1024, 1025, 1026, 1027,
     1028, 1029, 1030, 1015, 1031, 1032, 1033, 1034, 1016, 1035,
     1036, 1037, 1038, 1039, 1040, 1017, 1041, 1042, 1018, 1043,
     1019, 1020, 1021, 1022, 1023, 1044, 1024, 1025, 1026, 1027,
     1028, 1029, 1030, 1045, 1031, 1032, 1033, 1034, 1046, 1035,
     1036, 1037, 1038, 1039, 1040, 1047, 1041, 1042, 1048, 1043,
     1049, 1050, 1051, 1052, 1053, 1044, 1054, 1055, 1057, 1059,

     1060, 1061, 1063, 1045, 1064, 1065, 1066, 1067, 1046, 1069,
     1070, 1062, 1071, 1072, 1073, 1047, 1074, 1075, 1048, 1076,
     1049, 1050, 1051, 1052, 1053, 1077, 1054, 1055, 1057, 1059,
     1060, 1061, 1063, 1078, 1064, 1065, 1066, 1067, 1079, 1069,
     1070, 1062, 1071, 1072, 1073, 1080, 1074, 1075, 1081, 1076,
     1082, 1083, 1084, 1085, 1086, 1077, 1088, 1089, 1090, 1091,
     1092, 1094, 1095, 1078, 1096, 1097, 1098, 1099, 1079, 1100,
     1101, 1102, 1103, 1104, 1105, 1080, 1106, 1107, 1081, 1108,
     1082, 1083, 1084, 1085, 1086, 1109, 1088, 1089, 1090, 1091,
     1092, 1094, 1095, 1110, 1096, 1097, 1098, 1099, 1111, 1100,

     1101, 1102, 1103, 1104, 1105, 1112, 1106, 1107, 1113, 1108,
     1114, 1115, 1116, 1117, 1118, 1109, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1110, 1126, 1127, 1128, 1129, 1111, 1130,
     1131, 1132, 1133, 1134, 1135, 1112, 1136, 1137, 1113, 1138,
     1114, 1115, 1116, 1117, 1118, 1139, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1140, 1126, 1127, 1128, 1129, 1141, 1130,
     1131, 1132, 1133, 1134, 1135, 1142, 1136, 1137, 1143, 1138,
     1144, 1145, 1146, 1147, 1148, 1139, 1149, 1150, 1151, 1152,
     1153, 1155, 1156, 1140, 1157, 1158, 1159, 1160, 1141, 1161,
     1162, 1163, 1164, 1165, 1166, 1142, 1167, 1168, 1143, 1169,

     1144, 1145, 1146, 1147, 1148, 1170, 1149, 1150, 1151, 1152,
     1153, 1155, 1156, 1171, 1157, 1158, 1159, 1160, 1172, 1161,
     1162, 1163, 1164, 1165, 1166, 1173, 1167, 1168, 1174, 1169,
     1175, 1176, 1177, 1178, 1179, 1170, 1180, 1181, 1182, 1184,
     1185, 1186, 1187, 1171, 1188, 1189, 1190, 1191, 1172, 1192,
     1193, 1194, 1195, 1196, 1197, 1173, 1199, 1200, 1174, 1201,
     1175, 1176, 1177, 1178, 1179, 1202, 1180, 1181, 1182, 1184,
     1185, 1186, 1187, 1203, 1188, 1189, 1190, 1191, 1204, 1192,
     1193, 1194, 1195, 1196, 1197, 1204, 1199, 1200, 1204, 1201,
     1204, 1204, 1204, 1204, 1204, 1202, 1204, 1204, 1204, 1204,

     1204, 1204, 1204, 1203,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   64, 1204,   64,
     1204,   64,   64,   64,   64,   64,   64,   64,   81,   81,
       82, 1204,   82,  191,  191,  191,  191, 1204,  191,  191,
      191,  191,  191,  191,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  195, 1204, 1204,  195,  195,  195,
      195,  195,  195,  195,  195,  197,  197,  197,  197,  197,
      197, 1204,  197,  197,  197,  197,  204, 1204,  204,  369,

      369,  369,  369,  369, 1204,  369,  369,  369,  369,  369,
        9, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204

    } ;

static const flex_int16_t yy_chk[2593] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   11,   11,   11,   12,   12,   12,   21,   22,   22,
       22,   22,   23,   37,   24,   21,   24,   24,   24,   24,

       25,   25,   23,   30,   31,   32,   39,   46,   31,   24,
       51,   30,   32,   30,   31,   30,   32,   31,   30,   32,
       56,   30,   32,   37,   31,   32,   62,   62,   62,  200,
      200,  200,  200,   30,   31,   32,   39,   46,   31,   24,
       51,   30,   32,   30,   31,   30,   32,   31,   30,   32,
     1197,   30,   32,   33,   31,   32,   34,   33,   34,   36,
       40,   33,   34,   80,   40,   83,   36,   33,   34,   86,
       33,   87,   36,   33,  547,   80,   84, 1180,  547, 1142,
       56,  598,  598,   33,   84, 1067,   34,   33,   34,   36,
       40,   33,   34,   80,   40,   83,   36,   33,   34,   86,

       33,   87,   36,   33,   35,   80,   84,   38,   35,   38,
       38,   50,   35,   50,   84,   35,   50,   38,   35,   41,
       88,   35,   38,   41,   35,   76,   76,   41,   91,   76,
       76,   76,   76,   41,   35, 1057,   92,   38,   35,   38,
       38,   50,   35,   50,   94,   35,   50,   38,   35,   41,
       88,   35,   38,   41,   35, 1026,   42,   41,   91,   96,
       42, 1013, 1011,   41,   42,   44,   92,  941,   45,   89,
       42,  921,   45,   44,   94,   44,   45,   44,   99,   45,
       44,   44,   89,   47,  898,   45,   42,   47,  843,   96,
       42,   47,   95,   85,   42,   44,   95,   47,   45,   89,

       42,   43,   45,   44,  100,   44,   45,   44,   99,   45,
       44,   44,   89,   47,   85,   45,   43,   47,   43,  102,
       43,   47,   95,   85,  811,   49,   95,   47,  103,   49,
       43,  104,   49,   49,  100,   43,   43,   43,  810,   49,
      753,  706,   49,  703,   85,  105,   43,  597,   43,  102,
       43,   71,   71,   71,   71,   49,  584,  106,  103,   49,
       43,  104,   49,   49,   71,   43,   43,   43,   48,   49,
       48,   97,   49,   48,   48,  105,  107,   48,   48,   48,
       48,   48,   97,   97,   97,   48,   48,  106,   48,   52,
       48,   97,   52,   52,   71,  571,  447,  369,   48,   52,

       48,   97,  330,   48,   48,  287,  107,   48,   48,   48,
       48,   48,   97,   97,   97,   48,   48,   64,   48,   52,
       48,   97,   52,   52,   74,   74,   74,   74,   75,   52,
       75,   75,   75,   75,   90,   98,  108,   74,  111,  112,
      113,   90,  115,   75,  101,   98,  101,   90,   59,  101,
       55,  110,  116,  114,   29,  101,  117,  101,  110,  114,
      118,   27,  101,   20,   90,   98,  108,   74,  111,  112,
      113,   90,  115,   75,  101,   98,  101,   90,  109,  101,
      109,  110,  116,  114,  109,  101,  117,  101,  110,  114,
      118,  109,  101,  119,  120,  109,  121,  120,  123,  124,

      125,  126,  127,  128,  124,  124,  129,  119,  109,  133,
      109,  130,  134,  131,  109,  131,  130,  134,  129,  135,
       19,  109,  127,  119,  120,  109,  121,  120,  123,  124,
      125,  126,  127,  128,  124,  124,  129,  119,  132,  133,
      138,  130,  134,  131,  136,  131,  130,  134,  129,  135,
      132,  139,  127,  140,  136,  141,  142,  143,  143,  144,
      145,  146,  147,  148,  149,  141,  150,  152,  132,  153,
      138,  151,  151,  154,  136,  156,  157,  159,   17,   16,
      132,  139,  163,  140,  136,  141,  142,  143,  143,  144,
      145,  146,  147,  148,  149,  164,  150,  152,  160,  153,

      155,  151,  151,  154,  155,  156,  157,  159,  160,  161,
      155,   13,  163,    9,  162,  165,  161,  166,  167,  160,
      168,  162,  162,    8,    7,  164,    6,  169,  160,    5,
      155,  171,    0,  172,  155,  173,  174,  175,  160,  161,
      155,  158,    0,  158,  162,  165,  161,  166,  167,  160,
      168,  162,  162,  158,  158,  170,  158,  169,  170,  158,
      176,  171,  158,  172,  178,  173,  174,  175,  177,    0,
      181,  158,  170,  158,  184,  170,  177,  177,    0,  179,
        0,  185,  186,  158,  158,  170,  158,  182,  170,  158,
      176,  182,  158,  187,  178,  202,  203,  183,  177,  179,

      181,  180,  170,  183,  184,  170,  177,  177,  180,  179,
      180,  185,  186,    0,  207,  180,    0,  182,    0,    0,
        0,  182,    0,  187,    0,  202,  203,  183,    0,  179,
        0,  180,  210,  183,  201,  201,  201,  201,  180,  213,
      180,  214,  196,  196,  207,  180,  196,  196,  196,  196,
      198,  198,  198,  198,  199,  199,  215,  216,  199,  199,
      199,  199,  210,  198,  218,  219,  220,  222,  220,  213,
      221,  214,  223,  224,  221,  225,  226,  228,  229,  230,
        0,  231,  232,  220,  225,    0,  215,  216,    0,  233,
      234,  235,  236,  198,  218,  219,  220,  222,  220,  237,

      221,  238,  223,  224,  221,  225,  226,  228,  229,  230,
      227,  231,  232,  220,  225,  227,  227,  239,  227,  233,
      234,  235,  236,  240,  241,  242,  243,  245,  246,  237,
      247,  238,  248,  249,  250,  251,  239,  252,  253,  254,
      227,  255,  256,  257,    0,  227,  227,  239,  227,  259,
      261,  262,  263,  240,  241,  242,  243,  245,  246,  260,
      247,  258,  248,  249,  250,  251,  239,  252,  253,  254,
      264,  255,  256,  257,  258,  265,  260,  266,  267,  259,
      261,  262,  263,  268,  269,  270,  271,  272,  273,  260,
      275,  258,  277,  278,  279,  270,  280,  281,  283,  282,

      264,  285,  286,    0,  258,  265,  260,  266,  267,  282,
      288,  289,  290,  268,  269,  270,  271,  272,  273,  284,
      275,  291,  277,  278,  279,  270,  280,  281,  283,  282,
      292,  285,  286,  284,  294,  295,  296,  297,  298,  282,
      288,  289,  290,  299,  300,  284,  301,  302,  303,  284,
      304,  291,  305,  306,  307,  308,  309,  310,  312,  303,
      292,  313,  315,  284,  294,  295,  296,  297,  298,  316,
      310,  305,  311,  299,  300,  314,  301,  302,  303,  314,
      304,  311,  305,  306,  307,  308,  309,  310,  312,  303,
      317,  313,  315,  318,  319,  320,  321,  322,  323,  316,

      310,  305,  311,  324,  325,  314,  326,  327,  328,  314,
      329,  311,  331,  332,  333,  325,  334,  335,  336,  337,
      317,  339,  340,  318,  319,  320,  321,  322,  323,  338,
      341,  338,  343,  324,  325,  344,  326,  327,  328,  345,
      329,  346,  331,  332,  333,  347,  334,  335,  336,  337,
      348,  339,  340,  349,  350,  353,  354,  355,  352,  338,
      341,  338,  343,  352,  356,  344,  357,  358,  360,  345,
      361,  346,  363,  365,  364,  347,  362,  362,  364,  366,
      348,    0,    0,  349,  350,  353,  354,  355,  352,  372,
      362,    0,    0,  352,  356,    0,  357,  358,  360,  373,

      361,  374,  363,  365,  364,  375,  362,  362,  364,  366,
      367,  367,  367,  367,  368,  368,  368,  368,  376,  372,
      362,  370,  370,  370,  370,  371,  371,  371,  371,  373,
      377,  374,  378,  379,  381,  375,  382,  385,  386,  387,
      388,  389,  390,  391,  393,  392,  394,  395,  376,  392,
      396,  397,  398,  399,  400,    0,  402,  403,    0,  404,
      377,  405,  378,  379,  381,  406,  382,  385,  386,  387,
      388,  389,  390,  391,  393,  392,  394,  395,  407,  392,
      396,  397,  398,  399,  400,  401,  402,  403,  401,  404,
      408,  405,  409,  410,  414,  406,  415,  416,  401,  417,

      401,  418,  419,  420,  401,  422,  423,  424,  407,  425,
      426,  428,  430,  431,  432,  401,  433,  434,  401,  436,
      408,  437,  409,  410,  414,  438,  415,  416,  401,  417,
      401,  418,  419,  420,  401,  422,  423,  424,  439,  425,
      426,  428,  430,  431,  432,  440,  433,  434,  441,  436,
      443,  437,  445,  448,  451,  438,  452,  453,  455,  456,
      457,  458,  459,  460,  461,  462,  463,  464,  439,  460,
      466,  467,  468,  469,  470,  440,  471,  473,  441,  473,
      443,  474,  445,  448,  451,  475,  452,  453,  455,  456,
      457,  458,  459,  460,  461,  462,  463,  464,  476,  460,

      466,  467,  468,  469,  470,  478,  471,  473,  479,  473,
      480,  474,  481,  482,  484,  475,  485,  486,  484,  487,
      488,  489,  490,  493,  494,  495,  496,  497,  476,  498,
      499,  500,  501,  503,  504,  478,  505,  506,  479,  507,
      480,    0,  481,  482,  484,  510,  485,  486,  484,  487,
      488,  489,  490,  493,  494,  495,  496,  497,  511,  498,
      499,  500,  501,  503,  504,  508,  505,  506,  512,  507,
      513,  508,  515,  516,  517,  510,  518,  519,  520,  521,
      522,  523,  527,  528,  529,  530,  532,  533,  511,  534,
      535,  536,  537,  538,  539,  508,  540,  544,  512,  548,

      513,  508,  515,  516,  517,  549,  518,  519,  520,  521,
      522,  523,  527,  528,  529,  530,  532,  533,  553,  534,
      535,  536,  537,  538,  539,  554,  540,  544,  555,  548,
      556,  557,  558,  559,  560,  549,  561,  562,  563,  564,
      565,  566,  567,  568,  569,  570,  572,  574,  553,  575,
      576,  577,  578,  579,  580,  554,  581,  582,  555,  583,
      556,  557,  558,  559,  560,  585,  561,  562,  563,  564,
      565,  566,  567,  568,  569,  570,  572,  574,  586,  575,
      576,  577,  578,  579,  580,  587,  581,  582,  588,  583,
      590,  591,  592,  593,  594,  585,  599,  600,  601,  602,

      603,  604,  606,  607,  608,  609,  611,  612,  586,  613,
      614,  615,  616,  619,  620,  587,  621,  622,  588,  623,
      590,  591,  592,  593,  594,  625,  599,  600,  601,  602,
      603,  604,  606,  607,  608,  609,  611,  612,  626,  613,
      614,  615,  616,  619,  620,  627,  621,  622,  629,  623,
      631,  633,  634,  635,  636,  625,  637,  638,  641,  642,
      643,  644,  645,  647,  648,  649,  650,  651,  626,  652,
      655,  656,  657,  658,  659,  627,  660,  662,  629,  663,
      631,  633,  634,  635,  636,  664,  637,  638,  641,  642,
      643,  644,  645,  647,  648,  649,  650,  651,  665,  652,

      655,  656,  657,  658,  659,  667,  660,  662,  668,  663,
      669,  670,  671,  673,  674,  664,  675,  677,  673,  678,
      679,  681,  673,  682,  683,  684,  685,  686,  665,  687,
      688,  690,  691,  692,  694,  667,  695,  696,  668,  699,
      669,  670,  671,  673,  674,  700,  675,  677,  673,  678,
      679,  681,  673,  682,  683,  684,  685,  686,  701,  687,
      688,  690,  691,  692,  694,  705,  695,  696,  707,  699,
      708,  709,  710,  711,  712,  700,  713,  715,  716,  717,
      718,  719,  720,  721,  722,  723,  724,  725,  701,  726,
      727,  728,  729,  730,  731,  705,  732,  733,  707,  734,

      708,  709,  710,  711,  712,  737,  713,  715,  716,  717,
      718,  719,  720,  721,  722,  723,  724,  725,  739,  726,
      727,  728,  729,  730,  731,  740,  732,  733,  741,  734,
      744,  747,  748,  750,  754,  737,  752,  755,  757,  758,
      759,  762,  763,  765,  766,  767,  768,  769,  739,  771,
      752,  772,  774,  777,  778,  740,  779,  780,  741,  781,
      744,  747,  748,  750,  754,  782,  752,  755,  757,  758,
      759,  762,  763,  765,  766,  767,  768,  769,  783,  771,
      752,  772,  774,  777,  778,  784,  779,  780,  785,  781,
      786,  787,  790,  791,  794,  782,  795,  798,  799,  800,

      802,  803,  804,  805,  813,  814,  815,  816,  783,  817,
      818,  819,  822,  823,  824,  784,  825,  827,  785,  829,
      786,  787,  790,  791,  794,  830,  795,  798,  799,  800,
      802,  803,  804,  805,  813,  814,  815,  816,  831,  817,
      818,  819,  822,  823,  824,  833,  825,  827,  837,  829,
      838,  839,  841,  842,  845,  830,  846,  847,  848,  849,
      853,  854,  856,  859,  860,  861,  863,  864,  831,  865,
      866,  867,  868,  869,  870,  833,  871,  873,  837,  874,
      838,  839,  841,  842,  845,  875,  846,  847,  848,  849,
      853,  854,  856,  859,  860,  861,  863,  864,  876,  865,

      866,  867,  868,  869,  870,  877,  871,  873,  879,  874,
      881,  882,  883,  884,  885,  875,  887,  888,  891,  892,
      893,  895,  896,  897,  899,  900,  901,  902,  876,  903,
      904,  905,  906,  906,  907,  877,  909,  910,  879,  911,
      881,  882,  883,  884,  885,  914,  887,  888,  891,  892,
      893,  895,  896,  897,  899,  900,  901,  902,  915,  903,
      904,  905,  906,  906,  907,  917,  909,  910,  918,  911,
      919,  920,  923,  924,  925,  914,  926,  927,  928,  928,
      933,  934,  937,  932,  938,  939,  940,  942,  915,  944,
      946,  947,  948,  949,  950,  917,  951,  952,  918,  953,

      919,  920,  923,  924,  925,  932,  926,  927,  928,  928,
      933,  934,  937,  954,  938,  939,  940,  942,  957,  944,
      946,  947,  948,  949,  950,  958,  951,  952,  960,  953,
      961,  962,  963,  964,  967,  932,  968,  969,  970,  971,
      973,  975,  976,  954,  977,  978,  980,  981,  957,  982,
      983,  985,  986,  988,  989,  958,  990,  993,  960,  994,
      961,  962,  963,  964,  967,  995,  968,  969,  970,  971,
      973,  975,  976,  997,  977,  978,  980,  981,  998,  982,
      983,  985,  986,  988,  989,  999,  990,  993, 1000,  994,
     1001, 1003, 1004, 1005, 1006,  995, 1009, 1010, 1012, 1014,

     1015, 1016, 1020,  997, 1021, 1023, 1024, 1025,  998, 1027,
     1028, 1016, 1029, 1030, 1031,  999, 1033, 1036, 1000, 1037,
     1001, 1003, 1004, 1005, 1006, 1039, 1009, 1010, 1012, 1014,
     1015, 1016, 1020, 1043, 1021, 1023, 1024, 1025, 1044, 1027,
     1028, 1016, 1029, 1030, 1031, 1045, 1033, 1036, 1048, 1037,
     1049, 1051, 1053, 1055, 1056, 1039, 1058, 1060, 1061, 1064,
     1066, 1068, 1069, 1043, 1071, 1072, 1073, 1074, 1044, 1075,
     1076, 1077, 1078, 1079, 1080, 1045, 1081, 1084, 1048, 1085,
     1049, 1051, 1053, 1055, 1056, 1086, 1058, 1060, 1061, 1064,
     1066, 1068, 1069, 1087, 1071, 1072, 1073, 1074, 1088, 1075,

     1076, 1077, 1078, 1079, 1080, 1089, 1081, 1084, 1090, 1085,
     1092, 1093, 1094, 1095, 1096, 1086, 1100, 1101, 1103, 1105,
     1106, 1107, 1109, 1087, 1110, 1111, 1112, 1113, 1088, 1115,
     1116, 1117, 1118, 1120, 1121, 1089, 1122, 1123, 1090, 1124,
     1092, 1093, 1094, 1095, 1096, 1125, 1100, 1101, 1103, 1105,
     1106, 1107, 1109, 1126, 1110, 1111, 1112, 1113, 1127, 1115,
     1116, 1117, 1118, 1120, 1121, 1128, 1122, 1123, 1129, 1124,
     1130, 1131, 1133, 1134, 1135, 1125, 1137, 1138, 1139, 1140,
     1141, 1143, 1144, 1126, 1145, 1148, 1149, 1150, 1127, 1151,
     1152, 1153, 1154, 1155, 1156, 1128, 1157, 1158, 1129, 1160,

     1130, 1131, 1133, 1134, 1135, 1161, 1137, 1138, 1139, 1140,
     1141, 1143, 1144, 1162, 1145, 1148, 1149, 1150, 1163, 1151,
     1152, 1153, 1154, 1155, 1156, 1164, 1157, 1158, 1166, 1160,
     1167, 1169, 1171, 1173, 1174, 1161, 1176, 1177, 1178, 1181,
     1182, 1183, 1184, 1162, 1186, 1188, 1189, 1190, 1163, 1191,
     1192, 1193, 1194, 1195, 1196, 1164, 1198, 1199, 1166, 1200,
     1167, 1169, 1171, 1173, 1174, 1201, 1176, 1177, 1178, 1181,
     1182, 1183, 1184, 1202, 1186, 1188, 1189, 1190,    0, 1191,
     1192, 1193, 1194, 1195, 1196,    0, 1198, 1199,    0, 1200,
        0,    0,    0,    0,    0, 1201,    0,    0,    0,    0,

        0,    0,    0, 1202, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1208,    0, 1208,
        0, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209, 1209,
     1210,    0, 1210, 1211, 1211, 1211, 1211,    0, 1211, 1211,
     1211, 1211, 1211, 1211, 1212, 1212, 1212, 1212, 1212, 1212,
     1212, 1212, 1212, 1212, 1213,    0,    0, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1214, 1214, 1214, 1214, 1214,
     1214,    0, 1214, 1214, 1214, 1214, 1215,    0, 1215, 1216,

     1216, 1216, 1216, 1216,    0, 1216, 1216, 1216, 1216, 1216,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./sqlparser.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "./sqlparser.l"

#include "node.h"
#include "sqlparser_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#line 1452 "sqlparser_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1465 "sqlparser_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 99 "./sqlparser.l"

#line 1752 "sqlparser_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1205 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1204 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 100 "./sqlparser.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 101 "./sqlparser.l"
{ return ALTER; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 102 "./sqlparser.l"
{ return AND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 103 "./sqlparser.l"
{ return ANY; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 104 "./sqlparser.l"
{ return ALL; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 105 "./sqlparser.l"
{ return AS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 106 "./sqlparser.l"
{ return ASC; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 107 "./sqlparser.l"
{ return BEGI; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 108 "./sqlparser.l"
{ return BETWEEN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 109 "./sqlparser.l"
{ return BIGINT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 110 "./sqlparser.l"
{ return BINARY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 111 "./sqlparser.l"
{ return BOTH; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "./sqlparser.l"
{ return BROWSE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "./sqlparser.l"
{ return BY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 114 "./sqlparser.l"
{ return CASCADE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 115 "./sqlparser.l"
{ return CASE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 116 "./sqlparser.l"
{ return CHARACTER; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 117 "./sqlparser.l"
{ return CLUSTER; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 118 "./sqlparser.l"
{ return COLUMN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 119 "./sqlparser.l"
{ return COLUMNS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 120 "./sqlparser.l"
{ return COMMIT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 121 "./sqlparser.l"
{ return CONSISTENT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 122 "./sqlparser.l"
{ return CREATE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 123 "./sqlparser.l"
{ return CREATETIME; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 124 "./sqlparser.l"
{ return CROSS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 125 "./sqlparser.l"
{ return CURRENT_USER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 126 "./sqlparser.l"
{ return DATE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 127 "./sqlparser.l"
{ return DATETIME; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 128 "./sqlparser.l"
{ return DEALLOCATE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 129 "./sqlparser.l"
{ return DECIMAL; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 130 "./sqlparser.l"
{ return DEFAULT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 131 "./sqlparser.l"
{ return DELETE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 132 "./sqlparser.l"
{ return DESC; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 133 "./sqlparser.l"
{ return DESCRIBE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 134 "./sqlparser.l"
{ return DISTINCT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 135 "./sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 136 "./sqlparser.l"
{ return DROP; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 137 "./sqlparser.l"
{ return DUAL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 138 "./sqlparser.l"
{ return ELSE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 139 "./sqlparser.l"
{ return END; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 140 "./sqlparser.l"
{ return ERROR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 141 "./sqlparser.l"
{ return EXCEPT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 142 "./sqlparser.l"
{ return EXECUTE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 143 "./sqlparser.l"
{ return EXISTS; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 144 "./sqlparser.l"
{ return EXPLAIN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 145 "./sqlparser.l"
{ return FETCH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 146 "./sqlparser.l"
{ return FIRST; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "./sqlparser.l"
{ return NEXT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "./sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "./sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 150 "./sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 151 "./sqlparser.l"
{ return FOR; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 152 "./sqlparser.l"
{ return FROM; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 153 "./sqlparser.l"
{ return FULL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 154 "./sqlparser.l"
{ return GRANT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 155 "./sqlparser.l"
{ return GROUP; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 156 "./sqlparser.l"
{ return GLOBAL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 157 "./sqlparser.l"
{ return HASH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 158 "./sqlparser.l"
{ return HAVING; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 159 "./sqlparser.l"
{ return IDENTIFIED; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 160 "./sqlparser.l"
{ return IF; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 161 "./sqlparser.l"
{ return IN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 162 "./sqlparser.l"
{ return INNER; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 163 "./sqlparser.l"
{ return INTERSECT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 164 "./sqlparser.l"
{ return INSERT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 165 "./sqlparser.l"
{ return INTO; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 166 "./sqlparser.l"
{ return IS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 167 "./sqlparser.l"
{ return JOIN; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "./sqlparser.l"
{ return KEY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 169 "./sqlparser.l"
{ return LEADING; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "./sqlparser.l"
{ return LEFT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "./sqlparser.l"
{ return LIMIT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 172 "./sqlparser.l"
{ return LIKE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 173 "./sqlparser.l"
{ return LOCAL; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "./sqlparser.l"
{ return LOCKED; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 175 "./sqlparser.l"
{ return LOOP; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 176 "./sqlparser.l"
{ return MEMORY; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 177 "./sqlparser.l"
{ return MERGE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "./sqlparser.l"
{ return MOD; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "./sqlparser.l"
{ return MODIFYTIME; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "./sqlparser.l"
{ return NATURAL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "./sqlparser.l"
{ return NOT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "./sqlparser.l"
{ return NUMERIC; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "./sqlparser.l"
{ return OFFSET; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "./sqlparser.l"
{ return ON; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "./sqlparser.l"
{ return ONLY; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "./sqlparser.l"
{ return OPTION; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "./sqlparser.l"
{ return OR; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "./sqlparser.l"
{ return ORDER; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "./sqlparser.l"
{ return OUTER; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 190 "./sqlparser.l"
{ return COMMENT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 191 "./sqlparser.l"
{ return PARAMETERS; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 192 "./sqlparser.l"
{ return PASSWORD; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 193 "./sqlparser.l"
{ return PRECISION; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 194 "./sqlparser.l"
{ return PREPARE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 195 "./sqlparser.l"
{ return PRIMARY; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 196 "./sqlparser.l"
{ return REAL; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 197 "./sqlparser.l"
{ return REMOTE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 198 "./sqlparser.l"
{ return RENAME; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 199 "./sqlparser.l"
{ return REPLACE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 200 "./sqlparser.l"
{ return RESTRICT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 201 "./sqlparser.l"
{ return REVOKE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 202 "./sqlparser.l"
{ return RIGHT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 203 "./sqlparser.l"
{ return ROLLBACK; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 204 "./sqlparser.l"
{ return ROW; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 205 "./sqlparser.l"
{ return ROWS; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 206 "./sqlparser.l"
{ return PRIVILEGES; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 207 "./sqlparser.l"
{ return SELECT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 208 "./sqlparser.l"
{ return SCHEMA; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 209 "./sqlparser.l"
{ return PROCESSLIST; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 210 "./sqlparser.l"
{ return SCOPE; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 211 "./sqlparser.l"
{ return SESSION; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 212 "./sqlparser.l"
{ return SET; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 213 "./sqlparser.l"
{ return SHOW; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 214 "./sqlparser.l"
{ return SMALLINT; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 215 "./sqlparser.l"
{ return SNAPSHOT; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 216 "./sqlparser.l"
{ return SPFILE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 217 "./sqlparser.l"
{ return START; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 218 "./sqlparser.l"
{ return STATIC; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 219 "./sqlparser.l"
{ return WEAK;   }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 220 "./sqlparser.l"
{ return STRONG; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 221 "./sqlparser.l"
{ return SYSTEM; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 222 "./sqlparser.l"
{ return TABLE; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 223 "./sqlparser.l"
{ return TABLES; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 224 "./sqlparser.l"
{ return THEN; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 225 "./sqlparser.l"
{ return TIME; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 226 "./sqlparser.l"
{ return TIMESTAMP; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 227 "./sqlparser.l"
{ return TINYINT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 228 "./sqlparser.l"
{ return TO; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 229 "./sqlparser.l"
{ return TRAILING; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 230 "./sqlparser.l"
{ return TRANSACTION; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 231 "./sqlparser.l"
{ return UNION; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 232 "./sqlparser.l"
{ return UPDATE; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 233 "./sqlparser.l"
{ return USING; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 234 "./sqlparser.l"
{ return VALUES; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 235 "./sqlparser.l"
{ return VARBINARY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 236 "./sqlparser.l"
{ return VARCHAR; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 237 "./sqlparser.l"
{ return WHERE; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 238 "./sqlparser.l"
{ return WHEN; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 239 "./sqlparser.l"
{ return WITH; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 240 "./sqlparser.l"
{ return WORK; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 241 "./sqlparser.l"
{ return KILL; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 242 "./sqlparser.l"
{ return QUERY; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 243 "./sqlparser.l"
{ return CONNECTION; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 244 "./sqlparser.l"
{ return FROZEN;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 245 "./sqlparser.l"
{ return GLOBAL_ALIAS; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 246 "./sqlparser.l"
{ return SESSION_ALIAS; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 247 "./sqlparser.l"
{ return CHANGE_OBI; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 248 "./sqlparser.l"
{ return SWITCH_CLUSTER; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 249 "./sqlparser.l"
{ return SET_MASTER_CLUSTER; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 250 "./sqlparser.l"
{ return SET_SLAVE_CLUSTER;  }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 251 "./sqlparser.l"
{ return SLAVE;  }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 252 "./sqlparser.l"
{ return FORCE;  }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 253 "./sqlparser.l"
{ return TOP; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 254 "./sqlparser.l"
{ return PERCENT; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 255 "./sqlparser.l"
{ return TIES; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 256 "./sqlparser.l"
{ return FAST; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 257 "./sqlparser.l"
{ return DISABLE; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 258 "./sqlparser.l"
{ return EXTERNALPUSHDOWN; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 259 "./sqlparser.l"
{ return IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 260 "./sqlparser.l"
{ return KEEP; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 261 "./sqlparser.l"
{ return PLAN; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 262 "./sqlparser.l"
{ return KEEPFIXED; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 263 "./sqlparser.l"
{ return MAX_GRANT_PERCENT; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 264 "./sqlparser.l"
{ return MIN_GRANT_PERCENT; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 265 "./sqlparser.l"
{ return MAXDOP; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 266 "./sqlparser.l"
{ return MAXRECURSION; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 267 "./sqlparser.l"
{ return NO_PERFORMANCE_SPOOL; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 268 "./sqlparser.l"
{ return PARAMETERIZATION; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 269 "./sqlparser.l"
{ return SIMPLE; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 270 "./sqlparser.l"
{ return FORCED; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 271 "./sqlparser.l"
{ return RECOMPILE; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 272 "./sqlparser.l"
{ return ROBUST; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 273 "./sqlparser.l"
{ return CHECKSUM; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 274 "./sqlparser.l"
{ return BINARY_CHECKSUM; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 275 "./sqlparser.l"
{ return RANK; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 276 "./sqlparser.l"
{ return DENSE_RANK; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 277 "./sqlparser.l"
{ return ROW_NUMBER; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 278 "./sqlparser.l"
{ return NTILE; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 279 "./sqlparser.l"
{ return PARTITION; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 280 "./sqlparser.l"
{ return RANGE; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 281 "./sqlparser.l"
{ return UNBOUNDED; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 282 "./sqlparser.l"
{ return PRECEDING; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 283 "./sqlparser.l"
{ return CURRENT; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 284 "./sqlparser.l"
{ return FOLLOWING; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 285 "./sqlparser.l"
{ return OVER; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 286 "./sqlparser.l"
{ return VARP; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 287 "./sqlparser.l"
{ return VAR; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 288 "./sqlparser.l"
{ return SUM; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 289 "./sqlparser.l"
{ return STDEVP; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 290 "./sqlparser.l"
{ return STDEV; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 291 "./sqlparser.l"
{ return MIN; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 292 "./sqlparser.l"
{ return MAX; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 293 "./sqlparser.l"
{ return LEAD; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 294 "./sqlparser.l"
{ return LAST_VALUE; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 295 "./sqlparser.l"
{ return LAG; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 296 "./sqlparser.l"
{ return GROUPING_ID; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 297 "./sqlparser.l"
{ return GROUPING; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 298 "./sqlparser.l"
{ return FIRST_VALUE; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 299 "./sqlparser.l"
{ return COUNT_BIG; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 300 "./sqlparser.l"
{ return COUNT; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 301 "./sqlparser.l"
{ return CHECKSUM_AGG; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 302 "./sqlparser.l"
{ return AVG; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 303 "./sqlparser.l"
{ return SYSTEM_USER; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 304 "./sqlparser.l"
{ return STUFF; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 305 "./sqlparser.l"
{ return SESSION_USER; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 306 "./sqlparser.l"
{ return NULLIF; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 307 "./sqlparser.l"
{ return MIN_ACTIVE_ROWVERSION; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 308 "./sqlparser.l"
{ return ISNULL; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 309 "./sqlparser.l"
{ return IDENTITY; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 310 "./sqlparser.l"
{ return GETUTCDATE; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 311 "./sqlparser.l"
{ return GETDATE; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 312 "./sqlparser.l"
{ return DATEPART; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 313 "./sqlparser.l"
{ return DATENAME; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 314 "./sqlparser.l"
{ return DATEDIFF; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 315 "./sqlparser.l"
{ return DATEADD; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 316 "./sqlparser.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 317 "./sqlparser.l"
{ return CONVERT; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 318 "./sqlparser.l"
{ return COALESCE; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 319 "./sqlparser.l"
{ return CAST; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 320 "./sqlparser.l"
{ return BIT; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 321 "./sqlparser.l"
{ return CHAR; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 322 "./sqlparser.l"
{ return DATETIME2; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 323 "./sqlparser.l"
{ return DATETIMEOFFSET; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 324 "./sqlparser.l"
{ return INT; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 325 "./sqlparser.l"
{ return MONEY; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 326 "./sqlparser.l"
{ return NCHAR; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 327 "./sqlparser.l"
{ return NVARCHAR; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 328 "./sqlparser.l"
{ return SMALLDATETIME; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 329 "./sqlparser.l"
{ return SMALLMONEY; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 330 "./sqlparser.l"
{ return TEXT; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 331 "./sqlparser.l"
{ return COLLATE; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 332 "./sqlparser.l"
{ return APPLY; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 333 "./sqlparser.l"
{ return SYSTEM_TIME; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 334 "./sqlparser.l"
{ return OF; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 335 "./sqlparser.l"
{ return CONTAINED; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 336 "./sqlparser.l"
{ return PIVOT; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 337 "./sqlparser.l"
{ return UNPIVOT; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 338 "./sqlparser.l"
{ return OUTPUT; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 339 "./sqlparser.l"
{ return DELETED; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 340 "./sqlparser.l"
{ return INSERTED; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 341 "./sqlparser.l"
{ return OPTIMIZE; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 342 "./sqlparser.l"
{ return SOME; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 343 "./sqlparser.l"
{ return USE; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 345 "./sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return NULLX;
}
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 350 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return INTNUM;
}
	YY_BREAK
case 247:
#line 358 "./sqlparser.l"
case 248:
#line 359 "./sqlparser.l"
case 249:
YY_RULE_SETUP
#line 359 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 250:
#line 367 "./sqlparser.l"
case 251:
YY_RULE_SETUP
#line 367 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 374 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return BOOL;
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 381 "./sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return UNKNOWN;
}
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 386 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return BOOL;
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 393 "./sqlparser.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 399 "./sqlparser.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "N'";
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 405 "./sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 409 "./sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 413 "./sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return STRING;
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 422 "./sqlparser.l"
{
    BEGIN(sb);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '[';
}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 428 "./sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 432 "./sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << ']';
    std::string text = ((ParseResult*)yyextra)->buf_.str();
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, text.c_str());
    nd->terminalToken_.str = text.substr(1, text.length() - 2);
    yylval->node = nd;
    return NAME;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 442 "./sqlparser.l"
{
  fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return ERROR;
}
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 447 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = std::string(yytext+1, yytext + strlen(yytext) - 1);
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return NAME;
}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 456 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_TEMP_VARIABLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = yytext + 1;    // skip '@'
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return TEMP_VARIABLE;
}
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 465 "./sqlparser.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return NAME;
}
	YY_BREAK
case 266:
/* rule 266 can match eol */
YY_RULE_SETUP
#line 474 "./sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 267:
/* rule 267 can match eol */
YY_RULE_SETUP
#line 475 "./sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 477 "./sqlparser.l"
{ return yytext[0];}
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 479 "./sqlparser.l"
{ return CNNOP; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 480 "./sqlparser.l"
{ return COMP_EQ; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 481 "./sqlparser.l"
{ return COMP_GE; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 482 "./sqlparser.l"
{ return COMP_GT; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 483 "./sqlparser.l"
{ return COMP_LE; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 484 "./sqlparser.l"
{ return COMP_LT; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 485 "./sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 486 "./sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 488 "./sqlparser.l"
{ return ASSIGN_ADD; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 489 "./sqlparser.l"
{ return ASSGIN_MINUS; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 490 "./sqlparser.l"
{ return ASSIGN_MUL; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 491 "./sqlparser.l"
{ return ASSIGN_DIV; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 492 "./sqlparser.l"
{ return ASSIGN_REM; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 493 "./sqlparser.l"
{ return ASSIGN_BITWISE_AND; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 494 "./sqlparser.l"
{ return ASSIGN_BITWISE_OR; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 495 "./sqlparser.l"
{ return ASSIGN_BITWISE_XOR; }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 497 "./sqlparser.l"

	YY_BREAK
case 286:
YY_RULE_SETUP
#line 499 "./sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
case YY_STATE_EOF(sb):
#line 506 "./sqlparser.l"
{ return END_P; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 508 "./sqlparser.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return ERROR;
}
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 512 "./sqlparser.l"
ECHO;
	YY_BREAK
#line 3345 "sqlparser_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1205 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1205 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1204);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 512 "./sqlparser.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

