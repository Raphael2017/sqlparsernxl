#line 2 "sqlparser_sql2003_flex.cpp"

#line 4 "sqlparser_sql2003_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define sql2003__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sql2003__create_buffer
#endif

#ifdef yy_delete_buffer
#define sql2003__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sql2003__delete_buffer
#endif

#ifdef yy_scan_buffer
#define sql2003__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sql2003__scan_buffer
#endif

#ifdef yy_scan_string
#define sql2003__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sql2003__scan_string
#endif

#ifdef yy_scan_bytes
#define sql2003__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sql2003__scan_bytes
#endif

#ifdef yy_init_buffer
#define sql2003__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sql2003__init_buffer
#endif

#ifdef yy_flush_buffer
#define sql2003__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sql2003__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sql2003__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sql2003__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sql2003__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sql2003__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define sql2003_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state sql2003_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define sql2003_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state sql2003_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define sql2003_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack sql2003_ensure_buffer_stack
#endif

#ifdef yylex
#define sql2003_lex_ALREADY_DEFINED
#else
#define yylex sql2003_lex
#endif

#ifdef yyrestart
#define sql2003_restart_ALREADY_DEFINED
#else
#define yyrestart sql2003_restart
#endif

#ifdef yylex_init
#define sql2003_lex_init_ALREADY_DEFINED
#else
#define yylex_init sql2003_lex_init
#endif

#ifdef yylex_init_extra
#define sql2003_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra sql2003_lex_init_extra
#endif

#ifdef yylex_destroy
#define sql2003_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy sql2003_lex_destroy
#endif

#ifdef yyget_debug
#define sql2003_get_debug_ALREADY_DEFINED
#else
#define yyget_debug sql2003_get_debug
#endif

#ifdef yyset_debug
#define sql2003_set_debug_ALREADY_DEFINED
#else
#define yyset_debug sql2003_set_debug
#endif

#ifdef yyget_extra
#define sql2003_get_extra_ALREADY_DEFINED
#else
#define yyget_extra sql2003_get_extra
#endif

#ifdef yyset_extra
#define sql2003_set_extra_ALREADY_DEFINED
#else
#define yyset_extra sql2003_set_extra
#endif

#ifdef yyget_in
#define sql2003_get_in_ALREADY_DEFINED
#else
#define yyget_in sql2003_get_in
#endif

#ifdef yyset_in
#define sql2003_set_in_ALREADY_DEFINED
#else
#define yyset_in sql2003_set_in
#endif

#ifdef yyget_out
#define sql2003_get_out_ALREADY_DEFINED
#else
#define yyget_out sql2003_get_out
#endif

#ifdef yyset_out
#define sql2003_set_out_ALREADY_DEFINED
#else
#define yyset_out sql2003_set_out
#endif

#ifdef yyget_leng
#define sql2003_get_leng_ALREADY_DEFINED
#else
#define yyget_leng sql2003_get_leng
#endif

#ifdef yyget_text
#define sql2003_get_text_ALREADY_DEFINED
#else
#define yyget_text sql2003_get_text
#endif

#ifdef yyget_lineno
#define sql2003_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno sql2003_get_lineno
#endif

#ifdef yyset_lineno
#define sql2003_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno sql2003_set_lineno
#endif

#ifdef yyget_column
#define sql2003_get_column_ALREADY_DEFINED
#else
#define yyget_column sql2003_get_column
#endif

#ifdef yyset_column
#define sql2003_set_column_ALREADY_DEFINED
#else
#define yyset_column sql2003_set_column
#endif

#ifdef yywrap
#define sql2003_wrap_ALREADY_DEFINED
#else
#define yywrap sql2003_wrap
#endif

#ifdef yyget_lval
#define sql2003_get_lval_ALREADY_DEFINED
#else
#define yyget_lval sql2003_get_lval
#endif

#ifdef yyset_lval
#define sql2003_set_lval_ALREADY_DEFINED
#else
#define yyset_lval sql2003_set_lval
#endif

#ifdef yyget_lloc
#define sql2003_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc sql2003_get_lloc
#endif

#ifdef yyset_lloc
#define sql2003_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc sql2003_set_lloc
#endif

#ifdef yyalloc
#define sql2003_alloc_ALREADY_DEFINED
#else
#define yyalloc sql2003_alloc
#endif

#ifdef yyrealloc
#define sql2003_realloc_ALREADY_DEFINED
#else
#define yyrealloc sql2003_realloc
#endif

#ifdef yyfree
#define sql2003_free_ALREADY_DEFINED
#else
#define yyfree sql2003_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define sql2003_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 179
#define YY_END_OF_BUFFER 180
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[644] =
    {   0,
      176,  176,    0,    0,  157,  157,  161,  161,  180,  178,
      166,  166,  167,  178,  165,  167,  154,  167,  167,  167,
      145,  145,  173,  169,  171,  177,  164,  164,  164,  164,
      164,  164,   53,  164,  164,  164,   68,  164,   72,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  159,  167,  179,  157,  158,  161,  162,  166,  175,
        0,    0,  165,  165,  150,    0,  149,  145,    0,    0,
      172,  174,  170,  164,  164,  164,  164,    5,  164,  164,
      164,  164,  164,   13,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,

      164,  164,  164,  164,  164,  164,   58,   66,  164,  164,
      164,  164,  164,  164,  164,  164,  155,  164,  164,   83,
      164,  164,  164,   89,   90,   92,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  127,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  168,  157,  156,  161,  160,
      163,    0,    0,  149,    0,    0,  146,  144,    1,    2,
        3,  164,    6,    7,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,   32,   33,  164,  164,  164,  164,  164,  164,

      164,   42,  164,  164,  164,  164,  164,  164,   50,  164,
      164,  164,  164,  164,  164,  164,   61,  164,  164,  164,
      164,   73,   74,   76,  164,  164,  164,  164,  164,   84,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  106,  164,  108,  164,  164,
      164,  164,  115,  164,  164,  164,  121,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,    0,  148,    0,    0,  147,  164,  164,
      164,  164,   11,  164,   14,   15,   16,   19,  164,  164,
      164,  164,  164,  164,  164,  164,  164,   31,  164,  164,

      164,  164,   38,  164,  164,   41,  164,  164,  164,  164,
      164,  164,  164,  164,   51,   52,  164,  164,   57,  164,
      164,  164,   65,   67,  164,   70,   71,  164,  164,  164,
      164,  164,  164,  164,  143,  164,  164,  164,   91,  164,
      164,  164,   96,  164,  164,  164,  164,  102,  103,  104,
      164,  164,  109,  164,  164,  164,  164,  164,  116,  164,
      118,  164,  164,  123,  124,  125,  151,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  137,  164,  139,  141,
      142,    0,    4,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,   25,   26,  164,  164,  164,  164,  164,

      164,  164,  164,   43,  164,  164,  164,  164,  153,   48,
      164,   54,  164,   59,  164,  164,  164,   69,  164,   77,
      164,  164,  164,   81,   82,  164,  164,  164,  164,   93,
      164,   95,  164,  164,  164,  164,  101,  164,  107,  164,
      111,  164,  164,  164,  164,  164,  164,  164,  164,  129,
      164,  164,  131,  164,  164,  164,  164,  164,  138,  164,
      165,  164,    9,   10,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,   36,  164,  164,   40,   44,
       45,  164,   47,  164,  164,   56,   60,  164,  164,  164,
       75,  164,  164,  164,   85,  164,   87,   88,   94,  164,

      164,  164,  164,  164,  164,  112,  113,  164,  164,  164,
      164,  164,  164,  164,  130,  132,  164,  164,  164,  164,
      164,    8,   12,  164,  164,  164,   22,   23,  164,  164,
       28,   34,   35,  164,  164,   46,  164,  164,   62,  164,
      164,  164,  164,   80,   86,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  164,  164,  152,  133,  134,
      135,  164,  140,  164,   20,  164,  164,  164,  164,  164,
       39,  164,   55,  164,   64,   78,   79,  164,  164,  164,
      164,  164,  164,  164,  117,  164,  164,  164,  164,  164,
      136,   17,  164,  164,   27,  164,  164,  164,   49,   63,

       97,  164,   99,  100,  105,  164,  164,  164,  164,  164,
      126,  128,   18,   21,  164,  164,  164,   37,  164,  110,
      164,  119,  164,  164,  164,  164,  164,  164,  164,  120,
      122,  164,  164,   30,   98,  114,   24,  164,  164,  164,
      164,   29,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    8,    8,    9,    8,
        8,   10,   11,    8,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    1,    8,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,    8,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   37,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,   76,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    5,
        6,    1,    1,    5,    7,    7,    1,    1,    1,    1,
        7,    7,    7,    7,    7,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    1,    9,   10,    8,
        7,    7,    7,    7,    7,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    1
    } ;

static const flex_int16_t yy_base[655] =
    {   0,
        0,    0,    0,    0,  604,  557,  514,  504,  547, 1366,
       75,   78,  490,  497,    0, 1366, 1366,  483,   68,  421,
       72,   76,   75, 1366,  335, 1366,   66,   77,  131,   89,
      126,  146,   48,   78,  107,   55,    0,  181,  174,  196,
      245,  197,    0,  225,  294,  265,  187,   74,  121,   71,
       82, 1366,  275, 1366,    0,  329,    0,  256,  153, 1366,
      250,  237,    0,    0,  247,    0,  266,  295,  258,    0,
     1366, 1366, 1366,    0,   91,  138,   97,  115,  134,  145,
      231,  139,  142,    0,  161,  206,  210,  348,  224,  293,
      259,  339,  238,  237,  257,  268,  290,  317,  286,  301,

      323,  302,  312,  310,  310,  313,  357,    0,  329,  339,
      353,  353,  343,  359,  370,  366, 1366,  360,  385,  368,
      387,  375,  371,    0,  390,  403,  402,  392,  408,  398,
      400,  414,  407,  425,  415,  401,  410,  445,  432,  423,
      434,  426,  423,  439,  441,    0,  429,  471,  455,  451,
      473,  457,  447,  469,  458, 1366,    0, 1366,    0, 1366,
      232,  513,    0,  502,  522,  226,  326,    0,    0,    0,
        0,  480,    0,    0,  454,  477,  494,  497,  489,  514,
      503,  520,  511,  519,  514,  506,  512,  518,  516,  531,
      520,  534,    0,  531,  540,  537,  525,  542,  527,  546,

      546,  184,  554,  553,  541,  542,  567,  562,    0,  564,
      567,  561,  571,  565,  579,  581,  582,  577,  585,  574,
      591,    0,  578,    0,  580,  581,  594,  601,  590,    0,
      594,  603,  608,  613,  595,  619,  620,  626,  616,  617,
      636,  637,  634,  638,  626,    0,  643,  634,  640,  642,
      653,  641,  643,  653,  662,  664,    0,  653,  660,  658,
      673,  674,  668,  669,  671,  689,  678,  673,  696,  687,
      692,  678,  698,  439,  715,  220,  721,  723,  682,  707,
      710,  709,    0,  723,    0,    0,  731,    0,  730,  178,
      736,  733,  734,  721,  724,  174,  739,    0,  732,  726,

      728,  744,    0,  742,  740,    0,  737,  739,  741,  738,
      740,  756,  743,  749,    0,    0,  750,  757,    0,  755,
      760,  777,    0,    0,  775,    0,    0,  766,  782,  784,
      782,  781,  782,  801,  795,  788,  805,  791,    0,  794,
      795,  798,    0,  800,  812,  813,  814,    0,    0,    0,
      803,  805,    0,  812,  825,  817,  829,  827,    0,  825,
        0,  838,  839,    0,    0,  827,    0,  830,  839,  840,
      837,  851,  854,  855,  855,  849,    0,  864,  855,    0,
        0,   93,    0,  866,  856,  852,  871,  875,  862,  861,
      864,  869,  871,    0,    0,  875,  877,  891,  884,  893,

      170,  889,  899,    0,  902,  892,  910,  898,    0,    0,
      895,  906,  913,    0,  903,  919,  908,    0,  920,    0,
      910,  917,  931,    0,    0,  929,  927,  918,  920,    0,
      921,    0,  922,  929,  944,  932,    0,  934,    0,  936,
        0,  945,  940,  948,  955,  948,  959,  954,  961,    0,
      954,  976,    0,  964,  983,  971,  972,  987,    0,  969,
     1366,  977,    0,    0,  978,  975,  993,  983,  993,  980,
      985,  995,  987,  996,  990,    0,  995, 1013,    0,    0,
        0, 1015,    0, 1014, 1011,    0,    0, 1012, 1027, 1032,
        0, 1030, 1036, 1028,    0, 1038,    0,    0,    0, 1034,

     1025, 1038, 1039, 1040, 1038,    0,    0, 1038, 1040,  136,
      126, 1055, 1053, 1044,    0,    0, 1042, 1054, 1048, 1053,
     1048,    0,    0, 1064, 1067, 1066,    0,    0, 1061, 1061,
      123,    0,    0, 1082, 1065,    0, 1076, 1085,    0, 1090,
     1083, 1078, 1088,    0,    0, 1086,   71, 1089, 1089, 1085,
     1106,   69, 1090, 1096, 1090, 1103, 1112,    0,    0,    0,
        0, 1102,    0, 1103,    0, 1104, 1105, 1106, 1108, 1118,
        0, 1128,    0, 1117,    0,    0,    0, 1127, 1125, 1138,
     1137, 1147, 1149, 1135,    0, 1144, 1159, 1144, 1145, 1160,
        0, 1148, 1149, 1165,    0, 1161, 1154, 1163,    0,    0,

        0, 1175,    0,    0,    0, 1160, 1160, 1164, 1170, 1181,
        0,    0,    0,    0, 1178, 1175, 1188,    0, 1181,    0,
     1193,    0, 1185, 1185, 1191, 1204, 1193, 1201, 1196,    0,
        0, 1208, 1200,    0,    0,    0,    0, 1200, 1220, 1209,
     1208,    0, 1366, 1274, 1284, 1294, 1304, 1314, 1318, 1326,
     1336, 1345,  104, 1355
    } ;

static const flex_int16_t yy_def[655] =
    {   0,
      643,    1,  644,  644,  645,  645,  646,  646,  643,  643,
      643,  643,  643,  647,  648,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  643,  643,  643,  650,  643,  651,  643,  643,  643,
      647,  643,  648,  648,  643,  652,  643,  643,  643,  653,
      643,  643,  643,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  643,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  643,  650,  643,  651,  643,
      643,  643,  654,  643,  643,  643,  643,  653,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  643,  643,  654,  643,  643,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  643,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      643,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,

      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  649,  649,  649,
      649,  649,    0,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643
    } ;

static const flex_int16_t yy_nxt[1443] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   16,
       16,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   43,   50,   51,   52,   10,   10,   43,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   44,   45,   46,   47,
       48,   49,   43,   50,   51,   53,   59,   59,   59,   59,
       59,   59,   65,   65,   67,  104,   68,   68,   67,  109,
       68,   68,   71,   72,  151,  154,   69,   75,  105,   76,

       69,   80,  382,   77,   78,   81,  461,   79,   82,   91,
      168,   83,  106,   92,  104,   70,  155,   93,  584,  109,
      579,   84,  169,   94,  151,  154,   69,   75,  105,   76,
       69,   80,   77,   78,  172,   81,   79,  173,   82,   91,
      107,   83,  106,   92,   70,  108,  155,   93,  152,  153,
       84,   85,  169,   94,   59,   59,   59,   95,   86,   96,
      174,  170,   87,  172,   97,   88,   99,  173,   89,   98,
      107,   90,  569,  178,  108,  555,  179,  100,  152,  153,
      101,   85,  171,  102,  175,  554,  103,   95,   86,   96,
      174,  170,   87,   97,  113,   88,   99,   89,   98,  180,

       90,  110,  114,  178,  117,  111,  179,  100,  115,  112,
      101,  171,  102,  175,  116,  103,  118,  130,  119,  477,
      148,  131,  149,  396,  113,  150,  181,  390,  180,  382,
      120,  110,  114,  307,  132,  111,  121,   61,  115,  112,
      167,  167,   61,  116,  182,  133,  118,  130,  119,  134,
      148,  131,  149,  135,  150,  161,  181,  176,  189,  136,
      120,   65,   65,  132,  177,  121,  122,  123,  166,  166,
      124,  162,  167,  167,  182,  133,  199,  200,  125,  134,
      164,  164,  126,  135,  127,  128,  129,  176,  189,  136,
      165,  202,  144,  145,  177,  201,  122,  123,  192,  146,

      124,  162,  147,  193,  160,  199,  200,   67,  125,   68,
       68,  126,  203,  127,  128,  129,  137,  206,  138,   69,
      165,  202,  144,  145,  201,  190,  139,  192,  140,  146,
      191,  147,  193,  141,  142,  207,  210,  158,  143,  204,
      167,  167,  203,  211,  212,  205,  137,  206,  138,   69,
      156,  213,   73,  214,  208,  190,  139,  218,  140,  191,
      209,  194,  141,  142,  195,  207,  210,  143,  183,  204,
      196,  184,  197,  211,  212,  205,  219,  198,  220,  185,
      213,  186,  214,  221,  208,  187,  222,  218,  188,  209,
      215,  194,  223,  224,  195,  216,  217,  226,  183,  227,

      196,  184,  197,  225,  233,  219,  198,  230,  220,  185,
      234,  186,  228,  221,  187,  222,  229,  188,  231,  232,
      215,  235,  223,  224,  216,  217,  236,  226,  227,  237,
       66,  238,  239,  225,  233,  240,  230,  241,  242,  234,
      243,  247,  228,  248,  249,  244,  229,  245,  231,  232,
      246,  235,  254,  275,  275,  255,  236,  256,  257,  237,
      238,  258,  239,  259,  240,  260,  241,  250,  242,  262,
      243,  247,  248,  261,  249,  244,  251,  245,  266,  267,
      246,  270,  254,  252,  253,  255,  271,  256,  257,  272,
      258,  273,  263,  259,   64,  260,  280,  250,  262,  264,

      279,  265,   62,  261,  268,  281,  251,   60,  266,  267,
      269,  270,  252,  253,  282,  271,  164,  164,  283,  272,
      284,  273,  263,  274,  274,  280,  165,  275,  275,  264,
      279,  265,  277,  277,  268,  281,  278,  278,  285,  269,
      287,  288,  289,  290,  282,  291,  643,  292,  283,  293,
      284,  294,   58,  286,  295,  296,  165,  297,  298,  299,
      300,  301,   58,  302,  303,   56,  304,  305,  285,  287,
      306,  288,  289,  290,  308,  291,  292,  309,  293,  311,
      312,  294,  286,  295,  310,  296,  297,  313,  298,  299,
      300,  301,  302,  314,  303,  304,  315,  305,  316,  318,

      306,  317,  319,  320,  308,  321,  322,  309,  311,  312,
      324,  325,   56,  326,  310,  327,  323,  313,  328,  329,
      330,  333,  331,  314,  334,  335,  315,  336,  316,  318,
      317,  319,  337,  320,  332,  321,  322,  338,  643,  339,
      324,  325,  326,  340,  341,  327,  323,  328,  329,  330,
      342,  333,  331,  343,  334,  335,  344,  336,  345,  346,
      347,  349,  337,  332,  348,  643,  351,  338,  339,  350,
      352,  643,  353,  340,  341,  355,  356,  357,  643,  358,
      342,  359,  343,  354,  360,  344,  361,  362,  345,  346,
      347,  349,  363,  364,  348,  351,  365,  366,  367,  350,

      352,  353,  368,  369,  370,  355,  356,  357,  358,  371,
      359,  372,  643,  373,  360,  380,  361,  362,  374,  379,
      377,  363,  381,  364,  378,  365,  383,  366,  367,  275,
      275,  384,  368,  369,  370,  278,  278,  278,  278,  371,
      375,  372,  373,  385,  380,  376,  386,  387,  374,  379,
      377,  388,  381,  378,  389,  383,  391,  392,  393,  643,
      394,  384,  395,  397,  398,  643,  399,  400,  401,  375,
      402,  403,  404,  385,  405,  386,  406,  387,  407,  408,
      409,  388,  410,  411,  389,  412,  391,  392,  393,  394,
      413,  395,  414,  397,  398,  399,  400,  415,  401,  418,

      402,  403,  404,  416,  405,  419,  406,  407,  408,  420,
      409,  410,  421,  411,  417,  412,  422,  643,  423,  424,
      413,  414,  425,  426,  643,  427,  415,  428,  433,  418,
      429,  430,  431,  416,  419,  432,  434,  435,  437,  420,
      438,  436,  421,  417,  439,  440,  422,  423,  424,  441,
      442,  443,  425,  426,  427,  444,  445,  428,  433,  429,
      430,  431,  446,  447,  432,  448,  434,  435,  437,  438,
      449,  436,  450,  439,  451,  440,  452,  453,  454,  441,
      442,  443,  455,  456,  457,  444,  445,  458,  459,  460,
      462,  465,  446,  447,  448,  463,  464,  466,  472,  449,

      467,  468,  450,  469,  451,  452,  470,  453,  454,  471,
      473,  474,  455,  456,  457,  475,  458,  476,  459,  460,
      462,  465,  478,  479,  463,  464,  480,  466,  472,  467,
      468,  481,  469,  482,  485,  470,  483,  484,  471,  486,
      473,  474,  487,  488,  491,  475,  489,  476,  492,  490,
      493,  494,  478,  479,  495,  496,  480,  497,  498,  499,
      481,  500,  501,  482,  485,  483,  484,  502,  506,  486,
      503,  487,  504,  488,  491,  489,  505,  492,  490,  507,
      493,  494,  508,  509,  495,  496,  497,  498,  499,  510,
      500,  511,  501,  512,  513,  643,  514,  502,  506,  503,

      515,  504,  516,  517,  518,  505,  519,  520,  507,  521,
      522,  523,  508,  509,  524,  525,  526,  527,  510,  528,
      529,  511,  512,  530,  513,  514,  531,  532,  643,  533,
      515,  516,  534,  517,  518,  535,  519,  520,  521,  536,
      522,  523,  537,  524,  538,  525,  526,  527,  528,  539,
      529,  540,  541,  530,  542,  531,  543,  532,  533,  544,
      545,  534,  546,  643,  547,  535,  548,  549,  550,  536,
      551,  552,  537,  553,  538,  556,  557,  558,  539,  559,
      560,  540,  541,  561,  542,  562,  543,  563,  564,  544,
      545,  565,  546,  547,  566,  567,  548,  549,  550,  568,

      551,  552,  570,  553,  571,  556,  557,  558,  559,  572,
      560,  573,  574,  561,  575,  562,  563,  576,  564,  577,
      578,  565,  580,  581,  566,  567,  582,  583,  568,  585,
      588,  586,  570,  571,  587,  589,  590,  591,  594,  572,
      592,  573,  574,  593,  575,  595,  576,  596,  597,  577,
      578,  598,  580,  581,  599,  582,  600,  583,  585,  588,
      601,  586,  602,  587,  603,  589,  590,  591,  594,  592,
      604,  605,  593,  606,  595,  607,  596,  597,  608,  609,
      611,  598,  610,  612,  599,  600,  613,  614,  615,  616,
      601,  602,  617,  618,  603,  619,  643,  620,  621,  622,

      604,  605,  623,  606,  607,  624,  625,  626,  608,  609,
      611,  610,  627,  612,  628,  613,  614,  629,  615,  616,
      630,  617,  631,  618,  632,  619,  620,  621,  633,  622,
      634,  635,  623,  636,  637,  624,  625,  626,  638,  639,
      640,  641,  627,  642,  628,  643,  643,  629,  643,  643,
      630,  631,  643,  643,  632,  643,  643,  643,  633,  634,
      643,  635,  636,  643,  637,  643,  643,  638,  639,  643,
      640,  641,  643,  642,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   61,  643,   61,   61,   61,   61,
       61,   61,  643,   61,   63,  643,  643,   63,   63,   63,
       63,   63,   63,   63,   74,   74,  157,  157,  157,  643,
      157,  157,  157,  157,  157,  157,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  163,  163,  163,  163,  163,
      643,  163,  163,  163,  163,  276,  276,  276,  276,  643,
      276,  276,  276,  276,  276,    9,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643
    } ;

static const flex_int16_t yy_chk[1443] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   11,   11,   11,   12,
       12,   12,   19,   19,   21,   33,   21,   21,   22,   36,
       22,   22,   23,   23,   48,   50,   21,   27,   34,   27,

       22,   28,  382,   27,   27,   28,  382,   27,   28,   30,
      653,   28,   34,   30,   33,   21,   51,   30,  552,   36,
      547,   28,   75,   30,   48,   50,   21,   27,   34,   27,
       22,   28,   27,   27,   77,   28,   27,   78,   28,   30,
       35,   28,   34,   30,   21,   35,   51,   30,   49,   49,
       28,   29,   75,   30,   59,   59,   59,   31,   29,   31,
       79,   76,   29,   77,   31,   29,   32,   78,   29,   31,
       35,   29,  531,   82,   35,  511,   83,   32,   49,   49,
       32,   29,   76,   32,   80,  510,   32,   31,   29,   31,
       79,   76,   29,   31,   39,   29,   32,   29,   31,   85,

       29,   38,   39,   82,   40,   38,   83,   32,   39,   38,
       32,   76,   32,   80,   39,   32,   40,   42,   40,  401,
       47,   42,   47,  296,   39,   47,   86,  290,   85,  276,
       40,   38,   39,  202,   42,   38,   40,  161,   39,   38,
      166,  166,   62,   39,   87,   44,   40,   42,   40,   44,
       47,   42,   47,   44,   47,   61,   86,   81,   89,   44,
       40,   65,   65,   42,   81,   40,   41,   41,   69,   69,
       41,   65,   69,   69,   87,   44,   93,   94,   41,   44,
       67,   67,   41,   44,   41,   41,   41,   81,   89,   44,
       67,   96,   46,   46,   81,   95,   41,   41,   91,   46,

       41,   65,   46,   91,   58,   93,   94,   68,   41,   68,
       68,   41,   97,   41,   41,   41,   45,   99,   45,   68,
       67,   96,   46,   46,   95,   90,   45,   91,   45,   46,
       90,   46,   91,   45,   45,  100,  102,   56,   45,   98,
      167,  167,   97,  103,  104,   98,   45,   99,   45,   68,
       53,  105,   25,  106,  101,   90,   45,  109,   45,   90,
      101,   92,   45,   45,   92,  100,  102,   45,   88,   98,
       92,   88,   92,  103,  104,   98,  110,   92,  111,   88,
      105,   88,  106,  112,  101,   88,  113,  109,   88,  101,
      107,   92,  114,  115,   92,  107,  107,  116,   88,  118,

       92,   88,   92,  115,  122,  110,   92,  120,  111,   88,
      123,   88,  119,  112,   88,  113,  119,   88,  121,  121,
      107,  125,  114,  115,  107,  107,  126,  116,  118,  127,
       20,  128,  129,  115,  122,  130,  120,  131,  132,  123,
      133,  135,  119,  136,  137,  134,  119,  134,  121,  121,
      134,  125,  139,  274,  274,  140,  126,  141,  142,  127,
      128,  143,  129,  144,  130,  145,  131,  138,  132,  147,
      133,  135,  136,  145,  137,  134,  138,  134,  149,  150,
      134,  152,  139,  138,  138,  140,  153,  141,  142,  154,
      143,  155,  148,  144,   18,  145,  175,  138,  147,  148,

      172,  148,   14,  145,  151,  176,  138,   13,  149,  150,
      151,  152,  138,  138,  177,  153,  164,  164,  178,  154,
      179,  155,  148,  162,  162,  175,  164,  162,  162,  148,
      172,  148,  165,  165,  151,  176,  165,  165,  180,  151,
      181,  182,  183,  184,  177,  185,    9,  186,  178,  187,
      179,  188,    8,  180,  189,  190,  164,  191,  192,  194,
      195,  196,    7,  197,  198,    6,  199,  200,  180,  181,
      201,  182,  183,  184,  203,  185,  186,  204,  187,  205,
      206,  188,  180,  189,  204,  190,  191,  207,  192,  194,
      195,  196,  197,  208,  198,  199,  210,  200,  211,  213,

      201,  212,  214,  215,  203,  216,  217,  204,  205,  206,
      218,  219,    5,  220,  204,  221,  217,  207,  223,  225,
      226,  228,  227,  208,  229,  231,  210,  232,  211,  213,
      212,  214,  233,  215,  227,  216,  217,  234,    0,  235,
      218,  219,  220,  236,  237,  221,  217,  223,  225,  226,
      238,  228,  227,  239,  229,  231,  240,  232,  241,  242,
      243,  244,  233,  227,  243,    0,  245,  234,  235,  244,
      247,    0,  248,  236,  237,  249,  250,  251,    0,  252,
      238,  253,  239,  248,  254,  240,  255,  256,  241,  242,
      243,  244,  258,  259,  243,  245,  260,  261,  262,  244,

      247,  248,  263,  264,  265,  249,  250,  251,  252,  266,
      253,  267,    0,  268,  254,  272,  255,  256,  269,  271,
      270,  258,  273,  259,  270,  260,  279,  261,  262,  275,
      275,  280,  263,  264,  265,  277,  277,  278,  278,  266,
      269,  267,  268,  281,  272,  269,  282,  284,  269,  271,
      270,  287,  273,  270,  289,  279,  291,  292,  293,    0,
      294,  280,  295,  297,  299,    0,  300,  301,  302,  269,
      304,  305,  307,  281,  308,  282,  309,  284,  310,  311,
      312,  287,  313,  314,  289,  317,  291,  292,  293,  294,
      318,  295,  320,  297,  299,  300,  301,  321,  302,  325,

      304,  305,  307,  322,  308,  328,  309,  310,  311,  329,
      312,  313,  330,  314,  322,  317,  331,    0,  332,  333,
      318,  320,  334,  335,    0,  336,  321,  337,  344,  325,
      338,  340,  341,  322,  328,  342,  345,  346,  347,  329,
      351,  346,  330,  322,  352,  354,  331,  332,  333,  355,
      356,  357,  334,  335,  336,  358,  360,  337,  344,  338,
      340,  341,  362,  363,  342,  366,  345,  346,  347,  351,
      368,  346,  369,  352,  370,  354,  371,  372,  373,  355,
      356,  357,  374,  375,  376,  358,  360,  376,  378,  379,
      384,  387,  362,  363,  366,  385,  386,  388,  396,  368,

      389,  390,  369,  391,  370,  371,  392,  372,  373,  393,
      397,  398,  374,  375,  376,  399,  376,  400,  378,  379,
      384,  387,  402,  403,  385,  386,  405,  388,  396,  389,
      390,  406,  391,  407,  412,  392,  408,  411,  393,  413,
      397,  398,  415,  416,  419,  399,  417,  400,  421,  417,
      422,  423,  402,  403,  426,  427,  405,  428,  429,  431,
      406,  433,  434,  407,  412,  408,  411,  435,  442,  413,
      436,  415,  438,  416,  419,  417,  440,  421,  417,  443,
      422,  423,  444,  445,  426,  427,  428,  429,  431,  446,
      433,  447,  434,  448,  449,    0,  451,  435,  442,  436,

      452,  438,  454,  455,  456,  440,  457,  458,  443,  460,
      462,  465,  444,  445,  466,  467,  468,  469,  446,  470,
      471,  447,  448,  472,  449,  451,  473,  474,    0,  475,
      452,  454,  477,  455,  456,  478,  457,  458,  460,  482,
      462,  465,  484,  466,  485,  467,  468,  469,  470,  488,
      471,  489,  490,  472,  492,  473,  493,  474,  475,  494,
      496,  477,  500,    0,  501,  478,  502,  503,  504,  482,
      505,  508,  484,  509,  485,  512,  513,  514,  488,  517,
      518,  489,  490,  519,  492,  520,  493,  521,  524,  494,
      496,  525,  500,  501,  526,  529,  502,  503,  504,  530,

      505,  508,  534,  509,  535,  512,  513,  514,  517,  537,
      518,  538,  540,  519,  541,  520,  521,  542,  524,  543,
      546,  525,  548,  549,  526,  529,  550,  551,  530,  553,
      555,  554,  534,  535,  554,  556,  557,  562,  567,  537,
      564,  538,  540,  566,  541,  568,  542,  569,  569,  543,
      546,  570,  548,  549,  572,  550,  574,  551,  553,  555,
      578,  554,  579,  554,  580,  556,  557,  562,  567,  564,
      581,  582,  566,  583,  568,  584,  569,  569,  586,  587,
      589,  570,  588,  590,  572,  574,  592,  593,  594,  596,
      578,  579,  597,  598,  580,  602,    0,  606,  607,  608,

      581,  582,  609,  583,  584,  610,  615,  616,  586,  587,
      589,  588,  617,  590,  619,  592,  593,  621,  594,  596,
      623,  597,  624,  598,  625,  602,  606,  607,  626,  608,
      627,  628,  609,  629,  632,  610,  615,  616,  633,  638,
      639,  640,  617,  641,  619,    0,    0,  621,    0,    0,
      623,  624,    0,    0,  625,    0,    0,    0,  626,  627,
        0,  628,  629,    0,  632,    0,    0,  633,  638,    0,
      639,  640,    0,  641,  644,  644,  644,  644,  644,  644,
      644,  644,  644,  644,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  646,  646,  646,  646,  646,  646,

      646,  646,  646,  646,  647,    0,  647,  647,  647,  647,
      647,  647,    0,  647,  648,    0,    0,  648,  648,  648,
      648,  648,  648,  648,  649,  649,  650,  650,  650,    0,
      650,  650,  650,  650,  650,  650,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  652,  652,  652,  652,  652,
        0,  652,  652,  652,  652,  654,  654,  654,  654,    0,
      654,  654,  654,  654,  654,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      643,  643
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./sqlparser_sql2003.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "./sqlparser_sql2003.l"

#include "node.h"
#include "sqlparser_sql2003_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#define TOKEN(name) { return SQL2003_##name; }
#define YYSTYPE         SQL2003_STYPE
#define YYLTYPE         SQL2003_LTYPE

#line 1225 "sqlparser_sql2003_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1238 "sqlparser_sql2003_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 104 "./sqlparser_sql2003.l"

#line 1525 "sqlparser_sql2003_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 644 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 643 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 105 "./sqlparser_sql2003.l"
TOKEN(ALL)              /* SQL-2003-R */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 106 "./sqlparser_sql2003.l"
TOKEN(AND)              /* SQL-2003-R */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 107 "./sqlparser_sql2003.l"
TOKEN(ANY)              /* SQL-2003-R */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 108 "./sqlparser_sql2003.l"
TOKEN(ARRAY)            /* SQL-2003-R */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 109 "./sqlparser_sql2003.l"
TOKEN(AS)               /* SQL-2003-R */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 110 "./sqlparser_sql2003.l"
TOKEN(ASC)              /* SQL-2003-N */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 111 "./sqlparser_sql2003.l"
TOKEN(AVG)              /* SQL-2003-N */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 112 "./sqlparser_sql2003.l"
TOKEN(BETWEEN)          /* SQL-2003-R */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 113 "./sqlparser_sql2003.l"
TOKEN(BIGINT)           /* SQL-2003-R */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 114 "./sqlparser_sql2003.l"
TOKEN(BINARY)           /* SQL-2003-R */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 115 "./sqlparser_sql2003.l"
TOKEN(BLOB)             /* SQL-2003-R */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 116 "./sqlparser_sql2003.l"
TOKEN(BOOLEAN)          /* SQL-2003-R */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 117 "./sqlparser_sql2003.l"
TOKEN(BY)               /* SQL-2003-R */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 118 "./sqlparser_sql2003.l"
TOKEN(CASE)             /* SQL-2003-R */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 119 "./sqlparser_sql2003.l"
TOKEN(CAST)             /* SQL-2003-R */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 120 "./sqlparser_sql2003.l"
TOKEN(CHAR)             /* SQL-2003-R */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "./sqlparser_sql2003.l"
TOKEN(CHARACTER)        /* SQL-2003-R */
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 122 "./sqlparser_sql2003.l"
TOKEN(CHARACTERS)       /* SQL-2003-N */
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 123 "./sqlparser_sql2003.l"
TOKEN(CLOB)             /* SQL-2003-R */
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 124 "./sqlparser_sql2003.l"
TOKEN(COALESCE)         /* SQL-2003-N */
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 125 "./sqlparser_sql2003.l"
TOKEN(CODE_UNITS)       /* SQL-2003-N */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 126 "./sqlparser_sql2003.l"
TOKEN(COLLATE)          /* SQL-2003-R */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 127 "./sqlparser_sql2003.l"
TOKEN(CONVERT)          /* SQL-2003-N */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 128 "./sqlparser_sql2003.l"
TOKEN(CORRESPONDING)    /* SQL-2003-R */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 129 "./sqlparser_sql2003.l"
TOKEN(COUNT)            /* SQL-2003-N */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 130 "./sqlparser_sql2003.l"
TOKEN(CROSS)            /* SQL-2003-R */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 131 "./sqlparser_sql2003.l"
TOKEN(CUME_DIST)        /* SQL-2003-N */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 132 "./sqlparser_sql2003.l"
TOKEN(CURRENT)          /* SQL-2003-R */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 133 "./sqlparser_sql2003.l"
TOKEN(CURRENT_TIMESTAMP)/* SQL-2003-R */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 134 "./sqlparser_sql2003.l"
TOKEN(CURRENT_USER)     /* SQL-2003-R */
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 135 "./sqlparser_sql2003.l"
TOKEN(DATE)             /* SQL-2003-R */
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 136 "./sqlparser_sql2003.l"
TOKEN(DAY)              /* SQL-2003-R */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 137 "./sqlparser_sql2003.l"
TOKEN(DEC)              /* SQL-2003-R */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 138 "./sqlparser_sql2003.l"
TOKEN(DECIMAL)          /* SQL-2003-R */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 139 "./sqlparser_sql2003.l"
TOKEN(DEFAULT)          /* SQL-2003-R */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 140 "./sqlparser_sql2003.l"
TOKEN(DELETE)           /* SQL-2003-R */
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 141 "./sqlparser_sql2003.l"
TOKEN(DENSE_RANK)       /* SQL-2003-N */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 142 "./sqlparser_sql2003.l"
TOKEN(DESC)             /* SQL-2003-N */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 143 "./sqlparser_sql2003.l"
TOKEN(DISTINCT)         /* SQL-2003-R */
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 144 "./sqlparser_sql2003.l"
TOKEN(DOUBLE)           /* SQL-2003-R */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 145 "./sqlparser_sql2003.l"
TOKEN(ELSE)             /* SQL-2003-R */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 146 "./sqlparser_sql2003.l"
TOKEN(END)              /* SQL-2003-R */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 147 "./sqlparser_sql2003.l"
TOKEN(END_P)            /* LEX-INNER  */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 148 "./sqlparser_sql2003.l"
TOKEN(ESCAPE)           /* SQL-2003-R */
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 149 "./sqlparser_sql2003.l"
TOKEN(EXCEPT)           /* SQL-2003-R */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 150 "./sqlparser_sql2003.l"
TOKEN(EXCLUDE)          /* SQL-2003-N */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 151 "./sqlparser_sql2003.l"
TOKEN(EXISTS)           /* SQL-2003-R */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 152 "./sqlparser_sql2003.l"
TOKEN(FLOAT)            /* SQL-2003-R */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 153 "./sqlparser_sql2003.l"
TOKEN(FOLLOWING)        /* SQL-2003-N */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 154 "./sqlparser_sql2003.l"
TOKEN(FOR)              /* SQL-2003-R */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 155 "./sqlparser_sql2003.l"
TOKEN(FROM)             /* SQL-2003-R */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 156 "./sqlparser_sql2003.l"
TOKEN(FULL)             /* SQL-2003-R */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 157 "./sqlparser_sql2003.l"
TOKEN(G)                /* SQL-2003-N */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 158 "./sqlparser_sql2003.l"
TOKEN(GROUP)            /* SQL-2003-R */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 159 "./sqlparser_sql2003.l"
TOKEN(GROUPING)         /* SQL-2003-R */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 160 "./sqlparser_sql2003.l"
TOKEN(HAVING)           /* SQL-2003-R */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 161 "./sqlparser_sql2003.l"
TOKEN(HOUR)             /* SQL-2003-R */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 162 "./sqlparser_sql2003.l"
TOKEN(IN)               /* SQL-2003-R */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 163 "./sqlparser_sql2003.l"
TOKEN(INNER)            /* SQL-2003-R */
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 164 "./sqlparser_sql2003.l"
TOKEN(INSERT)           /* SQL-2003-R */
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 165 "./sqlparser_sql2003.l"
TOKEN(INT)              /* SQL-2003-R */
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 166 "./sqlparser_sql2003.l"
TOKEN(INTEGER)          /* SQL-2003-R */
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 167 "./sqlparser_sql2003.l"
TOKEN(INTERSECT)        /* SQL-2003-R */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 168 "./sqlparser_sql2003.l"
TOKEN(INTERVAL)         /* SQL-2003-R */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 169 "./sqlparser_sql2003.l"
TOKEN(INTO)             /* SQL-2003-R */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 170 "./sqlparser_sql2003.l"
TOKEN(IS)               /* SQL-2003-R */
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 171 "./sqlparser_sql2003.l"
TOKEN(JOIN)             /* SQL-2003-R */
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 172 "./sqlparser_sql2003.l"
TOKEN(K)                /* SQL-2003-N */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 173 "./sqlparser_sql2003.l"
TOKEN(LARGE)            /* SQL-2003-R */
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 174 "./sqlparser_sql2003.l"
TOKEN(LEFT)             /* SQL-2003-R */
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 175 "./sqlparser_sql2003.l"
TOKEN(LIKE)             /* SQL-2003-R */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 176 "./sqlparser_sql2003.l"
TOKEN(M)                /* SQL-2003-N */
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 177 "./sqlparser_sql2003.l"
TOKEN(MAX)              /* SQL-2003-N */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 178 "./sqlparser_sql2003.l"
TOKEN(MIN)              /* SQL-2003-N */
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 179 "./sqlparser_sql2003.l"
TOKEN(MINUTE)           /* SQL-2003-R */
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 180 "./sqlparser_sql2003.l"
TOKEN(MOD)              /* SQL-2003-N, here is reserved as an operator */
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 181 "./sqlparser_sql2003.l"
TOKEN(MONTH)            /* SQL-2003-R */
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 182 "./sqlparser_sql2003.l"
TOKEN(MULTISET)         /* SQL-2003-R */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 183 "./sqlparser_sql2003.l"
TOKEN(NATIONAL)         /* SQL-2003-R */
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 184 "./sqlparser_sql2003.l"
TOKEN(NATURAL)          /* SQL-2003-R */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 185 "./sqlparser_sql2003.l"
TOKEN(NCHAR)            /* SQL-2003-R */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 186 "./sqlparser_sql2003.l"
TOKEN(NCLOB)            /* SQL-2003-R */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 187 "./sqlparser_sql2003.l"
TOKEN(NO)               /* SQL-2003-R */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 188 "./sqlparser_sql2003.l"
TOKEN(NOT)              /* SQL-2003-R */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 189 "./sqlparser_sql2003.l"
TOKEN(NULLIF)           /* SQL-2003-N */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 190 "./sqlparser_sql2003.l"
TOKEN(NUMERIC)          /* SQL-2003-R */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 191 "./sqlparser_sql2003.l"
TOKEN(OBJECT)           /* SQL-2003-N */
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 192 "./sqlparser_sql2003.l"
TOKEN(OCTETS)           /* SQL-2003-N */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 193 "./sqlparser_sql2003.l"
TOKEN(OF)               /* SQL-2003-R */
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 194 "./sqlparser_sql2003.l"
TOKEN(ON)               /* SQL-2003-R */
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 195 "./sqlparser_sql2003.l"
TOKEN(ONLY)             /* SQL-2003-R */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 196 "./sqlparser_sql2003.l"
TOKEN(OR)               /* SQL-2003-R */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 197 "./sqlparser_sql2003.l"
TOKEN(ORDER)            /* SQL-2003-R */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 198 "./sqlparser_sql2003.l"
TOKEN(OTHERS)           /* SQL-2003-N */
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 199 "./sqlparser_sql2003.l"
TOKEN(OUTER)            /* SQL-2003-R */
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 200 "./sqlparser_sql2003.l"
TOKEN(OVER)             /* SQL-2003-R */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 201 "./sqlparser_sql2003.l"
TOKEN(PARTITION)        /* SQL-2003-R */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 202 "./sqlparser_sql2003.l"
TOKEN(PERCENT_RANK)     /* SQL-2003-N */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 203 "./sqlparser_sql2003.l"
TOKEN(PRECEDING)        /* SQL-2003-N */
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 204 "./sqlparser_sql2003.l"
TOKEN(PRECISION)        /* SQL-2003-R */
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 205 "./sqlparser_sql2003.l"
TOKEN(RANGE)            /* SQL-2003-R */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 206 "./sqlparser_sql2003.l"
TOKEN(RANK)             /* SQL-2003-N */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 207 "./sqlparser_sql2003.l"
TOKEN(READ)             /* SQL-2003-N */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 208 "./sqlparser_sql2003.l"
TOKEN(REAL)             /* SQL-2003-R */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 209 "./sqlparser_sql2003.l"
TOKEN(RECURSIVE)        /* SQL-2003-R */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 210 "./sqlparser_sql2003.l"
TOKEN(REF)              /* SQL-2003-R */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 211 "./sqlparser_sql2003.l"
TOKEN(RIGHT)            /* SQL-2003-R */
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 212 "./sqlparser_sql2003.l"
TOKEN(ROW)              /* SQL-2003-R */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 213 "./sqlparser_sql2003.l"
TOKEN(ROWS)             /* SQL-2003-R */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 214 "./sqlparser_sql2003.l"
TOKEN(ROW_NUMBER)       /* SQL-2003-N */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 215 "./sqlparser_sql2003.l"
TOKEN(SCOPE)            /* SQL-2003-? */
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 216 "./sqlparser_sql2003.l"
TOKEN(SECOND)           /* SQL-2003-R */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 217 "./sqlparser_sql2003.l"
TOKEN(SELECT)           /* SQL-2003-R */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 218 "./sqlparser_sql2003.l"
TOKEN(SESSION_USER)     /* SQL-2003-R */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 219 "./sqlparser_sql2003.l"
TOKEN(SET)              /* SQL-2003-R */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 220 "./sqlparser_sql2003.l"
TOKEN(SETS)             /* SQL-2003-N */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 221 "./sqlparser_sql2003.l"
TOKEN(SMALLINT)         /* SQL-2003-R */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 222 "./sqlparser_sql2003.l"
TOKEN(SOME)             /* SQL-2003-R */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 223 "./sqlparser_sql2003.l"
TOKEN(STDDEV_POP)       /* SQL-2003-N */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 224 "./sqlparser_sql2003.l"
TOKEN(STDDEV_SAMP)      /* SQL-2003-N */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 225 "./sqlparser_sql2003.l"
TOKEN(SUM)              /* SQL-2003-N */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 226 "./sqlparser_sql2003.l"
TOKEN(SYSTEM_USER)      /* SQL-2003-R */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 227 "./sqlparser_sql2003.l"
TOKEN(THEN)             /* SQL-2003-R */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 228 "./sqlparser_sql2003.l"
TOKEN(TIES)             /* SQL-2003-N */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 229 "./sqlparser_sql2003.l"
TOKEN(TIME)             /* SQL-2003-R */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 230 "./sqlparser_sql2003.l"
TOKEN(TIMESTAMP)        /* SQL-2003-R */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 231 "./sqlparser_sql2003.l"
TOKEN(TO)               /* SQL-2003-R */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 232 "./sqlparser_sql2003.l"
TOKEN(UNBOUNDED)        /* SQL-2003-N */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 233 "./sqlparser_sql2003.l"
TOKEN(UNION)            /* SQL-2003-R */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 234 "./sqlparser_sql2003.l"
TOKEN(UPDATE)           /* SQL-2003-R */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 235 "./sqlparser_sql2003.l"
TOKEN(USING)            /* SQL-2003-R */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 236 "./sqlparser_sql2003.l"
TOKEN(VALUES)           /* SQL-2003-R */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 237 "./sqlparser_sql2003.l"
TOKEN(VARCHAR)          /* SQL-2003-R */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 238 "./sqlparser_sql2003.l"
TOKEN(VARYING)          /* SQL-2003-R */
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 239 "./sqlparser_sql2003.l"
TOKEN(VAR_POP)          /* SQL-2003-R */
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 240 "./sqlparser_sql2003.l"
TOKEN(VAR_SAMP)         /* SQL-2003-R */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 241 "./sqlparser_sql2003.l"
TOKEN(WHEN)             /* SQL-2003-R */
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 242 "./sqlparser_sql2003.l"
TOKEN(WHERE)            /* SQL-2003-R */
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 243 "./sqlparser_sql2003.l"
TOKEN(WITH)             /* SQL-2003-R */
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 244 "./sqlparser_sql2003.l"
TOKEN(WITHOUT)          /* SQL-2003-R */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 245 "./sqlparser_sql2003.l"
TOKEN(YEAR)             /* SQL-2003-R */
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 246 "./sqlparser_sql2003.l"
TOKEN(ZONE)             /* SQL-2003-N */
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 248 "./sqlparser_sql2003.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return SQL2003_NULLX;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 253 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    return SQL2003_INTNUM;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 259 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return SQL2003_INTNUM;
}
	YY_BREAK
case 146:
#line 269 "./sqlparser_sql2003.l"
case 147:
#line 270 "./sqlparser_sql2003.l"
case 148:
YY_RULE_SETUP
#line 270 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return SQL2003_APPROXNUM;
}
	YY_BREAK
case 149:
#line 278 "./sqlparser_sql2003.l"
case 150:
YY_RULE_SETUP
#line 278 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return SQL2003_APPROXNUM;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 285 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return SQL2003_BOOL;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 292 "./sqlparser_sql2003.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return SQL2003_UNKNOWN;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 297 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return SQL2003_BOOL;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 304 "./sqlparser_sql2003.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 310 "./sqlparser_sql2003.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "N'";
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 316 "./sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << "''";
}
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 320 "./sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 324 "./sqlparser_sql2003.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return SQL2003_STRING;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 333 "./sqlparser_sql2003.l"
{
  fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return SQL2003_ERROR;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 338 "./sqlparser_sql2003.l"
{
    BEGIN(sb);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '[';
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 344 "./sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << "]]";
}
	YY_BREAK
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 348 "./sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 352 "./sqlparser_sql2003.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << ']';
    std::string text = ((ParseResult*)yyextra)->buf_.str();
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, text.c_str());
    nd->terminalToken_.str = text.substr(1, text.length() - 2);
    yylval->node = nd;
    return SQL2003_NAME;
}
	YY_BREAK
case YY_STATE_EOF(sb):
#line 362 "./sqlparser_sql2003.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unterminated identifier WITH '['\n");
    return SQL2003_ERROR;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 368 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = std::string(yytext+1, yytext + strlen(yytext) - 1);
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return SQL2003_NAME;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 377 "./sqlparser_sql2003.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return SQL2003_NAME;
}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 386 "./sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 387 "./sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 389 "./sqlparser_sql2003.l"
{ return yytext[0];}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 391 "./sqlparser_sql2003.l"
{ return SQL2003_CNNOP; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 392 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_EQ; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 393 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_GE; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 394 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_GT; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 395 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_LE; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 396 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_LT; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 397 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_NE; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 398 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_NE; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 400 "./sqlparser_sql2003.l"

	YY_BREAK
case 177:
YY_RULE_SETUP
#line 402 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return SQL2003_QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
#line 409 "./sqlparser_sql2003.l"
{ return SQL2003_END_P; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 411 "./sqlparser_sql2003.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return SQL2003_ERROR;
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 415 "./sqlparser_sql2003.l"
ECHO;
	YY_BREAK
#line 2578 "sqlparser_sql2003_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 644 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 644 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 643);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 415 "./sqlparser_sql2003.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return SQL2003_ERROR;
}

