#line 2 "sqlparser_sql2003_flex.cpp"

#line 4 "sqlparser_sql2003_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define sql2003__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sql2003__create_buffer
#endif

#ifdef yy_delete_buffer
#define sql2003__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sql2003__delete_buffer
#endif

#ifdef yy_scan_buffer
#define sql2003__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sql2003__scan_buffer
#endif

#ifdef yy_scan_string
#define sql2003__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sql2003__scan_string
#endif

#ifdef yy_scan_bytes
#define sql2003__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sql2003__scan_bytes
#endif

#ifdef yy_init_buffer
#define sql2003__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sql2003__init_buffer
#endif

#ifdef yy_flush_buffer
#define sql2003__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sql2003__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sql2003__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sql2003__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sql2003__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sql2003__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define sql2003_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state sql2003_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define sql2003_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state sql2003_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define sql2003_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack sql2003_ensure_buffer_stack
#endif

#ifdef yylex
#define sql2003_lex_ALREADY_DEFINED
#else
#define yylex sql2003_lex
#endif

#ifdef yyrestart
#define sql2003_restart_ALREADY_DEFINED
#else
#define yyrestart sql2003_restart
#endif

#ifdef yylex_init
#define sql2003_lex_init_ALREADY_DEFINED
#else
#define yylex_init sql2003_lex_init
#endif

#ifdef yylex_init_extra
#define sql2003_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra sql2003_lex_init_extra
#endif

#ifdef yylex_destroy
#define sql2003_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy sql2003_lex_destroy
#endif

#ifdef yyget_debug
#define sql2003_get_debug_ALREADY_DEFINED
#else
#define yyget_debug sql2003_get_debug
#endif

#ifdef yyset_debug
#define sql2003_set_debug_ALREADY_DEFINED
#else
#define yyset_debug sql2003_set_debug
#endif

#ifdef yyget_extra
#define sql2003_get_extra_ALREADY_DEFINED
#else
#define yyget_extra sql2003_get_extra
#endif

#ifdef yyset_extra
#define sql2003_set_extra_ALREADY_DEFINED
#else
#define yyset_extra sql2003_set_extra
#endif

#ifdef yyget_in
#define sql2003_get_in_ALREADY_DEFINED
#else
#define yyget_in sql2003_get_in
#endif

#ifdef yyset_in
#define sql2003_set_in_ALREADY_DEFINED
#else
#define yyset_in sql2003_set_in
#endif

#ifdef yyget_out
#define sql2003_get_out_ALREADY_DEFINED
#else
#define yyget_out sql2003_get_out
#endif

#ifdef yyset_out
#define sql2003_set_out_ALREADY_DEFINED
#else
#define yyset_out sql2003_set_out
#endif

#ifdef yyget_leng
#define sql2003_get_leng_ALREADY_DEFINED
#else
#define yyget_leng sql2003_get_leng
#endif

#ifdef yyget_text
#define sql2003_get_text_ALREADY_DEFINED
#else
#define yyget_text sql2003_get_text
#endif

#ifdef yyget_lineno
#define sql2003_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno sql2003_get_lineno
#endif

#ifdef yyset_lineno
#define sql2003_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno sql2003_set_lineno
#endif

#ifdef yyget_column
#define sql2003_get_column_ALREADY_DEFINED
#else
#define yyget_column sql2003_get_column
#endif

#ifdef yyset_column
#define sql2003_set_column_ALREADY_DEFINED
#else
#define yyset_column sql2003_set_column
#endif

#ifdef yywrap
#define sql2003_wrap_ALREADY_DEFINED
#else
#define yywrap sql2003_wrap
#endif

#ifdef yyget_lval
#define sql2003_get_lval_ALREADY_DEFINED
#else
#define yyget_lval sql2003_get_lval
#endif

#ifdef yyset_lval
#define sql2003_set_lval_ALREADY_DEFINED
#else
#define yyset_lval sql2003_set_lval
#endif

#ifdef yyget_lloc
#define sql2003_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc sql2003_get_lloc
#endif

#ifdef yyset_lloc
#define sql2003_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc sql2003_set_lloc
#endif

#ifdef yyalloc
#define sql2003_alloc_ALREADY_DEFINED
#else
#define yyalloc sql2003_alloc
#endif

#ifdef yyrealloc
#define sql2003_realloc_ALREADY_DEFINED
#else
#define yyrealloc sql2003_realloc
#endif

#ifdef yyfree
#define sql2003_free_ALREADY_DEFINED
#else
#define yyfree sql2003_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define sql2003_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 180
#define YY_END_OF_BUFFER 181
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[646] =
    {   0,
      177,  177,    0,    0,  158,  158,  162,  162,  181,  179,
      167,  167,  168,  179,  166,  168,  155,  168,  168,  168,
      146,  146,  174,  170,  172,  178,  165,  165,  165,  165,
      165,  165,   54,  165,  165,  165,   69,  165,   73,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  160,  168,  180,  158,  159,  162,  163,  167,  176,
        0,    0,  166,  166,  151,    0,  150,  146,    0,    0,
      173,  175,  171,  165,  165,  165,  165,    5,  165,  165,
      165,  165,  165,   13,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,   59,   67,  165,  165,
      165,  165,  165,  165,  165,  165,  156,  165,  165,   84,
      165,  165,  165,   90,   91,   93,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  128,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  169,  158,  157,  162,  161,
      164,    0,    0,  150,    0,    0,  147,  145,    1,    2,
        3,  165,    6,    7,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,   33,   34,  165,  165,  165,  165,  165,

      165,  165,   43,  165,  165,  165,  165,  165,  165,   51,
      165,  165,  165,  165,  165,  165,  165,   62,  165,  165,
      165,  165,   74,   75,   77,  165,  165,  165,  165,  165,
       85,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  107,  165,  109,  165,
      165,  165,  165,  116,  165,  165,  165,  122,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,    0,  149,    0,    0,    0,  148,
      165,  165,  165,  165,   11,  165,   16,   14,   15,   17,
       20,  165,  165,  165,  165,  165,  165,  165,  165,  165,

       32,  165,  165,  165,  165,   39,  165,  165,   42,  165,
      165,  165,  165,  165,  165,  165,  165,   52,   53,  165,
      165,   58,  165,  165,  165,   66,   68,  165,   71,   72,
      165,  165,  165,  165,  165,  165,  165,  144,  165,  165,
      165,   92,  165,  165,  165,   97,  165,  165,  165,  165,
      103,  104,  105,  165,  165,  110,  165,  165,  165,  165,
      165,  117,  165,  119,  165,  165,  124,  125,  126,  152,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  138,
      165,  140,  142,  143,  166,    4,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,   26,   27,  165,  165,

      165,  165,  165,  165,  165,  165,   44,  165,  165,  165,
      165,  154,   49,  165,   55,  165,   60,  165,  165,  165,
       70,  165,   78,  165,  165,  165,   82,   83,  165,  165,
      165,  165,   94,  165,   96,  165,  165,  165,  165,  102,
      165,  108,  165,  112,  165,  165,  165,  165,  165,  165,
      165,  165,  130,  165,  165,  132,  165,  165,  165,  165,
      165,  139,  165,  165,    9,   10,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,   37,  165,  165,
       41,   45,   46,  165,   48,  165,  165,   57,   61,  165,
      165,  165,   76,  165,  165,  165,   86,  165,   88,   89,

       95,  165,  165,  165,  165,  165,  165,  113,  114,  165,
      165,  165,  165,  165,  165,  165,  131,  133,  165,  165,
      165,  165,  165,    8,   12,  165,  165,  165,   23,   24,
      165,  165,   29,   35,   36,  165,  165,   47,  165,  165,
       63,  165,  165,  165,  165,   81,   87,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  153,
      134,  135,  136,  165,  141,  165,   21,  165,  165,  165,
      165,  165,   40,  165,   56,  165,   65,   79,   80,  165,
      165,  165,  165,  165,  165,  165,  118,  165,  165,  165,
      165,  165,  137,   18,  165,  165,   28,  165,  165,  165,

       50,   64,   98,  165,  100,  101,  106,  165,  165,  165,
      165,  165,  127,  129,   19,   22,  165,  165,  165,   38,
      165,  111,  165,  120,  165,  165,  165,  165,  165,  165,
      165,  121,  123,  165,  165,   31,   99,  115,   25,  165,
      165,  165,  165,   30,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    8,    8,    9,    8,
        8,   10,   11,    8,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    1,    8,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,    8,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   37,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    8,   76,    8,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        5,    1,    1,    1,    6,    6,    1,    1,    1,    1,
        6,    6,    6,    6,    6,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    1,    8,    9,    7,
        6,    6,    6,    6,    6,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    1
    } ;

static const flex_int16_t yy_base[657] =
    {   0,
        0,    0,    0,    0,  615,  552,  508,  496,  507, 1364,
       75,   78,  436,  431,    0, 1364, 1364,  393,   68,  375,
       72,   76,   75, 1364,  336, 1364,   66,   77,  131,   89,
      126,  146,   48,   78,  107,   55,    0,  181,  174,  196,
      245,  197,    0,  225,  294,  265,  187,   74,  121,   71,
       82, 1364,  261, 1364,    0,  296,    0,  247,  153, 1364,
      283,  250,    0,    0,  247,    0,  266,  295,  258,    0,
     1364, 1364, 1364,    0,   91,  138,   97,  115,  134,  145,
      231,  139,  142,    0,  260,  179,  192,  348,  194,  293,
      293,  358,  236,  236,  239,  289,  295,  317,  293,  301,

      333,  309,  313,  318,  316,  336,  339,    0,  332,  350,
      367,  363,  352,  364,  385,  369, 1364,  364,  402,  373,
      403,  386,  381,    0,  395,  405,  404,  398,  415,  405,
      406,  416,  411,  430,  420,  412,  413,  429,  437,  430,
      450,  443,  440,  455,  462,    0,  444,  470,  465,  461,
      471,  469,  465,  475,  466, 1364,    0, 1364,    0, 1364,
      239,  500,  233,  512,  524,  226,  326,    0,    0,    0,
        0,  481,    0,    0,  470,  489,  500,  501,  509,  511,
      519,  508,  525,  517,  525,  520,  512,  517,  522,  519,
      535,  524,  538,    0,  535,  544,  541,  529,  546,  532,

      548,  551,  188,  557,  560,  542,  550,  577,  570,    0,
      570,  572,  566,  576,  571,  586,  587,  588,  580,  589,
      579,  592,    0,  579,    0,  581,  585,  598,  605,  594,
        0,  598,  606,  612,  615,  600,  626,  627,  630,  620,
      622,  640,  641,  638,  647,  632,    0,  638,  636,  640,
      642,  653,  644,  645,  648,  663,  665,    0,  652,  656,
      658,  673,  675,  668,  670,  677,  693,  681,  676,  702,
      689,  696,  684,  704,  336,  716,  224,   93,  721,  723,
      689,  715,  708,  710,    0,  718,    0,    0,    0,  728,
        0,  725,  178,  736,  733,  735,  722,  725,  174,  740,

        0,  733,  727,  729,  746,    0,  745,  743,    0,  742,
      745,  746,  743,  745,  761,  749,  757,    0,    0,  758,
      765,    0,  764,  765,  779,    0,    0,  775,    0,    0,
      769,  779,  781,  780,  781,  782,  799,  794,  787,  803,
      788,    0,  795,  796,  797,    0,  810,  816,  818,  817,
        0,    0,    0,  812,  812,    0,  810,  830,  824,  836,
      831,    0,  829,    0,  840,  841,    0,    0,  829,    0,
      829,  841,  841,  838,  853,  857,  855,  855,  862,    0,
      861,  852,    0,    0, 1364,    0,  867,  854,  855,  881,
      880,  869,  868,  871,  877,  879,    0,    0,  880,  885,

      899,  889,  899,  170,  891,  901,    0,  902,  891,  911,
      900,    0,    0,  898,  907,  915,    0,  905,  918,  919,
        0,  921,    0,  909,  918,  932,    0,    0,  933,  933,
      924,  928,    0,  930,    0,  931,  941,  954,  941,    0,
      942,    0,  943,    0,  961,  948,  951,  962,  952,  962,
      957,  965,    0,  958,  977,    0,  965,  985,  973,  976,
      991,    0,  973,  984,    0,    0,  985,  982,  997,  990,
     1002,  991,  992, 1005,  998, 1003,  999,    0, 1002, 1021,
        0,    0,    0, 1020,    0, 1017, 1013,    0,    0, 1014,
     1028, 1034,    0, 1031, 1038, 1029,    0, 1039,    0,    0,

        0, 1034, 1026, 1041, 1042, 1043, 1040,    0,    0, 1044,
     1045,  136,  126, 1059, 1058, 1050,    0,    0, 1049, 1061,
     1054, 1061, 1056,    0,    0, 1072, 1073, 1070,    0,    0,
     1069, 1067,  123,    0,    0, 1086, 1071,    0, 1079, 1088,
        0, 1094, 1087, 1081, 1090,    0,    0, 1088,   71, 1092,
     1095, 1090, 1111,   69, 1096, 1102, 1101, 1106, 1119,    0,
        0,    0,    0, 1110,    0, 1110,    0, 1111, 1120, 1117,
     1118, 1121,    0, 1135,    0, 1124,    0,    0,    0, 1132,
     1134, 1140, 1139, 1150, 1153, 1140,    0, 1144, 1161, 1150,
     1147, 1166,    0, 1155, 1156, 1167,    0, 1169, 1161, 1171,

        0,    0,    0, 1183,    0,    0,    0, 1168, 1168, 1175,
     1181, 1190,    0,    0,    0,    0, 1187, 1184, 1194,    0,
     1188,    0, 1200,    0, 1190, 1192, 1193, 1206, 1195, 1206,
     1201,    0,    0, 1213, 1203,    0,    0,    0,    0, 1203,
     1227, 1217, 1215,    0, 1364, 1281, 1290, 1299, 1308, 1317,
     1321, 1328, 1337, 1345,  105, 1354
    } ;

static const flex_int16_t yy_def[657] =
    {   0,
      645,    1,  646,  646,  647,  647,  648,  648,  645,  645,
      645,  645,  645,  649,  650,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  645,  645,  645,  652,  645,  653,  645,  645,  645,
      649,  645,  650,  650,  645,  654,  645,  645,  645,  655,
      645,  645,  645,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  645,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  645,  652,  645,  653,  645,
      645,  645,  656,  645,  645,  645,  645,  655,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  645,  645,  656,  656,  645,  645,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  645,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,    0,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645
    } ;

static const flex_int16_t yy_nxt[1441] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   16,
       16,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   43,   50,   51,   52,   10,   10,   43,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   44,   45,   46,   47,
       48,   49,   43,   50,   51,   53,   59,   59,   59,   59,
       59,   59,   65,   65,   67,  104,   68,   68,   67,  109,
       68,   68,   71,   72,  151,  154,   69,   75,  105,   76,

       69,   80,  278,   77,   78,   81,  385,   79,   82,   91,
      168,   83,  106,   92,  104,   70,  155,   93,  586,  109,
      581,   84,  169,   94,  151,  154,   69,   75,  105,   76,
       69,   80,   77,   78,  172,   81,   79,  173,   82,   91,
      107,   83,  106,   92,   70,  108,  155,   93,  152,  153,
       84,   85,  169,   94,   59,   59,   59,   95,   86,   96,
      174,  170,   87,  172,   97,   88,   99,  173,   89,   98,
      107,   90,  571,  178,  108,  557,  179,  100,  152,  153,
      101,   85,  171,  102,  175,  556,  103,   95,   86,   96,
      174,  170,   87,   97,  113,   88,   99,   89,   98,  182,

       90,  110,  114,  178,  117,  111,  179,  100,  115,  112,
      101,  171,  102,  175,  116,  103,  118,  130,  119,  479,
      148,  131,  149,  399,  113,  150,  183,  393,  190,  182,
      120,  110,  114,  278,  132,  111,  121,  310,  115,  112,
      167,  167,  278,  116,   61,  133,  118,  130,  119,  134,
      148,  131,  149,  135,  150,   61,  183,  176,  190,  136,
      120,   65,   65,  132,  177,  121,  122,  123,  166,  166,
      124,  162,  167,  167,  200,  133,  201,  202,  125,  134,
      164,  164,  126,  135,  127,  128,  129,  176,  161,  136,
      165,  180,  144,  145,  177,  160,  122,  123,  181,  146,

      124,  162,  147,  200,  158,  201,  202,   67,  125,   68,
       68,  126,  203,  127,  128,  129,  137,  204,  138,   69,
      165,  180,  144,  145,  207,  191,  139,  181,  140,  146,
      192,  147,  193,  141,  142,  208,  156,  194,  143,  205,
      167,  167,  203,  211,  212,  206,  137,  204,  138,   69,
      276,  276,  213,   73,  207,  191,  139,  214,  140,  192,
      219,  193,  141,  142,  209,  208,  194,  143,  184,  205,
      210,  185,  216,  211,  212,  206,  215,  217,  218,  186,
      195,  187,  213,  196,   66,  188,  214,  220,  189,  197,
      219,  198,  221,  222,  209,  223,  199,  224,  184,  210,

      227,  185,  216,  228,   64,  215,  217,  218,  225,  186,
      195,  187,  231,  196,  188,  234,  220,  189,  226,  197,
      235,  198,  221,  222,  223,  199,  236,  224,  237,  229,
      227,  238,  228,  230,  232,  233,   62,  239,  225,  240,
      243,  231,  241,  242,  244,  234,  248,  250,  226,  235,
      245,  251,  246,   60,  249,  247,  236,  255,  237,  229,
      252,  238,  256,  230,  232,  233,  239,  253,  254,  240,
      243,  241,  242,  257,  244,  258,  248,  250,  259,  260,
      245,  251,  246,  249,  263,  247,  261,  255,  267,  268,
      252,  264,  256,  271,  262,  273,  253,  254,  265,  274,

      266,  281,  269,  257,  272,  258,  645,  259,  270,  260,
      275,  275,  282,  263,  276,  276,  261,  283,  267,  268,
      284,  264,  285,  271,  262,  273,  164,  164,  265,  274,
      266,  281,  269,  272,  279,  279,  165,  270,  280,  280,
      286,  282,  287,  288,   58,  290,  291,  283,  292,  293,
      284,  294,  285,  295,  296,  297,   58,  298,  289,  299,
       56,  300,  301,  302,  303,  304,  165,  305,  306,  308,
      286,  307,  287,  288,  290,  309,  291,  311,  292,  293,
      314,  294,  295,  296,  312,  297,  298,  289,  315,  299,
      300,  313,  301,  302,  303,  304,  305,  316,  306,  308,

      307,  317,  318,  319,  321,  309,  320,  311,  322,  314,
      323,  324,  325,  327,  312,  328,  330,  315,  329,  331,
      332,  313,  326,   56,  333,  336,  334,  316,  337,  338,
      339,  317,  318,  319,  321,  320,  340,  322,  335,  341,
      323,  324,  325,  327,  342,  328,  330,  329,  331,  332,
      343,  344,  326,  333,  345,  336,  334,  346,  337,  338,
      339,  347,  348,  349,  350,  355,  340,  335,  351,  341,
      352,  645,  354,  342,  356,  358,  359,  360,  353,  363,
      343,  344,  361,  362,  345,  357,  346,  364,  365,  367,
      347,  366,  348,  349,  350,  355,  368,  369,  351,  370,

      352,  354,  371,  356,  372,  358,  359,  360,  353,  363,
      373,  361,  362,  374,  375,  645,  376,  364,  365,  367,
      366,  383,  380,  382,  377,  368,  381,  369,  384,  370,
      276,  276,  371,  386,  372,  280,  280,  280,  280,  387,
      373,  388,  390,  374,  375,  376,  378,  389,  391,  392,
      383,  379,  380,  382,  377,  381,  394,  395,  384,  396,
      645,  397,  386,  398,  400,  401,  645,  402,  403,  387,
      404,  388,  390,  405,  406,  378,  389,  407,  391,  392,
      408,  409,  645,  410,  411,  412,  394,  395,  413,  396,
      397,  414,  398,  415,  400,  401,  402,  403,  416,  421,

      404,  417,  418,  405,  406,  419,  423,  407,  422,  424,
      408,  409,  410,  411,  425,  412,  420,  413,  426,  427,
      428,  414,  429,  415,  430,  431,  645,  432,  416,  421,
      417,  418,  433,  434,  435,  419,  423,  422,  436,  424,
      437,  440,  438,  443,  425,  420,  439,  426,  427,  441,
      428,  442,  429,  430,  444,  431,  432,  445,  446,  447,
      448,  433,  434,  435,  449,  450,  645,  451,  436,  452,
      437,  440,  438,  443,  453,  454,  439,  455,  441,  456,
      442,  457,  458,  459,  444,  462,  463,  445,  446,  447,
      448,  464,  645,  465,  449,  450,  451,  460,  452,  466,

      461,  467,  468,  474,  453,  454,  455,  469,  470,  456,
      471,  457,  458,  459,  472,  462,  463,  473,  475,  476,
      477,  464,  465,  478,  480,  481,  482,  460,  466,  461,
      483,  467,  468,  474,  484,  487,  469,  470,  485,  471,
      486,  488,  490,  472,  489,  493,  473,  494,  475,  476,
      477,  495,  496,  478,  480,  481,  482,  491,  497,  483,
      492,  498,  645,  499,  484,  487,  500,  485,  501,  486,
      502,  488,  490,  489,  503,  493,  494,  504,  645,  505,
      506,  495,  496,  507,  508,  510,  491,  509,  497,  492,
      511,  498,  499,  512,  513,  500,  514,  501,  515,  502,

      516,  517,  645,  518,  503,  519,  520,  504,  505,  506,
      521,  522,  507,  523,  508,  510,  509,  524,  525,  527,
      511,  526,  512,  528,  513,  514,  529,  531,  515,  516,
      530,  517,  518,  532,  534,  519,  520,  533,  535,  536,
      521,  522,  523,  537,  538,  539,  540,  524,  525,  527,
      526,  541,  542,  528,  543,  544,  529,  531,  545,  530,
      546,  547,  548,  532,  534,  549,  533,  535,  536,  550,
      551,  552,  553,  537,  538,  539,  540,  554,  555,  558,
      541,  559,  542,  560,  543,  544,  561,  562,  545,  563,
      546,  547,  548,  564,  549,  565,  566,  567,  568,  550,

      551,  552,  553,  569,  645,  570,  572,  554,  555,  558,
      573,  559,  574,  560,  575,  561,  576,  562,  577,  563,
      578,  579,  580,  564,  565,  582,  566,  567,  568,  583,
      645,  584,  585,  569,  570,  587,  572,  588,  591,  573,
      589,  590,  574,  592,  575,  593,  576,  594,  577,  578,
      595,  579,  580,  596,  600,  582,  597,  598,  599,  583,
      584,  601,  585,  602,  587,  603,  605,  588,  591,  589,
      590,  604,  606,  592,  607,  593,  594,  608,  610,  595,
      609,  611,  613,  596,  600,  597,  598,  599,  612,  614,
      617,  601,  602,  615,  616,  603,  605,  618,  645,  619,

      604,  620,  606,  621,  607,  622,  623,  608,  610,  609,
      624,  611,  613,  625,  626,  627,  628,  612,  629,  614,
      617,  630,  615,  616,  631,  632,  634,  618,  619,  633,
      635,  620,  636,  621,  622,  623,  637,  645,  638,  639,
      624,  640,  641,  625,  626,  627,  628,  642,  629,  643,
      644,  630,  645,  645,  631,  632,  634,  645,  633,  645,
      635,  636,  645,  645,  645,  645,  637,  638,  645,  639,
      640,  641,  645,  645,  645,  645,  645,  642,  645,  643,
      644,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   61,  645,
       61,   61,   61,   61,   61,  645,   61,   63,  645,  645,
       63,   63,   63,   63,   63,   63,   74,   74,  157,  157,
      157,  645,  157,  157,  157,  157,  157,  159,  159,  159,
      159,  159,  159,  159,  159,  163,  163,  163,  163,  645,
      163,  163,  163,  163,  277,  277,  277,  277,  277,  277,
      277,  277,  277,    9,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,

      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645
    } ;

static const flex_int16_t yy_chk[1441] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   11,   11,   11,   12,
       12,   12,   19,   19,   21,   33,   21,   21,   22,   36,
       22,   22,   23,   23,   48,   50,   21,   27,   34,   27,

       22,   28,  278,   27,   27,   28,  278,   27,   28,   30,
      655,   28,   34,   30,   33,   21,   51,   30,  554,   36,
      549,   28,   75,   30,   48,   50,   21,   27,   34,   27,
       22,   28,   27,   27,   77,   28,   27,   78,   28,   30,
       35,   28,   34,   30,   21,   35,   51,   30,   49,   49,
       28,   29,   75,   30,   59,   59,   59,   31,   29,   31,
       79,   76,   29,   77,   31,   29,   32,   78,   29,   31,
       35,   29,  533,   82,   35,  513,   83,   32,   49,   49,
       32,   29,   76,   32,   80,  512,   32,   31,   29,   31,
       79,   76,   29,   31,   39,   29,   32,   29,   31,   86,

       29,   38,   39,   82,   40,   38,   83,   32,   39,   38,
       32,   76,   32,   80,   39,   32,   40,   42,   40,  404,
       47,   42,   47,  299,   39,   47,   87,  293,   89,   86,
       40,   38,   39,  277,   42,   38,   40,  203,   39,   38,
      166,  166,  163,   39,  161,   44,   40,   42,   40,   44,
       47,   42,   47,   44,   47,   62,   87,   81,   89,   44,
       40,   65,   65,   42,   81,   40,   41,   41,   69,   69,
       41,   65,   69,   69,   93,   44,   94,   95,   41,   44,
       67,   67,   41,   44,   41,   41,   41,   81,   61,   44,
       67,   85,   46,   46,   81,   58,   41,   41,   85,   46,

       41,   65,   46,   93,   56,   94,   95,   68,   41,   68,
       68,   41,   96,   41,   41,   41,   45,   97,   45,   68,
       67,   85,   46,   46,   99,   90,   45,   85,   45,   46,
       90,   46,   91,   45,   45,  100,   53,   91,   45,   98,
      167,  167,   96,  102,  103,   98,   45,   97,   45,   68,
      275,  275,  104,   25,   99,   90,   45,  105,   45,   90,
      109,   91,   45,   45,  101,  100,   91,   45,   88,   98,
      101,   88,  107,  102,  103,   98,  106,  107,  107,   88,
       92,   88,  104,   92,   20,   88,  105,  110,   88,   92,
      109,   92,  111,  112,  101,  113,   92,  114,   88,  101,

      116,   88,  107,  118,   18,  106,  107,  107,  115,   88,
       92,   88,  120,   92,   88,  122,  110,   88,  115,   92,
      123,   92,  111,  112,  113,   92,  125,  114,  126,  119,
      116,  127,  118,  119,  121,  121,   14,  128,  115,  129,
      132,  120,  130,  131,  133,  122,  135,  137,  115,  123,
      134,  138,  134,   13,  136,  134,  125,  139,  126,  119,
      138,  127,  140,  119,  121,  121,  128,  138,  138,  129,
      132,  130,  131,  141,  133,  142,  135,  137,  143,  144,
      134,  138,  134,  136,  147,  134,  145,  139,  149,  150,
      138,  148,  140,  152,  145,  154,  138,  138,  148,  155,

      148,  172,  151,  141,  153,  142,    9,  143,  151,  144,
      162,  162,  175,  147,  162,  162,  145,  176,  149,  150,
      177,  148,  178,  152,  145,  154,  164,  164,  148,  155,
      148,  172,  151,  153,  165,  165,  164,  151,  165,  165,
      179,  175,  180,  181,    8,  182,  183,  176,  184,  185,
      177,  186,  178,  187,  188,  189,    7,  190,  181,  191,
        6,  192,  193,  195,  196,  197,  164,  198,  199,  201,
      179,  200,  180,  181,  182,  202,  183,  204,  184,  185,
      206,  186,  187,  188,  205,  189,  190,  181,  207,  191,
      192,  205,  193,  195,  196,  197,  198,  208,  199,  201,

      200,  209,  211,  212,  214,  202,  213,  204,  215,  206,
      216,  217,  218,  219,  205,  220,  222,  207,  221,  224,
      226,  205,  218,    5,  227,  229,  228,  208,  230,  232,
      233,  209,  211,  212,  214,  213,  234,  215,  228,  235,
      216,  217,  218,  219,  236,  220,  222,  221,  224,  226,
      237,  238,  218,  227,  239,  229,  228,  240,  230,  232,
      233,  241,  242,  243,  244,  248,  234,  228,  244,  235,
      245,    0,  246,  236,  249,  250,  251,  252,  245,  255,
      237,  238,  253,  254,  239,  249,  240,  256,  257,  260,
      241,  259,  242,  243,  244,  248,  261,  262,  244,  263,

      245,  246,  264,  249,  265,  250,  251,  252,  245,  255,
      266,  253,  254,  267,  268,    0,  269,  256,  257,  260,
      259,  273,  271,  272,  270,  261,  271,  262,  274,  263,
      276,  276,  264,  281,  265,  279,  279,  280,  280,  282,
      266,  283,  286,  267,  268,  269,  270,  284,  290,  292,
      273,  270,  271,  272,  270,  271,  294,  295,  274,  296,
        0,  297,  281,  298,  300,  302,    0,  303,  304,  282,
      305,  283,  286,  307,  308,  270,  284,  310,  290,  292,
      311,  312,    0,  313,  314,  315,  294,  295,  316,  296,
      297,  317,  298,  320,  300,  302,  303,  304,  321,  328,

      305,  323,  324,  307,  308,  325,  332,  310,  331,  333,
      311,  312,  313,  314,  334,  315,  325,  316,  335,  336,
      337,  317,  338,  320,  339,  340,    0,  341,  321,  328,
      323,  324,  343,  344,  345,  325,  332,  331,  347,  333,
      348,  350,  349,  357,  334,  325,  349,  335,  336,  354,
      337,  355,  338,  339,  358,  340,  341,  359,  360,  361,
      363,  343,  344,  345,  365,  366,    0,  369,  347,  371,
      348,  350,  349,  357,  372,  373,  349,  374,  354,  375,
      355,  376,  377,  378,  358,  381,  382,  359,  360,  361,
      363,  387,    0,  388,  365,  366,  369,  379,  371,  389,

      379,  390,  391,  399,  372,  373,  374,  392,  393,  375,
      394,  376,  377,  378,  395,  381,  382,  396,  400,  401,
      402,  387,  388,  403,  405,  406,  408,  379,  389,  379,
      409,  390,  391,  399,  410,  415,  392,  393,  411,  394,
      414,  416,  419,  395,  418,  422,  396,  424,  400,  401,
      402,  425,  426,  403,  405,  406,  408,  420,  429,  409,
      420,  430,    0,  431,  410,  415,  432,  411,  434,  414,
      436,  416,  419,  418,  437,  422,  424,  438,    0,  439,
      441,  425,  426,  443,  445,  447,  420,  446,  429,  420,
      448,  430,  431,  449,  450,  432,  451,  434,  452,  436,

      454,  455,    0,  457,  437,  458,  459,  438,  439,  441,
      460,  461,  443,  463,  445,  447,  446,  464,  467,  469,
      448,  468,  449,  470,  450,  451,  471,  473,  452,  454,
      472,  455,  457,  474,  476,  458,  459,  475,  477,  479,
      460,  461,  463,  480,  484,  486,  487,  464,  467,  469,
      468,  490,  491,  470,  492,  494,  471,  473,  495,  472,
      496,  498,  502,  474,  476,  503,  475,  477,  479,  504,
      505,  506,  507,  480,  484,  486,  487,  510,  511,  514,
      490,  515,  491,  516,  492,  494,  519,  520,  495,  521,
      496,  498,  502,  522,  503,  523,  526,  527,  528,  504,

      505,  506,  507,  531,    0,  532,  536,  510,  511,  514,
      537,  515,  539,  516,  540,  519,  542,  520,  543,  521,
      544,  545,  548,  522,  523,  550,  526,  527,  528,  551,
        0,  552,  553,  531,  532,  555,  536,  556,  558,  537,
      556,  557,  539,  559,  540,  564,  542,  566,  543,  544,
      568,  545,  548,  569,  572,  550,  570,  571,  571,  551,
      552,  574,  553,  576,  555,  580,  582,  556,  558,  556,
      557,  581,  583,  559,  584,  564,  566,  585,  588,  568,
      586,  589,  591,  569,  572,  570,  571,  571,  590,  592,
      596,  574,  576,  594,  595,  580,  582,  598,    0,  599,

      581,  600,  583,  604,  584,  608,  609,  585,  588,  586,
      610,  589,  591,  611,  612,  617,  618,  590,  619,  592,
      596,  621,  594,  595,  623,  625,  627,  598,  599,  626,
      628,  600,  629,  604,  608,  609,  630,    0,  631,  634,
      610,  635,  640,  611,  612,  617,  618,  641,  619,  642,
      643,  621,    0,    0,  623,  625,  627,    0,  626,    0,
      628,  629,    0,    0,    0,    0,  630,  631,    0,  634,
      635,  640,    0,    0,    0,    0,    0,  641,    0,  642,
      643,  646,  646,  646,  646,  646,  646,  646,  646,  646,
      647,  647,  647,  647,  647,  647,  647,  647,  647,  648,

      648,  648,  648,  648,  648,  648,  648,  648,  649,    0,
      649,  649,  649,  649,  649,    0,  649,  650,    0,    0,
      650,  650,  650,  650,  650,  650,  651,  651,  652,  652,
      652,    0,  652,  652,  652,  652,  652,  653,  653,  653,
      653,  653,  653,  653,  653,  654,  654,  654,  654,    0,
      654,  654,  654,  654,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,

      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sqlparser_sql2003.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "sqlparser_sql2003.l"

#include "node.h"
#include "sqlparser_sql2003_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>

std::string escape_double_quotation(const std::string& src) {
    std::string ret = "";
    for (size_t i = 0; i < src.length(); ++i) {
        if (src[i] == '"' && src[1+i] == '"') {
            ret += '"';
            ++i;    // skip one
        }
        else
            ret += src[i];
    }
    return ret;
}

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#define TOKEN(name) { return SQL2003_##name; }
#define YYSTYPE         SQL2003_STYPE
#define YYLTYPE         SQL2003_LTYPE

#line 1236 "sqlparser_sql2003_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1249 "sqlparser_sql2003_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 117 "sqlparser_sql2003.l"

#line 1536 "sqlparser_sql2003_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 646 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 645 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 118 "sqlparser_sql2003.l"
TOKEN(ALL)              /* SQL-2003-R */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 119 "sqlparser_sql2003.l"
TOKEN(AND)              /* SQL-2003-R */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 120 "sqlparser_sql2003.l"
TOKEN(ANY)              /* SQL-2003-R */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 121 "sqlparser_sql2003.l"
TOKEN(ARRAY)            /* SQL-2003-R */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 122 "sqlparser_sql2003.l"
TOKEN(AS)               /* SQL-2003-R */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 123 "sqlparser_sql2003.l"
TOKEN(ASC)              /* SQL-2003-N */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 124 "sqlparser_sql2003.l"
TOKEN(AVG)              /* SQL-2003-N */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 125 "sqlparser_sql2003.l"
TOKEN(BETWEEN)          /* SQL-2003-R */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 126 "sqlparser_sql2003.l"
TOKEN(BIGINT)           /* SQL-2003-R */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 127 "sqlparser_sql2003.l"
TOKEN(BINARY)           /* SQL-2003-R */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 128 "sqlparser_sql2003.l"
TOKEN(BLOB)             /* SQL-2003-R */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 129 "sqlparser_sql2003.l"
TOKEN(BOOLEAN)          /* SQL-2003-R */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 130 "sqlparser_sql2003.l"
TOKEN(BY)               /* SQL-2003-R */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 131 "sqlparser_sql2003.l"
TOKEN(CASE)             /* SQL-2003-R */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 132 "sqlparser_sql2003.l"
TOKEN(CAST)             /* SQL-2003-R */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 133 "sqlparser_sql2003.l"
TOKEN(CALL)             /* SQL-2003-R */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 134 "sqlparser_sql2003.l"
TOKEN(CHAR)             /* SQL-2003-R */
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 135 "sqlparser_sql2003.l"
TOKEN(CHARACTER)        /* SQL-2003-R */
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 136 "sqlparser_sql2003.l"
TOKEN(CHARACTERS)       /* SQL-2003-N */
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 137 "sqlparser_sql2003.l"
TOKEN(CLOB)             /* SQL-2003-R */
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 138 "sqlparser_sql2003.l"
TOKEN(COALESCE)         /* SQL-2003-N */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 139 "sqlparser_sql2003.l"
TOKEN(CODE_UNITS)       /* SQL-2003-N */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 140 "sqlparser_sql2003.l"
TOKEN(COLLATE)          /* SQL-2003-R */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 141 "sqlparser_sql2003.l"
TOKEN(CONVERT)          /* SQL-2003-N */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 142 "sqlparser_sql2003.l"
TOKEN(CORRESPONDING)    /* SQL-2003-R */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 143 "sqlparser_sql2003.l"
TOKEN(COUNT)            /* SQL-2003-N */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 144 "sqlparser_sql2003.l"
TOKEN(CROSS)            /* SQL-2003-R */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 145 "sqlparser_sql2003.l"
TOKEN(CUME_DIST)        /* SQL-2003-N */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 146 "sqlparser_sql2003.l"
TOKEN(CURRENT)          /* SQL-2003-R */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 147 "sqlparser_sql2003.l"
TOKEN(CURRENT_TIMESTAMP)/* SQL-2003-R */
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 148 "sqlparser_sql2003.l"
TOKEN(CURRENT_USER)     /* SQL-2003-R */
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 149 "sqlparser_sql2003.l"
TOKEN(DATE)             /* SQL-2003-R */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 150 "sqlparser_sql2003.l"
TOKEN(DAY)              /* SQL-2003-R */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 151 "sqlparser_sql2003.l"
TOKEN(DEC)              /* SQL-2003-R */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 152 "sqlparser_sql2003.l"
TOKEN(DECIMAL)          /* SQL-2003-R */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 153 "sqlparser_sql2003.l"
TOKEN(DEFAULT)          /* SQL-2003-R */
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 154 "sqlparser_sql2003.l"
TOKEN(DELETE)           /* SQL-2003-R */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 155 "sqlparser_sql2003.l"
TOKEN(DENSE_RANK)       /* SQL-2003-N */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 156 "sqlparser_sql2003.l"
TOKEN(DESC)             /* SQL-2003-N */
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 157 "sqlparser_sql2003.l"
TOKEN(DISTINCT)         /* SQL-2003-R */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 158 "sqlparser_sql2003.l"
TOKEN(DOUBLE)           /* SQL-2003-R */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 159 "sqlparser_sql2003.l"
TOKEN(ELSE)             /* SQL-2003-R */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 160 "sqlparser_sql2003.l"
TOKEN(END)              /* SQL-2003-R */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 161 "sqlparser_sql2003.l"
TOKEN(END_P)            /* LEX-INNER  */
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 162 "sqlparser_sql2003.l"
TOKEN(ESCAPE)           /* SQL-2003-R */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 163 "sqlparser_sql2003.l"
TOKEN(EXCEPT)           /* SQL-2003-R */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 164 "sqlparser_sql2003.l"
TOKEN(EXCLUDE)          /* SQL-2003-N */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 165 "sqlparser_sql2003.l"
TOKEN(EXISTS)           /* SQL-2003-R */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 166 "sqlparser_sql2003.l"
TOKEN(FLOAT)            /* SQL-2003-R */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 167 "sqlparser_sql2003.l"
TOKEN(FOLLOWING)        /* SQL-2003-N */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 168 "sqlparser_sql2003.l"
TOKEN(FOR)              /* SQL-2003-R */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 169 "sqlparser_sql2003.l"
TOKEN(FROM)             /* SQL-2003-R */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 170 "sqlparser_sql2003.l"
TOKEN(FULL)             /* SQL-2003-R */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 171 "sqlparser_sql2003.l"
TOKEN(G)                /* SQL-2003-N */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 172 "sqlparser_sql2003.l"
TOKEN(GROUP)            /* SQL-2003-R */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 173 "sqlparser_sql2003.l"
TOKEN(GROUPING)         /* SQL-2003-R */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 174 "sqlparser_sql2003.l"
TOKEN(HAVING)           /* SQL-2003-R */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 175 "sqlparser_sql2003.l"
TOKEN(HOUR)             /* SQL-2003-R */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 176 "sqlparser_sql2003.l"
TOKEN(IN)               /* SQL-2003-R */
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 177 "sqlparser_sql2003.l"
TOKEN(INNER)            /* SQL-2003-R */
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 178 "sqlparser_sql2003.l"
TOKEN(INSERT)           /* SQL-2003-R */
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 179 "sqlparser_sql2003.l"
TOKEN(INT)              /* SQL-2003-R */
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 180 "sqlparser_sql2003.l"
TOKEN(INTEGER)          /* SQL-2003-R */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 181 "sqlparser_sql2003.l"
TOKEN(INTERSECT)        /* SQL-2003-R */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 182 "sqlparser_sql2003.l"
TOKEN(INTERVAL)         /* SQL-2003-R */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 183 "sqlparser_sql2003.l"
TOKEN(INTO)             /* SQL-2003-R */
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 184 "sqlparser_sql2003.l"
TOKEN(IS)               /* SQL-2003-R */
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 185 "sqlparser_sql2003.l"
TOKEN(JOIN)             /* SQL-2003-R */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 186 "sqlparser_sql2003.l"
TOKEN(K)                /* SQL-2003-N */
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 187 "sqlparser_sql2003.l"
TOKEN(LARGE)            /* SQL-2003-R */
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 188 "sqlparser_sql2003.l"
TOKEN(LEFT)             /* SQL-2003-R */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 189 "sqlparser_sql2003.l"
TOKEN(LIKE)             /* SQL-2003-R */
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 190 "sqlparser_sql2003.l"
TOKEN(M)                /* SQL-2003-N */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 191 "sqlparser_sql2003.l"
TOKEN(MAX)              /* SQL-2003-N */
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 192 "sqlparser_sql2003.l"
TOKEN(MIN)              /* SQL-2003-N */
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 193 "sqlparser_sql2003.l"
TOKEN(MINUTE)           /* SQL-2003-R */
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 194 "sqlparser_sql2003.l"
TOKEN(MOD)              /* SQL-2003-N, here is reserved as an operator */
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 195 "sqlparser_sql2003.l"
TOKEN(MONTH)            /* SQL-2003-R */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 196 "sqlparser_sql2003.l"
TOKEN(MULTISET)         /* SQL-2003-R */
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 197 "sqlparser_sql2003.l"
TOKEN(NATIONAL)         /* SQL-2003-R */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 198 "sqlparser_sql2003.l"
TOKEN(NATURAL)          /* SQL-2003-R */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 199 "sqlparser_sql2003.l"
TOKEN(NCHAR)            /* SQL-2003-R */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 200 "sqlparser_sql2003.l"
TOKEN(NCLOB)            /* SQL-2003-R */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 201 "sqlparser_sql2003.l"
TOKEN(NO)               /* SQL-2003-R */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 202 "sqlparser_sql2003.l"
TOKEN(NOT)              /* SQL-2003-R */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 203 "sqlparser_sql2003.l"
TOKEN(NULLIF)           /* SQL-2003-N */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 204 "sqlparser_sql2003.l"
TOKEN(NUMERIC)          /* SQL-2003-R */
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 205 "sqlparser_sql2003.l"
TOKEN(OBJECT)           /* SQL-2003-N */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 206 "sqlparser_sql2003.l"
TOKEN(OCTETS)           /* SQL-2003-N */
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 207 "sqlparser_sql2003.l"
TOKEN(OF)               /* SQL-2003-R */
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 208 "sqlparser_sql2003.l"
TOKEN(ON)               /* SQL-2003-R */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 209 "sqlparser_sql2003.l"
TOKEN(ONLY)             /* SQL-2003-R */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 210 "sqlparser_sql2003.l"
TOKEN(OR)               /* SQL-2003-R */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 211 "sqlparser_sql2003.l"
TOKEN(ORDER)            /* SQL-2003-R */
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 212 "sqlparser_sql2003.l"
TOKEN(OTHERS)           /* SQL-2003-N */
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 213 "sqlparser_sql2003.l"
TOKEN(OUTER)            /* SQL-2003-R */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 214 "sqlparser_sql2003.l"
TOKEN(OVER)             /* SQL-2003-R */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 215 "sqlparser_sql2003.l"
TOKEN(PARTITION)        /* SQL-2003-R */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 216 "sqlparser_sql2003.l"
TOKEN(PERCENT_RANK)     /* SQL-2003-N */
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 217 "sqlparser_sql2003.l"
TOKEN(PRECEDING)        /* SQL-2003-N */
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 218 "sqlparser_sql2003.l"
TOKEN(PRECISION)        /* SQL-2003-R */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 219 "sqlparser_sql2003.l"
TOKEN(RANGE)            /* SQL-2003-R */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 220 "sqlparser_sql2003.l"
TOKEN(RANK)             /* SQL-2003-N */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 221 "sqlparser_sql2003.l"
TOKEN(READ)             /* SQL-2003-N */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 222 "sqlparser_sql2003.l"
TOKEN(REAL)             /* SQL-2003-R */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 223 "sqlparser_sql2003.l"
TOKEN(RECURSIVE)        /* SQL-2003-R */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 224 "sqlparser_sql2003.l"
TOKEN(REF)              /* SQL-2003-R */
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 225 "sqlparser_sql2003.l"
TOKEN(RIGHT)            /* SQL-2003-R */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 226 "sqlparser_sql2003.l"
TOKEN(ROW)              /* SQL-2003-R */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 227 "sqlparser_sql2003.l"
TOKEN(ROWS)             /* SQL-2003-R */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 228 "sqlparser_sql2003.l"
TOKEN(ROW_NUMBER)       /* SQL-2003-N */
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 229 "sqlparser_sql2003.l"
TOKEN(SCOPE)            /* SQL-2003-? */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 230 "sqlparser_sql2003.l"
TOKEN(SECOND)           /* SQL-2003-R */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 231 "sqlparser_sql2003.l"
TOKEN(SELECT)           /* SQL-2003-R */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 232 "sqlparser_sql2003.l"
TOKEN(SESSION_USER)     /* SQL-2003-R */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 233 "sqlparser_sql2003.l"
TOKEN(SET)              /* SQL-2003-R */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 234 "sqlparser_sql2003.l"
TOKEN(SETS)             /* SQL-2003-N */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 235 "sqlparser_sql2003.l"
TOKEN(SMALLINT)         /* SQL-2003-R */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 236 "sqlparser_sql2003.l"
TOKEN(SOME)             /* SQL-2003-R */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 237 "sqlparser_sql2003.l"
TOKEN(STDDEV_POP)       /* SQL-2003-N */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 238 "sqlparser_sql2003.l"
TOKEN(STDDEV_SAMP)      /* SQL-2003-N */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 239 "sqlparser_sql2003.l"
TOKEN(SUM)              /* SQL-2003-N */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 240 "sqlparser_sql2003.l"
TOKEN(SYSTEM_USER)      /* SQL-2003-R */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 241 "sqlparser_sql2003.l"
TOKEN(THEN)             /* SQL-2003-R */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 242 "sqlparser_sql2003.l"
TOKEN(TIES)             /* SQL-2003-N */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 243 "sqlparser_sql2003.l"
TOKEN(TIME)             /* SQL-2003-R */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 244 "sqlparser_sql2003.l"
TOKEN(TIMESTAMP)        /* SQL-2003-R */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 245 "sqlparser_sql2003.l"
TOKEN(TO)               /* SQL-2003-R */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 246 "sqlparser_sql2003.l"
TOKEN(UNBOUNDED)        /* SQL-2003-N */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 247 "sqlparser_sql2003.l"
TOKEN(UNION)            /* SQL-2003-R */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 248 "sqlparser_sql2003.l"
TOKEN(UPDATE)           /* SQL-2003-R */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 249 "sqlparser_sql2003.l"
TOKEN(USING)            /* SQL-2003-R */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 250 "sqlparser_sql2003.l"
TOKEN(VALUES)           /* SQL-2003-R */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 251 "sqlparser_sql2003.l"
TOKEN(VARCHAR)          /* SQL-2003-R */
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 252 "sqlparser_sql2003.l"
TOKEN(VARYING)          /* SQL-2003-R */
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 253 "sqlparser_sql2003.l"
TOKEN(VAR_POP)          /* SQL-2003-R */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 254 "sqlparser_sql2003.l"
TOKEN(VAR_SAMP)         /* SQL-2003-R */
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 255 "sqlparser_sql2003.l"
TOKEN(WHEN)             /* SQL-2003-R */
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 256 "sqlparser_sql2003.l"
TOKEN(WHERE)            /* SQL-2003-R */
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 257 "sqlparser_sql2003.l"
TOKEN(WITH)             /* SQL-2003-R */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 258 "sqlparser_sql2003.l"
TOKEN(WITHOUT)          /* SQL-2003-R */
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 259 "sqlparser_sql2003.l"
TOKEN(YEAR)             /* SQL-2003-R */
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 260 "sqlparser_sql2003.l"
TOKEN(ZONE)             /* SQL-2003-N */
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 262 "sqlparser_sql2003.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return SQL2003_NULLX;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 267 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    return SQL2003_INTNUM;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 273 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return SQL2003_INTNUM;
}
	YY_BREAK
case 147:
#line 283 "sqlparser_sql2003.l"
case 148:
#line 284 "sqlparser_sql2003.l"
case 149:
YY_RULE_SETUP
#line 284 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return SQL2003_APPROXNUM;
}
	YY_BREAK
case 150:
#line 292 "sqlparser_sql2003.l"
case 151:
YY_RULE_SETUP
#line 292 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return SQL2003_APPROXNUM;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 299 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return SQL2003_BOOL;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 306 "sqlparser_sql2003.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return SQL2003_UNKNOWN;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 311 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return SQL2003_BOOL;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 318 "sqlparser_sql2003.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 324 "sqlparser_sql2003.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "N'";
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 330 "sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << "''";
}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 334 "sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 338 "sqlparser_sql2003.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return SQL2003_STRING;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 347 "sqlparser_sql2003.l"
{
  fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return SQL2003_ERROR;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 352 "sqlparser_sql2003.l"
{
    BEGIN(sb);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '[';
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 358 "sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << "]]";
}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 362 "sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 366 "sqlparser_sql2003.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << ']';
    std::string text = ((ParseResult*)yyextra)->buf_.str();
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, text.c_str());
    nd->terminalToken_.str = text.substr(1, text.length() - 2);
    yylval->node = nd;
    return SQL2003_NAME;
}
	YY_BREAK
case YY_STATE_EOF(sb):
#line 376 "sqlparser_sql2003.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unterminated identifier WITH '['\n");
    return SQL2003_ERROR;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 382 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = escape_double_quotation(std::string(yytext+1, yytext + strlen(yytext) - 1));    /* todo convert "" */
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return SQL2003_NAME;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 391 "sqlparser_sql2003.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return SQL2003_NAME;
}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 400 "sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 401 "sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 403 "sqlparser_sql2003.l"
{ return yytext[0];}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 405 "sqlparser_sql2003.l"
{ return SQL2003_CNNOP; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 406 "sqlparser_sql2003.l"
{ return SQL2003_COMP_EQ; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 407 "sqlparser_sql2003.l"
{ return SQL2003_COMP_GE; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 408 "sqlparser_sql2003.l"
{ return SQL2003_COMP_GT; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 409 "sqlparser_sql2003.l"
{ return SQL2003_COMP_LE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 410 "sqlparser_sql2003.l"
{ return SQL2003_COMP_LT; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 411 "sqlparser_sql2003.l"
{ return SQL2003_COMP_NE; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 412 "sqlparser_sql2003.l"
{ return SQL2003_COMP_NE; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 414 "sqlparser_sql2003.l"

	YY_BREAK
case 178:
YY_RULE_SETUP
#line 416 "sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return SQL2003_QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
#line 423 "sqlparser_sql2003.l"
{ return SQL2003_END_P; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 425 "sqlparser_sql2003.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return SQL2003_ERROR;   /* todo ignore or return ERROR */
}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 429 "sqlparser_sql2003.l"
ECHO;
	YY_BREAK
#line 2594 "sqlparser_sql2003_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 646 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 646 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 645);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 429 "sqlparser_sql2003.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return SQL2003_ERROR;
}

