#line 2 "sqlparser_sql2003_flex.cpp"

#line 4 "sqlparser_sql2003_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define sql2003__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sql2003__create_buffer
#endif

#ifdef yy_delete_buffer
#define sql2003__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sql2003__delete_buffer
#endif

#ifdef yy_scan_buffer
#define sql2003__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sql2003__scan_buffer
#endif

#ifdef yy_scan_string
#define sql2003__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sql2003__scan_string
#endif

#ifdef yy_scan_bytes
#define sql2003__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sql2003__scan_bytes
#endif

#ifdef yy_init_buffer
#define sql2003__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sql2003__init_buffer
#endif

#ifdef yy_flush_buffer
#define sql2003__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sql2003__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sql2003__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sql2003__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sql2003__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sql2003__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define sql2003_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state sql2003_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define sql2003_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state sql2003_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define sql2003_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack sql2003_ensure_buffer_stack
#endif

#ifdef yylex
#define sql2003_lex_ALREADY_DEFINED
#else
#define yylex sql2003_lex
#endif

#ifdef yyrestart
#define sql2003_restart_ALREADY_DEFINED
#else
#define yyrestart sql2003_restart
#endif

#ifdef yylex_init
#define sql2003_lex_init_ALREADY_DEFINED
#else
#define yylex_init sql2003_lex_init
#endif

#ifdef yylex_init_extra
#define sql2003_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra sql2003_lex_init_extra
#endif

#ifdef yylex_destroy
#define sql2003_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy sql2003_lex_destroy
#endif

#ifdef yyget_debug
#define sql2003_get_debug_ALREADY_DEFINED
#else
#define yyget_debug sql2003_get_debug
#endif

#ifdef yyset_debug
#define sql2003_set_debug_ALREADY_DEFINED
#else
#define yyset_debug sql2003_set_debug
#endif

#ifdef yyget_extra
#define sql2003_get_extra_ALREADY_DEFINED
#else
#define yyget_extra sql2003_get_extra
#endif

#ifdef yyset_extra
#define sql2003_set_extra_ALREADY_DEFINED
#else
#define yyset_extra sql2003_set_extra
#endif

#ifdef yyget_in
#define sql2003_get_in_ALREADY_DEFINED
#else
#define yyget_in sql2003_get_in
#endif

#ifdef yyset_in
#define sql2003_set_in_ALREADY_DEFINED
#else
#define yyset_in sql2003_set_in
#endif

#ifdef yyget_out
#define sql2003_get_out_ALREADY_DEFINED
#else
#define yyget_out sql2003_get_out
#endif

#ifdef yyset_out
#define sql2003_set_out_ALREADY_DEFINED
#else
#define yyset_out sql2003_set_out
#endif

#ifdef yyget_leng
#define sql2003_get_leng_ALREADY_DEFINED
#else
#define yyget_leng sql2003_get_leng
#endif

#ifdef yyget_text
#define sql2003_get_text_ALREADY_DEFINED
#else
#define yyget_text sql2003_get_text
#endif

#ifdef yyget_lineno
#define sql2003_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno sql2003_get_lineno
#endif

#ifdef yyset_lineno
#define sql2003_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno sql2003_set_lineno
#endif

#ifdef yyget_column
#define sql2003_get_column_ALREADY_DEFINED
#else
#define yyget_column sql2003_get_column
#endif

#ifdef yyset_column
#define sql2003_set_column_ALREADY_DEFINED
#else
#define yyset_column sql2003_set_column
#endif

#ifdef yywrap
#define sql2003_wrap_ALREADY_DEFINED
#else
#define yywrap sql2003_wrap
#endif

#ifdef yyget_lval
#define sql2003_get_lval_ALREADY_DEFINED
#else
#define yyget_lval sql2003_get_lval
#endif

#ifdef yyset_lval
#define sql2003_set_lval_ALREADY_DEFINED
#else
#define yyset_lval sql2003_set_lval
#endif

#ifdef yyget_lloc
#define sql2003_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc sql2003_get_lloc
#endif

#ifdef yyset_lloc
#define sql2003_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc sql2003_set_lloc
#endif

#ifdef yyalloc
#define sql2003_alloc_ALREADY_DEFINED
#else
#define yyalloc sql2003_alloc
#endif

#ifdef yyrealloc
#define sql2003_realloc_ALREADY_DEFINED
#else
#define yyrealloc sql2003_realloc
#endif

#ifdef yyfree
#define sql2003_free_ALREADY_DEFINED
#else
#define yyfree sql2003_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define sql2003_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 172
#define YY_END_OF_BUFFER 173
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[614] =
    {   0,
      169,  169,    0,    0,  150,  150,  154,  154,  173,  171,
      159,  159,  160,  171,  158,  160,  147,  160,  160,  160,
      138,  138,  166,  162,  164,  170,  157,  157,  157,  157,
      157,  157,   51,  157,  157,  157,   66,  157,   70,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  152,  160,  172,  150,  151,  154,  155,  159,  168,
        0,    0,  158,  158,  143,    0,  142,  138,    0,    0,
      165,  167,  163,  157,  157,  157,  157,    5,  157,  157,
      157,  157,  157,   13,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,

      157,  157,  157,  157,  157,  157,   56,   64,  157,  157,
      157,  157,  157,  157,  157,  157,  148,  157,  157,  157,
      157,  157,  157,   86,   87,   89,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  120,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  161,  150,  149,  154,  153,  156,    0,
        0,  142,    0,    0,  139,  137,    1,    2,    3,  157,
        6,    7,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,   31,
       32,  157,  157,  157,  157,  157,  157,  157,   41,  157,

      157,  157,  157,  157,  157,   48,  157,  157,  157,  157,
      157,  157,  157,   59,  157,  157,  157,  157,   71,   72,
       74,  157,  157,  157,  157,  157,   81,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      101,  157,  103,  157,  157,  157,  157,  110,  157,  157,
      157,  115,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,    0,  141,    0,
        0,  140,  157,  157,  157,  157,   11,  157,   14,   15,
       16,   19,  157,  157,  157,  157,  157,  157,  157,  157,
       30,  157,  157,  157,  157,   37,  157,  157,   40,  157,

      157,  157,  157,  157,  157,  157,   49,   50,  157,  157,
       55,  157,  157,  157,   63,   65,  157,   68,   69,  157,
      157,  157,  157,  157,  157,  157,  136,  157,  157,  157,
       88,  157,  157,   92,  157,  157,  157,   97,   98,   99,
      157,  157,  104,  157,  157,  157,  157,  157,  157,  112,
      157,  157,  117,  118,  144,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  130,  157,  132,  134,  135,    0,
        4,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,   25,   26,  157,  157,  157,  157,  157,  157,  157,
       42,  157,  157,  157,  146,   46,  157,   52,  157,   57,

      157,  157,  157,   67,  157,   75,  157,  157,  157,   79,
       80,  157,  157,  157,  157,   90,   91,  157,  157,  157,
       96,  157,  102,  157,  106,  157,  157,  157,  157,  157,
      157,  157,  157,  122,  157,  157,  124,  157,  157,  157,
      157,  157,  131,  157,  158,  157,    9,   10,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,   35,  157,
      157,   39,   43,   44,   45,  157,  157,   54,   58,  157,
      157,  157,   73,  157,  157,  157,   82,  157,   84,   85,
      157,  157,  157,  157,  157,  107,  108,  157,  157,  157,
      157,  157,  157,  157,  123,  125,  157,  157,  157,  157,

      157,    8,   12,  157,  157,  157,   22,   23,  157,   27,
       33,   34,  157,  157,  157,  157,   60,  157,  157,  157,
      157,   78,   83,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  145,  126,  127,  128,  157,  133,
      157,   20,  157,  157,  157,  157,   38,  157,   53,  157,
       62,   76,   77,  157,  157,  157,  157,  157,  157,  111,
      157,  157,  157,  157,  157,  129,   17,  157,  157,  157,
      157,  157,   47,   61,   93,   94,   95,  100,  157,  157,
      157,  157,  157,  119,  121,   18,   21,  157,  157,  157,
       36,  105,  157,  113,  157,  157,  157,  157,  157,  157,

      114,  116,  157,  157,   29,  109,   24,  157,  157,  157,
      157,   28,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    8,    8,    9,    8,
        8,   10,   11,    8,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    1,    8,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,    8,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   37,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,   76,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    5,
        6,    1,    1,    5,    7,    7,    1,    1,    1,    1,
        7,    7,    7,    7,    7,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    1,    9,   10,    8,
        7,    7,    7,    7,    7,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    1
    } ;

static const flex_int16_t yy_base[625] =
    {   0,
        0,    0,    0,    0,  536,  527,  398,  395,  330, 1309,
       75,   78,  307,  299,    0, 1309, 1309,  276,   68,  271,
       72,   76,   75, 1309,  256, 1309,   66,   77,  131,   89,
      126,  146,   48,   78,  107,   55,    0,  181,  174,  196,
      245,  153,    0,  225,  294,  235,  187,   74,  121,   71,
       82, 1309,  196, 1309,    0,  253,    0,  208,  153, 1309,
      235,  232,    0,    0,  227,    0,  288,  295,  280,    0,
     1309, 1309, 1309,    0,   91,  138,   97,  115,  150,  145,
      201,  165,  183,    0,  188,  208,  210,  348,  234,  239,
      286,  339,  239,  244,  250,  297,  299,  317,  291,  289,

      329,  293,  304,  309,  306,  315,  366,    0,  316,  341,
      355,  352,  343,  350,  385,  358, 1309,  348,  365,  364,
      389,  364,  385,    0,  366,  402,  389,  406,  398,  407,
      403,  417,  414,  402,  407,  437,  427,  417,  429,  422,
      407,  432,  426,    0,  422,  457,  440,  437,  459,  456,
      444,  461,  459, 1309,    0, 1309,    0, 1309,  228,  326,
        0,  485,  492,  317,  499,    0,    0,    0,    0,  474,
        0,    0,  455,  473,  496,  497,  488,  497,  486,  506,
      497,  505,  499,  491,  496,  501,  499,  501,  516,    0,
      513,  522,  519,  507,  525,  511,  532,  530,  174,  535,

      532,  525,  530,  549,  544,    0,  544,  547,  540,  553,
      550,  558,  564,  566,  556,  565,  554,  570,    0,  556,
        0,  559,  563,  575,  584,  573,    0,  579,  589,  593,
      599,  582,  604,  605,  595,  596,  614,  612,  618,  605,
        0,  612,  608,  613,  616,  627,  616,    0,  621,  632,
      637,    0,  623,  630,  641,  643,  636,  639,  643,  657,
      651,  647,  666,  659,  662,  657,  674,  687,  690,  212,
      694,  697,  669,  675,  684,  683,    0,  697,    0,    0,
      704,    0,  702,  136,  707,  706,  707,  694,  696,  711,
        0,  704,  698,  701,  717,    0,  715,  713,    0,  710,

      711,  713,  711,  728,  716,  719,    0,    0,  723,  726,
        0,  727,  731,  744,    0,    0,  748,    0,    0,  738,
      758,  758,  753,  743,  753,  770,  764,  757,  773,  759,
        0,  762,  764,    0,  768,  779,  780,    0,    0,    0,
      774,  773,    0,  772,  784,  780,  792,  790,  789,    0,
      800,  805,    0,  793,    0,  792,  803,  805,  803,  819,
      822,  820,  821,  817,    0,  827,  819,    0,    0,   93,
        0,  832,  819,  818,  843,  842,  829,  828,  831,  835,
      835,    0,    0,  832,  854,  847,  856,  126,  852,  864,
        0,  865,  853,  860,    0,    0,  858,  862,  877,    0,

      866,  882,  871,    0,  883,    0,  873,  880,  894,    0,
        0,  891,  889,  883,  885,    0,    0,  885,  902,  890,
        0,  892,    0,  891,    0,  903,  893,  901,  911,  901,
      913,  909,  916,    0,  912,  926,    0,  920,  942,  930,
      930,  946,    0,  928, 1309,  937,    0,    0,  939,  935,
      954,  945,  957,  945,  947,  946,  955,  949,    0,  952,
      968,    0,    0,    0,    0,  963,  962,    0,    0,  961,
      975,  981,    0,  980,  985,  976,    0,  987,    0,    0,
      982,  987,  991,  994,  991,    0,    0,  991,  993,  123,
      111, 1008, 1007,  999,    0,    0,  999, 1007, 1003, 1009,

     1004,    0,    0, 1020, 1022, 1019,    0,    0, 1014,   71,
        0,    0, 1030, 1016, 1018, 1031,    0, 1037, 1030, 1025,
     1035,    0,    0, 1033, 1036, 1036, 1032, 1054,   69, 1040,
     1047, 1046, 1051, 1064,    0,    0,    0,    0, 1055,    0,
     1055,    0, 1055, 1062, 1064, 1065,    0, 1075,    0, 1067,
        0,    0,    0, 1074, 1083, 1077, 1087, 1092, 1079,    0,
     1083, 1102, 1086, 1091, 1104,    0, 1091, 1092, 1111, 1108,
     1100, 1112,    0,    0,    0,    0,    0,    0, 1107, 1107,
     1114, 1118, 1127,    0,    0,    0,    0, 1126, 1123, 1136,
        0,    0, 1137,    0, 1127, 1128, 1130, 1144, 1133, 1134,

        0,    0, 1149, 1139,    0,    0,    0, 1139, 1162, 1151,
     1151,    0, 1309, 1217, 1227, 1237, 1247, 1257, 1261, 1269,
     1279, 1288,  104, 1298
    } ;

static const flex_int16_t yy_def[625] =
    {   0,
      613,    1,  614,  614,  615,  615,  616,  616,  613,  613,
      613,  613,  613,  617,  618,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  613,  613,  613,  620,  613,  621,  613,  613,  613,
      617,  613,  618,  618,  613,  622,  613,  613,  613,  623,
      613,  613,  613,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  613,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  613,  620,  613,  621,  613,  613,  613,
      624,  613,  613,  613,  613,  623,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  613,  613,  624,
      613,  613,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  613,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  613,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,    0,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613
    } ;

static const flex_int16_t yy_nxt[1386] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   16,
       16,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   43,   50,   51,   52,   10,   10,   43,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   44,   45,   46,   47,
       48,   49,   43,   50,   51,   53,   59,   59,   59,   59,
       59,   59,   65,   65,   67,  104,   68,   68,   67,  109,
       68,   68,   71,   72,  149,  152,   69,   75,  105,   76,

       69,   80,  370,   77,   78,   81,  445,   79,   82,   91,
      166,   83,  106,   92,  104,   70,  153,   93,  559,  109,
      545,   84,  167,   94,  149,  152,   69,   75,  105,   76,
       69,   80,   77,   78,  170,   81,   79,  171,   82,   91,
      107,   83,  106,   92,   70,  108,  153,   93,  150,  151,
       84,   85,  167,   94,   59,   59,   59,   95,   86,   96,
      532,  168,   87,  170,   97,   88,   99,  171,   89,   98,
      107,   90,  531,  129,  108,  460,  172,  100,  150,  151,
      101,   85,  169,  102,  173,  378,  103,   95,   86,   96,
      130,  168,   87,   97,  113,   88,   99,   89,   98,  176,

       90,  110,  114,  129,  117,  111,  172,  100,  115,  112,
      101,  169,  102,  173,  116,  103,  118,  177,  119,  130,
      146,  370,  147,  300,  113,  148,  178,  174,  179,  176,
      120,  110,  114,   61,  175,  111,  121,   61,  115,  112,
      159,   65,   65,  116,  180,  131,  118,  177,  119,  132,
      146,  160,  147,  133,  148,  178,  158,  174,  179,  134,
      120,  156,  142,  143,  175,  121,  122,  123,  187,  144,
      124,  154,  145,   73,  180,  131,  188,  196,  125,  132,
       66,  160,  126,  133,  197,  127,  128,   64,  198,  134,
      164,  164,  142,  143,  165,  165,  122,  123,  187,  144,

      124,  145,  162,  162,   62,  188,  196,   67,  125,   68,
       68,  126,  163,  197,  127,  128,  135,  198,  136,   69,
      199,  200,  203,  204,   60,  189,  137,  207,  138,  613,
      190,  165,  165,  139,  140,  208,  268,  268,  141,  201,
      269,  269,  163,  209,  215,  202,  135,  210,  136,   69,
      199,  200,  203,  204,  189,  211,  137,  207,  138,  190,
      205,  191,  139,  140,  192,  208,  206,  141,  181,  201,
      193,  182,  194,  209,  215,  202,  210,  195,  216,  183,
      217,  184,  218,  220,  211,  185,  219,  224,  186,  223,
      205,  191,  225,  230,  192,  206,  226,  232,  181,  212,

      193,  182,  194,  227,  213,  214,  195,  216,  221,  183,
      217,  184,  218,  220,  185,  219,  224,  186,  222,  223,
      228,  229,  225,  230,  231,  233,  226,  232,  234,  212,
      235,  237,  227,  213,  214,  236,  238,  239,  221,  240,
      242,  244,  241,   58,  243,  253,   58,  249,  222,  250,
      228,  229,  251,  231,  252,  233,  254,  234,  255,  245,
      235,  237,  256,  260,  236,  261,  238,  239,  246,  240,
      242,  244,  241,  243,  253,  247,  248,  249,  257,  250,
      264,  266,  251,  265,  252,  258,  254,  259,  255,  245,
      262,  256,  267,  260,  273,  261,  263,  274,  246,  162,

      162,  275,  271,  271,  247,  248,  272,  272,  257,  163,
      264,  266,  265,  165,  165,  258,  276,  259,  277,  278,
      262,  279,  267,  281,  273,  263,  274,  282,  283,  284,
      285,  275,  286,  287,  288,   56,  280,  289,  290,  163,
      291,  292,  293,  294,   56,  295,  276,  296,  277,  278,
      297,  279,  281,  298,  299,  301,  302,  282,  283,  284,
      285,  286,  287,  303,  288,  280,  289,  290,  304,  305,
      291,  292,  293,  294,  295,  306,  307,  296,  308,  297,
      309,  310,  312,  298,  299,  301,  302,  311,  313,  316,
      314,  317,  303,  318,  319,  613,  320,  304,  321,  305,

      315,  613,  322,  323,  325,  306,  307,  326,  308,  309,
      327,  310,  312,  328,  613,  324,  311,  329,  313,  316,
      314,  317,  318,  330,  319,  320,  331,  321,  332,  333,
      315,  322,  334,  323,  325,  335,  336,  326,  337,  342,
      327,  339,  338,  328,  324,  341,  343,  329,  345,  340,
      346,  347,  349,  330,  348,  331,  350,  344,  332,  333,
      351,  334,  352,  353,  335,  354,  336,  355,  337,  342,
      356,  339,  338,  357,  341,  343,  358,  359,  345,  340,
      346,  347,  349,  348,  360,  613,  350,  361,  362,  367,
      351,  352,  365,  353,  368,  354,  366,  355,  369,  372,

      356,  269,  269,  357,  269,  269,  358,  359,  272,  272,
      363,  272,  272,  371,  360,  364,  361,  373,  362,  367,
      374,  375,  365,  368,  376,  366,  377,  379,  369,  372,
      380,  381,  613,  382,  383,  384,  385,  613,  386,  363,
      387,  388,  371,  389,  390,  391,  392,  373,  393,  374,
      394,  375,  395,  397,  376,  396,  377,  379,  398,  399,
      380,  381,  382,  383,  400,  384,  385,  386,  401,  387,
      402,  388,  404,  389,  390,  391,  392,  405,  393,  394,
      409,  403,  395,  397,  396,  406,  407,  408,  398,  399,
      410,  411,  412,  400,  413,  414,  418,  401,  415,  416,

      402,  417,  404,  419,  421,  424,  405,  420,  425,  409,
      403,  422,  423,  426,  427,  406,  407,  408,  428,  410,
      429,  411,  412,  413,  430,  414,  418,  415,  416,  431,
      417,  432,  433,  419,  421,  424,  434,  420,  425,  435,
      422,  423,  436,  426,  427,  437,  438,  439,  428,  440,
      429,  443,  441,  444,  430,  442,  446,  613,  447,  431,
      432,  433,  448,  449,  450,  456,  434,  451,  452,  435,
      453,  436,  454,  455,  457,  437,  438,  439,  458,  440,
      459,  443,  441,  444,  442,  461,  446,  447,  462,  463,
      467,  448,  464,  449,  450,  456,  451,  452,  465,  453,

      466,  454,  455,  468,  457,  469,  470,  473,  458,  471,
      459,  474,  472,  475,  476,  461,  477,  478,  462,  463,
      467,  464,  479,  480,  481,  482,  486,  465,  483,  466,
      484,  485,  487,  468,  469,  488,  470,  473,  471,  489,
      474,  472,  490,  475,  476,  491,  477,  478,  492,  493,
      495,  479,  480,  481,  494,  482,  486,  483,  496,  484,
      485,  487,  497,  498,  499,  488,  500,  613,  501,  489,
      502,  490,  503,  613,  504,  491,  505,  492,  506,  493,
      495,  507,  509,  494,  508,  510,  511,  496,  512,  513,
      514,  515,  497,  498,  499,  516,  500,  501,  517,  518,

      502,  519,  503,  504,  520,  521,  505,  522,  506,  523,
      524,  507,  509,  508,  510,  525,  511,  512,  513,  526,
      514,  515,  527,  528,  529,  516,  530,  517,  533,  518,
      534,  519,  535,  537,  520,  521,  536,  522,  538,  523,
      524,  539,  613,  540,  541,  525,  542,  543,  544,  526,
      546,  548,  527,  528,  529,  547,  530,  549,  533,  550,
      534,  551,  535,  537,  552,  536,  553,  554,  538,  555,
      556,  539,  540,  557,  541,  558,  542,  543,  544,  560,
      546,  548,  561,  564,  547,  562,  563,  549,  565,  550,
      566,  551,  567,  552,  568,  569,  553,  554,  572,  555,

      556,  573,  557,  570,  571,  558,  574,  575,  560,  576,
      577,  578,  561,  564,  562,  563,  579,  581,  565,  580,
      566,  567,  582,  568,  583,  569,  584,  585,  572,  586,
      587,  573,  570,  571,  588,  574,  589,  575,  590,  576,
      577,  578,  591,  613,  592,  593,  579,  581,  580,  594,
      595,  596,  582,  583,  597,  598,  584,  585,  586,  587,
      599,  600,  601,  603,  588,  602,  589,  590,  604,  613,
      605,  606,  591,  592,  593,  607,  613,  608,  609,  594,
      595,  596,  610,  611,  597,  598,  612,  613,  613,  613,
      599,  600,  601,  603,  602,  613,  613,  613,  604,  605,

      606,  613,  613,  613,  613,  607,  608,  609,  613,  613,
      613,  613,  610,  611,  613,  613,  612,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   61,  613,   61,
       61,   61,   61,   61,   61,  613,   61,   63,  613,  613,
       63,   63,   63,   63,   63,   63,   63,   74,   74,  155,
      155,  155,  613,  155,  155,  155,  155,  155,  155,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  161,  161,
      161,  161,  161,  613,  161,  161,  161,  161,  270,  270,

      270,  270,  613,  270,  270,  270,  270,  270,    9,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613
    } ;

static const flex_int16_t yy_chk[1386] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   11,   11,   11,   12,
       12,   12,   19,   19,   21,   33,   21,   21,   22,   36,
       22,   22,   23,   23,   48,   50,   21,   27,   34,   27,

       22,   28,  370,   27,   27,   28,  370,   27,   28,   30,
      623,   28,   34,   30,   33,   21,   51,   30,  529,   36,
      510,   28,   75,   30,   48,   50,   21,   27,   34,   27,
       22,   28,   27,   27,   77,   28,   27,   78,   28,   30,
       35,   28,   34,   30,   21,   35,   51,   30,   49,   49,
       28,   29,   75,   30,   59,   59,   59,   31,   29,   31,
      491,   76,   29,   77,   31,   29,   32,   78,   29,   31,
       35,   29,  490,   42,   35,  388,   79,   32,   49,   49,
       32,   29,   76,   32,   80,  284,   32,   31,   29,   31,
       42,   76,   29,   31,   39,   29,   32,   29,   31,   82,

       29,   38,   39,   42,   40,   38,   79,   32,   39,   38,
       32,   76,   32,   80,   39,   32,   40,   83,   40,   42,
       47,  270,   47,  199,   39,   47,   85,   81,   86,   82,
       40,   38,   39,  159,   81,   38,   40,   62,   39,   38,
       61,   65,   65,   39,   87,   44,   40,   83,   40,   44,
       47,   65,   47,   44,   47,   85,   58,   81,   86,   44,
       40,   56,   46,   46,   81,   40,   41,   41,   89,   46,
       41,   53,   46,   25,   87,   44,   90,   93,   41,   44,
       20,   65,   41,   44,   94,   41,   41,   18,   95,   44,
       69,   69,   46,   46,   69,   69,   41,   41,   89,   46,

       41,   46,   67,   67,   14,   90,   93,   68,   41,   68,
       68,   41,   67,   94,   41,   41,   45,   95,   45,   68,
       96,   97,   99,  100,   13,   91,   45,  102,   45,    9,
       91,  164,  164,   45,   45,  103,  160,  160,   45,   98,
      160,  160,   67,  104,  109,   98,   45,  105,   45,   68,
       96,   97,   99,  100,   91,  106,   45,  102,   45,   91,
      101,   92,   45,   45,   92,  103,  101,   45,   88,   98,
       92,   88,   92,  104,  109,   98,  105,   92,  110,   88,
      111,   88,  112,  114,  106,   88,  113,  118,   88,  116,
      101,   92,  119,  122,   92,  101,  119,  125,   88,  107,

       92,   88,   92,  120,  107,  107,   92,  110,  115,   88,
      111,   88,  112,  114,   88,  113,  118,   88,  115,  116,
      121,  121,  119,  122,  123,  126,  119,  125,  127,  107,
      128,  130,  120,  107,  107,  129,  131,  132,  115,  132,
      133,  135,  132,    8,  134,  141,    7,  137,  115,  138,
      121,  121,  139,  123,  140,  126,  142,  127,  143,  136,
      128,  130,  145,  147,  129,  148,  131,  132,  136,  132,
      133,  135,  132,  134,  141,  136,  136,  137,  146,  138,
      150,  152,  139,  151,  140,  146,  142,  146,  143,  136,
      149,  145,  153,  147,  170,  148,  149,  173,  136,  162,

      162,  174,  163,  163,  136,  136,  163,  163,  146,  162,
      150,  152,  151,  165,  165,  146,  175,  146,  176,  177,
      149,  178,  153,  179,  170,  149,  173,  180,  181,  182,
      183,  174,  184,  185,  186,    6,  178,  187,  188,  162,
      189,  191,  192,  193,    5,  194,  175,  195,  176,  177,
      196,  178,  179,  197,  198,  200,  201,  180,  181,  182,
      183,  184,  185,  202,  186,  178,  187,  188,  203,  204,
      189,  191,  192,  193,  194,  205,  207,  195,  208,  196,
      209,  210,  212,  197,  198,  200,  201,  211,  213,  215,
      214,  216,  202,  217,  218,    0,  220,  203,  222,  204,

      214,    0,  223,  224,  225,  205,  207,  226,  208,  209,
      228,  210,  212,  229,    0,  224,  211,  230,  213,  215,
      214,  216,  217,  231,  218,  220,  232,  222,  233,  234,
      214,  223,  235,  224,  225,  236,  237,  226,  238,  242,
      228,  239,  238,  229,  224,  240,  243,  230,  244,  239,
      245,  246,  249,  231,  247,  232,  250,  243,  233,  234,
      251,  235,  253,  254,  236,  255,  237,  256,  238,  242,
      257,  239,  238,  258,  240,  243,  259,  260,  244,  239,
      245,  246,  249,  247,  261,    0,  250,  262,  263,  265,
      251,  253,  264,  254,  266,  255,  264,  256,  267,  274,

      257,  268,  268,  258,  269,  269,  259,  260,  271,  271,
      263,  272,  272,  273,  261,  263,  262,  275,  263,  265,
      276,  278,  264,  266,  281,  264,  283,  285,  267,  274,
      286,  287,    0,  288,  289,  290,  292,    0,  293,  263,
      294,  295,  273,  297,  298,  300,  301,  275,  302,  276,
      303,  278,  304,  306,  281,  305,  283,  285,  309,  310,
      286,  287,  288,  289,  312,  290,  292,  293,  313,  294,
      314,  295,  317,  297,  298,  300,  301,  320,  302,  303,
      324,  314,  304,  306,  305,  321,  322,  323,  309,  310,
      325,  326,  327,  312,  328,  329,  335,  313,  330,  332,

      314,  333,  317,  336,  337,  344,  320,  336,  345,  324,
      314,  341,  342,  346,  347,  321,  322,  323,  348,  325,
      349,  326,  327,  328,  351,  329,  335,  330,  332,  352,
      333,  354,  356,  336,  337,  344,  357,  336,  345,  358,
      341,  342,  359,  346,  347,  360,  361,  362,  348,  363,
      349,  366,  364,  367,  351,  364,  372,    0,  373,  352,
      354,  356,  374,  375,  376,  384,  357,  377,  378,  358,
      379,  359,  380,  381,  385,  360,  361,  362,  386,  363,
      387,  366,  364,  367,  364,  389,  372,  373,  390,  392,
      398,  374,  393,  375,  376,  384,  377,  378,  394,  379,

      397,  380,  381,  399,  385,  401,  402,  405,  386,  403,
      387,  407,  403,  408,  409,  389,  412,  413,  390,  392,
      398,  393,  414,  415,  418,  419,  426,  394,  420,  397,
      422,  424,  427,  399,  401,  428,  402,  405,  403,  429,
      407,  403,  430,  408,  409,  431,  412,  413,  432,  433,
      436,  414,  415,  418,  435,  419,  426,  420,  438,  422,
      424,  427,  439,  440,  441,  428,  442,    0,  444,  429,
      446,  430,  449,    0,  450,  431,  451,  432,  452,  433,
      436,  453,  455,  435,  454,  456,  457,  438,  458,  460,
      461,  466,  439,  440,  441,  467,  442,  444,  470,  471,

      446,  472,  449,  450,  474,  475,  451,  476,  452,  478,
      481,  453,  455,  454,  456,  482,  457,  458,  460,  483,
      461,  466,  484,  485,  488,  467,  489,  470,  492,  471,
      493,  472,  494,  498,  474,  475,  497,  476,  499,  478,
      481,  500,    0,  501,  504,  482,  505,  506,  509,  483,
      513,  515,  484,  485,  488,  514,  489,  516,  492,  518,
      493,  519,  494,  498,  520,  497,  521,  524,  499,  525,
      526,  500,  501,  527,  504,  528,  505,  506,  509,  530,
      513,  515,  531,  533,  514,  531,  532,  516,  534,  518,
      539,  519,  541,  520,  543,  544,  521,  524,  546,  525,

      526,  548,  527,  545,  545,  528,  550,  554,  530,  555,
      556,  557,  531,  533,  531,  532,  558,  561,  534,  559,
      539,  541,  562,  543,  563,  544,  564,  565,  546,  567,
      568,  548,  545,  545,  569,  550,  570,  554,  571,  555,
      556,  557,  572,    0,  579,  580,  558,  561,  559,  581,
      582,  583,  562,  563,  588,  589,  564,  565,  567,  568,
      590,  593,  595,  597,  569,  596,  570,  571,  598,    0,
      599,  600,  572,  579,  580,  603,    0,  604,  608,  581,
      582,  583,  609,  610,  588,  589,  611,    0,    0,    0,
      590,  593,  595,  597,  596,    0,    0,    0,  598,  599,

      600,    0,    0,    0,    0,  603,  604,  608,    0,    0,
        0,    0,  609,  610,    0,    0,  611,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  614,  615,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  616,  616,  616,
      616,  616,  616,  616,  616,  616,  616,  617,    0,  617,
      617,  617,  617,  617,  617,    0,  617,  618,    0,    0,
      618,  618,  618,  618,  618,  618,  618,  619,  619,  620,
      620,  620,    0,  620,  620,  620,  620,  620,  620,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  622,  622,
      622,  622,  622,    0,  622,  622,  622,  622,  624,  624,

      624,  624,    0,  624,  624,  624,  624,  624,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "./sqlparser_sql2003.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "./sqlparser_sql2003.l"

#include "node.h"
#include "sqlparser_sql2003_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#define TOKEN(name) { return SQL2003_##name; }
#define YYSTYPE         SQL2003_STYPE
#define YYLTYPE         SQL2003_LTYPE

#line 1202 "sqlparser_sql2003_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1215 "sqlparser_sql2003_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 104 "./sqlparser_sql2003.l"

#line 1502 "sqlparser_sql2003_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 614 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 613 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 105 "./sqlparser_sql2003.l"
TOKEN(ALL)
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 106 "./sqlparser_sql2003.l"
TOKEN(AND)
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 107 "./sqlparser_sql2003.l"
TOKEN(ANY)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 108 "./sqlparser_sql2003.l"
TOKEN(ARRAY)
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 109 "./sqlparser_sql2003.l"
TOKEN(AS)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 110 "./sqlparser_sql2003.l"
TOKEN(ASC)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 111 "./sqlparser_sql2003.l"
TOKEN(AVG)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 112 "./sqlparser_sql2003.l"
TOKEN(BETWEEN)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 113 "./sqlparser_sql2003.l"
TOKEN(BIGINT)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 114 "./sqlparser_sql2003.l"
TOKEN(BINARY)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 115 "./sqlparser_sql2003.l"
TOKEN(BLOB)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 116 "./sqlparser_sql2003.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 117 "./sqlparser_sql2003.l"
TOKEN(BY)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 118 "./sqlparser_sql2003.l"
TOKEN(CASE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 119 "./sqlparser_sql2003.l"
TOKEN(CAST)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 120 "./sqlparser_sql2003.l"
TOKEN(CHAR)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "./sqlparser_sql2003.l"
TOKEN(CHARACTER)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 122 "./sqlparser_sql2003.l"
TOKEN(CHARACTERS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 123 "./sqlparser_sql2003.l"
TOKEN(CLOB)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 124 "./sqlparser_sql2003.l"
TOKEN(COALESCE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 125 "./sqlparser_sql2003.l"
TOKEN(CODE_UNITS)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 126 "./sqlparser_sql2003.l"
TOKEN(COLLATE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 127 "./sqlparser_sql2003.l"
TOKEN(CONVERT)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 128 "./sqlparser_sql2003.l"
TOKEN(CORRESPONDING)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 129 "./sqlparser_sql2003.l"
TOKEN(COUNT)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 130 "./sqlparser_sql2003.l"
TOKEN(CROSS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 131 "./sqlparser_sql2003.l"
TOKEN(CURRENT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 132 "./sqlparser_sql2003.l"
TOKEN(CURRENT_TIMESTAMP)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 133 "./sqlparser_sql2003.l"
TOKEN(CURRENT_USER)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 134 "./sqlparser_sql2003.l"
TOKEN(DATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 135 "./sqlparser_sql2003.l"
TOKEN(DAY)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 136 "./sqlparser_sql2003.l"
TOKEN(DEC)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 137 "./sqlparser_sql2003.l"
TOKEN(DECIMAL)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 138 "./sqlparser_sql2003.l"
TOKEN(DEFAULT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 139 "./sqlparser_sql2003.l"
TOKEN(DELETE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 140 "./sqlparser_sql2003.l"
TOKEN(DENSE_RANK)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 141 "./sqlparser_sql2003.l"
TOKEN(DESC)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 142 "./sqlparser_sql2003.l"
TOKEN(DISTINCT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 143 "./sqlparser_sql2003.l"
TOKEN(DOUBLE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 144 "./sqlparser_sql2003.l"
TOKEN(ELSE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 145 "./sqlparser_sql2003.l"
TOKEN(END)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 146 "./sqlparser_sql2003.l"
TOKEN(END_P)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 147 "./sqlparser_sql2003.l"
TOKEN(ESCAPE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 148 "./sqlparser_sql2003.l"
TOKEN(EXCEPT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 149 "./sqlparser_sql2003.l"
TOKEN(EXISTS)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 150 "./sqlparser_sql2003.l"
TOKEN(FLOAT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 151 "./sqlparser_sql2003.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 152 "./sqlparser_sql2003.l"
TOKEN(FOR)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 153 "./sqlparser_sql2003.l"
TOKEN(FROM)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 154 "./sqlparser_sql2003.l"
TOKEN(FULL)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 155 "./sqlparser_sql2003.l"
TOKEN(G)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 156 "./sqlparser_sql2003.l"
TOKEN(GROUP)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 157 "./sqlparser_sql2003.l"
TOKEN(GROUPING)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 158 "./sqlparser_sql2003.l"
TOKEN(HAVING)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 159 "./sqlparser_sql2003.l"
TOKEN(HOUR)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 160 "./sqlparser_sql2003.l"
TOKEN(IN)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 161 "./sqlparser_sql2003.l"
TOKEN(INNER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 162 "./sqlparser_sql2003.l"
TOKEN(INSERT)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 163 "./sqlparser_sql2003.l"
TOKEN(INT)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 164 "./sqlparser_sql2003.l"
TOKEN(INTEGER)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 165 "./sqlparser_sql2003.l"
TOKEN(INTERSECT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 166 "./sqlparser_sql2003.l"
TOKEN(INTERVAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 167 "./sqlparser_sql2003.l"
TOKEN(INTO)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 168 "./sqlparser_sql2003.l"
TOKEN(IS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 169 "./sqlparser_sql2003.l"
TOKEN(JOIN)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 170 "./sqlparser_sql2003.l"
TOKEN(K)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 171 "./sqlparser_sql2003.l"
TOKEN(LARGE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 172 "./sqlparser_sql2003.l"
TOKEN(LEFT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 173 "./sqlparser_sql2003.l"
TOKEN(LIKE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 174 "./sqlparser_sql2003.l"
TOKEN(M)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 175 "./sqlparser_sql2003.l"
TOKEN(MAX)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 176 "./sqlparser_sql2003.l"
TOKEN(MIN)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 177 "./sqlparser_sql2003.l"
TOKEN(MINUTE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 178 "./sqlparser_sql2003.l"
TOKEN(MOD)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 179 "./sqlparser_sql2003.l"
TOKEN(MONTH)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 180 "./sqlparser_sql2003.l"
TOKEN(MULTISET)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 181 "./sqlparser_sql2003.l"
TOKEN(NATIONAL)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 182 "./sqlparser_sql2003.l"
TOKEN(NATURAL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 183 "./sqlparser_sql2003.l"
TOKEN(NCHAR)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 184 "./sqlparser_sql2003.l"
TOKEN(NCLOB)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 185 "./sqlparser_sql2003.l"
TOKEN(NOT)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 186 "./sqlparser_sql2003.l"
TOKEN(NULLIF)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 187 "./sqlparser_sql2003.l"
TOKEN(NUMERIC)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 188 "./sqlparser_sql2003.l"
TOKEN(OBJECT)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 189 "./sqlparser_sql2003.l"
TOKEN(OCTETS)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 190 "./sqlparser_sql2003.l"
TOKEN(OF)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 191 "./sqlparser_sql2003.l"
TOKEN(ON)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 192 "./sqlparser_sql2003.l"
TOKEN(ONLY)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 193 "./sqlparser_sql2003.l"
TOKEN(OR)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 194 "./sqlparser_sql2003.l"
TOKEN(ORDER)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 195 "./sqlparser_sql2003.l"
TOKEN(OUTER)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 196 "./sqlparser_sql2003.l"
TOKEN(OVER)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 197 "./sqlparser_sql2003.l"
TOKEN(PARTITION)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 198 "./sqlparser_sql2003.l"
TOKEN(PRECEDING)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 199 "./sqlparser_sql2003.l"
TOKEN(PRECISION)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 200 "./sqlparser_sql2003.l"
TOKEN(RANGE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 201 "./sqlparser_sql2003.l"
TOKEN(RANK)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 202 "./sqlparser_sql2003.l"
TOKEN(READ)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 203 "./sqlparser_sql2003.l"
TOKEN(REAL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 204 "./sqlparser_sql2003.l"
TOKEN(RECURSIVE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 205 "./sqlparser_sql2003.l"
TOKEN(REF)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 206 "./sqlparser_sql2003.l"
TOKEN(RIGHT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 207 "./sqlparser_sql2003.l"
TOKEN(ROW)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 208 "./sqlparser_sql2003.l"
TOKEN(ROWS)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 209 "./sqlparser_sql2003.l"
TOKEN(ROW_NUMBER)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 210 "./sqlparser_sql2003.l"
TOKEN(SCOPE)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 211 "./sqlparser_sql2003.l"
TOKEN(SECOND)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 212 "./sqlparser_sql2003.l"
TOKEN(SELECT)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 213 "./sqlparser_sql2003.l"
TOKEN(SESSION_USER)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 214 "./sqlparser_sql2003.l"
TOKEN(SET)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 215 "./sqlparser_sql2003.l"
TOKEN(SMALLINT)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 216 "./sqlparser_sql2003.l"
TOKEN(SOME)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 217 "./sqlparser_sql2003.l"
TOKEN(STDDEV_POP)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 218 "./sqlparser_sql2003.l"
TOKEN(STDDEV_SAMP)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 219 "./sqlparser_sql2003.l"
TOKEN(SUM)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 220 "./sqlparser_sql2003.l"
TOKEN(SYSTEM_USER)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 221 "./sqlparser_sql2003.l"
TOKEN(THEN)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 222 "./sqlparser_sql2003.l"
TOKEN(TIME)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 223 "./sqlparser_sql2003.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 224 "./sqlparser_sql2003.l"
TOKEN(TO)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 225 "./sqlparser_sql2003.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 226 "./sqlparser_sql2003.l"
TOKEN(UNION)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 227 "./sqlparser_sql2003.l"
TOKEN(UPDATE)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 228 "./sqlparser_sql2003.l"
TOKEN(USING)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 229 "./sqlparser_sql2003.l"
TOKEN(VALUES)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 230 "./sqlparser_sql2003.l"
TOKEN(VARCHAR)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 231 "./sqlparser_sql2003.l"
TOKEN(VARYING)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 232 "./sqlparser_sql2003.l"
TOKEN(VAR_POP)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 233 "./sqlparser_sql2003.l"
TOKEN(VAR_SAMP)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 234 "./sqlparser_sql2003.l"
TOKEN(WHEN)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 235 "./sqlparser_sql2003.l"
TOKEN(WHERE)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 236 "./sqlparser_sql2003.l"
TOKEN(WITH)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 237 "./sqlparser_sql2003.l"
TOKEN(WITHOUT)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 238 "./sqlparser_sql2003.l"
TOKEN(YEAR)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 239 "./sqlparser_sql2003.l"
TOKEN(ZONE)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 241 "./sqlparser_sql2003.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return SQL2003_NULLX;
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 246 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    return SQL2003_INTNUM;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 252 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return SQL2003_INTNUM;
}
	YY_BREAK
case 139:
#line 262 "./sqlparser_sql2003.l"
case 140:
#line 263 "./sqlparser_sql2003.l"
case 141:
YY_RULE_SETUP
#line 263 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return SQL2003_APPROXNUM;
}
	YY_BREAK
case 142:
#line 271 "./sqlparser_sql2003.l"
case 143:
YY_RULE_SETUP
#line 271 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return SQL2003_APPROXNUM;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 278 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return SQL2003_BOOL;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 285 "./sqlparser_sql2003.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return SQL2003_UNKNOWN;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 290 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return SQL2003_BOOL;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 297 "./sqlparser_sql2003.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 303 "./sqlparser_sql2003.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "N'";
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 309 "./sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << "''";
}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 313 "./sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 317 "./sqlparser_sql2003.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return SQL2003_STRING;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 326 "./sqlparser_sql2003.l"
{
  fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return SQL2003_ERROR;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 331 "./sqlparser_sql2003.l"
{
    BEGIN(sb);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '[';
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 337 "./sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << "]]";
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 341 "./sqlparser_sql2003.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 345 "./sqlparser_sql2003.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << ']';
    std::string text = ((ParseResult*)yyextra)->buf_.str();
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, text.c_str());
    nd->terminalToken_.str = text.substr(1, text.length() - 2);
    yylval->node = nd;
    return SQL2003_NAME;
}
	YY_BREAK
case YY_STATE_EOF(sb):
#line 355 "./sqlparser_sql2003.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unterminated identifier WITH '['\n");
    return SQL2003_ERROR;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 361 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = std::string(yytext+1, yytext + strlen(yytext) - 1);
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return SQL2003_NAME;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 370 "./sqlparser_sql2003.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return SQL2003_NAME;
}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 379 "./sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 380 "./sqlparser_sql2003.l"
{ /* ignore */ }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 382 "./sqlparser_sql2003.l"
{ return yytext[0];}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 384 "./sqlparser_sql2003.l"
{ return SQL2003_CNNOP; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 385 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_EQ; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 386 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_GE; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 387 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_GT; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 388 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_LE; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 389 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_LT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 390 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_NE; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 391 "./sqlparser_sql2003.l"
{ return SQL2003_COMP_NE; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 393 "./sqlparser_sql2003.l"

	YY_BREAK
case 170:
YY_RULE_SETUP
#line 395 "./sqlparser_sql2003.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return SQL2003_QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
#line 402 "./sqlparser_sql2003.l"
{ return SQL2003_END_P; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 404 "./sqlparser_sql2003.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return SQL2003_ERROR;
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 408 "./sqlparser_sql2003.l"
ECHO;
	YY_BREAK
#line 2520 "sqlparser_sql2003_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 614 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 614 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 613);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 408 "./sqlparser_sql2003.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return SQL2003_ERROR;
}

