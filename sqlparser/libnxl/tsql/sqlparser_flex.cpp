#line 2 "sqlparser_flex.cpp"

#line 4 "sqlparser_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

#ifdef yyget_lloc
#define yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc yyget_lloc
#endif

#ifdef yyset_lloc
#define yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc yyset_lloc
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 259
#define YY_END_OF_BUFFER 260
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1131] =
    {   0,
        0,    0,    0,    0,  239,  239,  242,  242,  260,  258,
      247,  247,  248,  258,  248,  237,  248,  248,  248,  228,
      254,  250,  252,  257,  258,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  241,
      248,  259,  239,  240,  242,  243,  247,  256,    0,  246,
      233,    0,  232,  228,    0,  253,  255,  251,    0,  245,
      245,  245,  245,    6,  245,  245,  245,  245,  245,   15,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,   62,  245,
       63,   70,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,   89,
      245,   92,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  133,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  249,  239,
      238,  242,  244,  246,    0,    0,  232,    0,    0,  229,
        0,    0,    1,    5,  245,    3,    4,    7,  209,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
       31,  245,  245,  245,  245,  245,  245,  245,  245,  245,
       41,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,   53,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,   65,  245,  245,  245,
       72,  245,  202,  245,  245,  245,  245,  245,  245,  245,
      245,  199,  245,  245,  245,  198,   83,  245,  245,   86,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  109,

      245,  245,  245,  245,  117,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  195,  245,  245,  245,  245,
      245,  245,  245,  160,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  194,  245,  245,  245,  245,    0,  231,
        0,    0,  230,    0,    0,  245,  245,  245,  245,  245,
       12,   13,  245,  245,   17,  226,  245,   18,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
       28,  245,  245,  245,  245,  245,   34,  245,  245,  245,
       38,   39,   40,  245,  245,  245,  245,  245,  245,  245,
      163,  245,  245,  245,  245,  245,   54,  245,   55,  245,

      245,  245,  245,  245,   59,  245,  245,  245,  245,  245,
      245,   69,  245,   71,  167,  147,  245,  200,   74,   76,
      245,  245,  245,   79,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,   49,  245,  245,  227,  245,  245,
       90,  245,  245,  245,  192,  245,  245,  245,  245,  168,
      245,  245,  245,  245,  245,  245,  245,  182,  101,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  110,  245,
      245,  245,  245,  245,  245,  118,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  129,
      162,  130,  245,  245,  245,  234,  245,  245,  245,  245,

      138,  245,  245,  245,  245,  193,  124,  144,  245,  145,
      146,    0,    0,    0,    2,    8,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  207,  245,   26,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,   42,  245,  245,  245,  245,  245,  236,   47,   48,
       50,  245,  159,  245,  245,  245,  245,   56,   57,  245,
      245,  245,   64,  245,  245,  245,  245,  245,  245,  245,
       75,   77,  245,  245,  245,  245,  245,  245,  245,   82,
      245,  245,  245,  245,  245,  185,  245,  245,  245,  245,

       93,   94,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  148,  187,  245,  245,  245,  245,  245,  245,
      107,  245,  245,  245,  245,  115,  245,  245,  245,  245,
      245,  158,  245,  245,  245,  122,  245,  197,  245,  211,
      245,  245,  127,  245,  245,  245,  245,  245,  136,  245,
      245,  139,  245,  245,  245,  143,  246,    0,    0,  245,
       10,   11,  245,   14,  245,  245,  245,  245,  245,  245,
       20,  245,   22,  245,  245,  245,  245,   24,  245,  245,
      245,  245,  245,  245,  245,  245,  245,   33,  245,  245,
      245,  245,   37,   43,  245,   45,  245,  245,  245,   51,

       52,  245,  177,  150,  245,  245,   58,  245,   60,  245,
      245,   68,  245,  245,  215,  245,  245,  245,   78,  157,
      172,  245,  245,  245,   81,  245,  245,  245,  245,  245,
      213,  245,   88,   91,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  102,  103,  245,  245,  106,
      179,  245,  245,  113,  112,  245,  245,  245,  176,  245,
      245,  121,  123,  196,  125,  245,  126,  128,  245,  245,
      245,  245,  245,  245,  137,  140,  245,  245,    0,    0,
        9,  245,   12,   16,  245,  245,  245,   19,  245,   21,
       95,  245,  245,  224,  245,  245,  190,  222,  245,  245,

      245,  245,  245,   31,   32,  245,  245,  164,  245,   44,
       46,  245,  245,  245,  218,  245,  245,  245,  245,  245,
       66,  245,  245,  245,   73,  245,  245,  245,  245,  245,
      245,   85,  245,   87,  245,  245,  245,  161,  245,  245,
       99,  100,  245,  245,  245,  104,  245,  245,  245,  116,
      245,  245,  245,  245,  245,  245,  245,  132,  245,  245,
      245,  235,  245,  142,  151,    0,  245,  245,  245,  180,
      225,  245,  245,  245,  245,  245,  221,  220,  219,   29,
      245,  245,   35,   36,  245,  245,  245,  245,  204,  245,
      216,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,   97,  245,  245,  245,  245,  245,
      105,  108,  245,  245,  245,  245,  119,  120,  245,  245,
      245,  134,  245,  245,  245,  245,  152,  245,  245,   18,
      245,  245,  245,  206,  245,  245,  245,  245,  245,  245,
      245,  191,  245,  245,  245,  245,   67,  169,  245,  245,
      245,   80,  245,  245,  245,  245,  245,  186,  189,   98,
      245,  245,  178,  245,  245,  245,  245,  245,  245,  131,
      245,  188,  141,  245,  245,  153,  245,  149,   23,   25,
      245,  245,   30,  183,  245,  245,  217,  245,   61,  245,
      201,  245,  245,  245,  245,   84,  245,  245,   96,  111,

      245,  184,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  205,  203,  245,  245,  245,  245,
      245,  245,  245,  114,  245,  245,  245,  245,  210,  135,
      245,  245,  208,  245,   27,  245,  245,  173,  245,  245,
      245,  245,  245,  212,  245,  245,  245,  142,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  154,  181,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  165,  245,  245,  245,  245,  245,
      175,  245,  245,  223,  245,  170,  245,  171,  245,  245,

      156,  245,  245,  245,  155,  245,  245,  245,  245,  245,
      174,  245,  214,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  166,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    7,    7,    8,    7,
        7,    9,   10,    7,   11,   12,   13,   14,   14,   14,
       14,   15,   14,   14,   14,   16,   14,    1,    7,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,    1,   49,    7,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,    1,   77,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    5,    6,    7,
        1,    1,    6,    8,    8,    8,    1,    1,    1,    1,
        1,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    9,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    1
    } ;

static const flex_int16_t yy_base[1141] =
    {   0,
        0,    0,    0,    0,  826,  654,  610,  609,  651, 2328,
       76,   79,  578,    0, 2328, 2328,  570,   70,  566,   75,
       74, 2328,  555, 2328,  551,   63,   69,  123,  173,   74,
      223,   71,   72,  133,   64,   88,  127,  174,  225,  270,
      209,   60,  278,  320,  329,  186,   89,  263,    0, 2328,
      492, 2328,    0,  560,    0, 2328,  118, 2328,  554,    0,
      191,    0,  301,  355,  156, 2328, 2328, 2328,  229,    0,
       87,  113,  168,  126,  123,  170,  173,  265,  119,    0,
      194,  232,  231,  367,  370,  242,  262,  417,  271,  277,
      287,  309,  305,  322,  324,  396,  365,  344,  360,  367,

      374,  375,  383,  376,  383,  425,  413,  417,    0,  419,
      423,  424,  430,  445,  432,  456,  447,  443,  471,  457,
      476,  445,  474,  464,  463,  471,  481,  483,  487,  485,
      478,  497,  482,  501,  493,  490,  513,  523,  512,  507,
      567,  522,  532,  534,  557,  518,  523,  544,  552,  555,
      553,  586,  551,  557,  553,  577,  586,  589,  576,  613,
      615,  592,  630,  610,  599,  606,  593,  609, 2328,    0,
     2328,    0, 2328,    0,  655,    0,  665,  672,  204,  678,
      635,  647,    0,    0,  649,    0,    0,    0,    0,  660,
      651,  666,  676,  666,  671,  657,  681,  671,  679,  668,

      676,  669,  678,  678,  679,  693,  676,  678,  697,  693,
      701,  711,  722,  709,  729,  732,  733,  720,  725,  733,
        0,  725,  737,  740,  725,  733,  741,  728,  728,  746,
      731,  750,  741,  751,  742,  746,  781,  757,  746,  742,
      762,  777,  776,  776,  788,  789,  790,  775,  784,  784,
        0,  789,    0,  783,  800,  786,  802,  799,  810,  793,
      790,  824,  803,  801,  810,  428,  809,  805,  823,    0,
      828,  836,  837,  846,  833,  829,  847,  853,  854,  842,
      862,  842,  859,  850,  863,  852,  864,  850,  891,  858,
      860,  861,  883,  874,  880,  886,  898,  886,  897,  891,

      907,  898,  911,  898,  417,  895,  903,  899,  910,  907,
      915,  908,  920,  917,  927,    0,  914,  917,  928,  928,
      925,  944,  931,    0,  950,  953,  945,  950,  953,  967,
      952,  958,  953,  974,  964,  965,  972,  970, 1020, 1023,
      415, 1027, 1030,  967,  979,  982,  988, 1002, 1012, 1010,
     1025,    0, 1013, 1032,    0,    0, 1027, 1034, 1026, 1018,
     1034, 1027, 1036, 1037, 1034, 1039, 1026, 1027, 1029, 1044,
     1078, 1039, 1039, 1033, 1036, 1053, 1042, 1082, 1077, 1076,
        0,    0,    0, 1072, 1075, 1072, 1075, 1095, 1079, 1094,
        0, 1092, 1081, 1082, 1088, 1099,    0, 1100,    0, 1105,

     1087, 1108, 1090, 1096,    0, 1100, 1096, 1100, 1119, 1122,
     1135,    0, 1132,    0, 1140,    0,  373, 1139,    0,    0,
     1129, 1138, 1146,    0, 1147, 1139, 1150, 1149, 1136, 1140,
     1154, 1160, 1154, 1144,    0, 1158, 1159, 1156, 1150, 1165,
        0, 1157, 1156, 1158,    0, 1182, 1189, 1177, 1197,    0,
     1199, 1205, 1206, 1200, 1205, 1186, 1207,    0,    0, 1200,
     1194, 1202, 1215, 1199, 1207, 1199, 1201, 1219,    0, 1208,
     1210, 1220, 1223, 1219, 1240,    0, 1220, 1229, 1244, 1239,
     1248, 1242, 1255, 1243, 1252, 1261, 1265, 1264, 1265,    0,
        0, 1252, 1263, 1261, 1255,    0, 1254, 1262, 1262, 1258,

        0, 1272, 1275, 1272, 1275,    0,    0,    0, 1279,    0,
        0,  259, 1284, 1271,    0,    0, 1287, 1291, 1289, 1315,
     1312, 1314, 1315, 1319, 1304, 1319, 1306, 1312, 1313, 1308,
     1326, 1311, 1313,  371, 1327,    0, 1319, 1330, 1326, 1335,
     1336, 1329, 1324, 1340, 1330, 1339,  365, 1339, 1338, 1355,
     1367,    0, 1354, 1355, 1357, 1369, 1366,    0,    0,  362,
      161, 1358, 1378, 1369, 1364, 1382, 1374,    0, 1378, 1381,
     1380, 1385,    0, 1371, 1387, 1374, 1382, 1386, 1374, 1383,
        0,    0, 1395, 1382, 1386, 1403, 1390, 1414, 1405,    0,
     1429, 1415, 1409, 1435, 1420,    0, 1433, 1431, 1421, 1428,

        0,    0, 1438, 1424, 1430, 1432, 1443, 1429, 1431, 1432,
     1439, 1433,    0,    0, 1437, 1449, 1450, 1454, 1449, 1455,
        0, 1444, 1465, 1464, 1487,    0, 1470, 1476, 1491, 1482,
     1491,    0, 1488, 1490, 1494,    0, 1497, 1485, 1495,    0,
     1495, 1491, 1486, 1486, 1493, 1499, 1508, 1496,    0, 1488,
     1507,    0, 1494, 1501, 1515,    0, 2328, 1517, 1513, 1510,
        0,  358, 1529,    0, 1541,  354, 1528, 1528, 1532, 1549,
     1535, 1535,    0, 1536, 1537, 1538, 1557, 1540, 1541, 1558,
     1557, 1551, 1547, 1553, 1564, 1556, 1549,    0, 1552, 1569,
     1568, 1571,    0,    0, 1571,    0, 1566, 1581, 1579,    0,

        0, 1595,    0,    0, 1601, 1603,    0, 1594,    0, 1604,
      327,    0, 1594, 1608,    0, 1590, 1614, 1609,    0,    0,
        0, 1596, 1617, 1610,    0, 1600, 1620, 1602, 1611, 1619,
        0, 1623,    0,    0, 1607, 1619, 1611, 1611, 1623, 1625,
     1633, 1615, 1654, 1643, 1655,    0,    0, 1660, 1663,    0,
        0, 1665, 1657,    0,    0, 1657, 1653, 1672,    0, 1660,
     1660,    0,    0,    0,    0,  322,  289,    0, 1675, 1657,
     1664, 1676, 1676, 1667,    0,    0, 1681, 1665, 1672, 1670,
        0, 1683,    0,    0, 1672, 1684, 1677,    0, 1687,    0,
        0, 1687, 1693,    0, 1708, 1711,  275,    0, 1716, 1718,

     1704, 1721, 1727,    0,    0, 1728, 1725,    0, 1711,    0,
        0, 1720, 1732, 1720,    0, 1734, 1729, 1728, 1713, 1725,
        0, 1737, 1736, 1730,    0, 1725, 1730, 1731, 1738, 1734,
     1741,    0, 1739,    0, 1751, 1760, 1774,    0, 1766, 1766,
        0,    0, 1775, 1772, 1774,    0, 1767, 1777, 1787,  274,
     1770, 1769, 1772, 1773, 1791, 1774, 1783,    0, 1790, 1778,
     1794,    0, 1782, 1800, 2328, 1788, 1795, 1803, 1788,  270,
        0, 1793, 1798, 1807, 1820, 1818,    0,    0,    0,    0,
     1816, 1826,    0,    0, 1826, 1832, 1838, 1826,  234, 1842,
        0, 1833, 1829, 1846, 1830, 1833, 1833, 1834, 1833, 1836,

     1844, 1840, 1841, 1846,    0, 1854, 1849, 1859, 1857, 1865,
        0,    0, 1867, 1870, 1889, 1891,    0,    0, 1885, 1879,
     1884,    0, 1893, 1899, 1879, 1902, 2328, 1901, 1898,    0,
     1907, 1895, 1890,    0, 1906, 1903, 1894, 1909, 1904, 1895,
     1896,    0, 1913, 1910, 1917, 1908,    0,    0, 1919, 1919,
      229,    0, 1925,  225, 1944, 1939, 1945,    0,    0,    0,
     1936, 1937,    0, 1940, 1941, 1943,  220, 1941, 1958,    0,
     1950,    0,    0, 1946, 1964,    0, 1961,    0,    0,    0,
     1956, 1965,    0,    0, 1952, 1967,    0, 1969,    0, 1971,
        0, 1960, 1960,  186, 1961,    0, 1978, 1954,    0,    0,

     1962,    0, 1981,  166, 1985, 1988, 1992, 1998, 2008, 2003,
     2009, 2013, 2001, 2012,    0,    0, 2009, 2008, 2018, 2006,
     2020, 2012, 2026,    0, 2010, 2026, 2018, 2011,    0,    0,
     2014, 2014,    0, 2015,    0, 2031, 2016,    0, 2020, 2025,
     2026, 2043, 2045,    0, 2056, 2049, 2066,    0, 2051, 2054,
     2061, 2058, 2075, 2056, 2077, 2076, 2073, 2062, 2065, 2067,
     2073, 2086, 2065, 2069, 2085, 2069, 2087,  163, 2078, 2076,
     2076,    0,    0, 2085, 2088, 2099, 2109, 2121, 2114, 2110,
     2116, 2112, 2129, 2119,    0, 2118, 2117, 2120, 2119, 2124,
        0, 2136, 2124,    0, 2138,    0, 2125,    0, 2130, 2128,

        0, 2143, 2139, 2134,    0,  119, 2135, 2139, 2150, 2140,
        0, 2141,    0, 2148, 2141, 2168, 2170, 2167, 2167, 2173,
     2172, 2187,  114, 2184, 2180, 2191, 2191, 2173,    0, 2328,
     2247, 2256, 2265, 2274,  108, 2283, 2292, 2300, 2309, 2318
    } ;

static const flex_int16_t yy_def[1141] =
    {   0,
     1130,    1, 1131, 1131, 1132, 1132, 1133, 1133, 1130, 1130,
     1130, 1130, 1130, 1134, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1130,
     1130, 1130, 1136, 1130, 1137, 1130, 1130, 1130, 1134, 1138,
     1130, 1139, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,

     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1130, 1136,
     1130, 1137, 1130, 1138, 1130, 1140, 1130, 1130, 1130, 1130,
     1130, 1130, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,

     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,

     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1130, 1130,
     1140, 1130, 1130, 1130, 1130, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,

     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,

     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1130, 1130, 1130, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,

     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1130, 1130, 1130, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,

     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1130, 1130,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,

     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1130, 1130, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,

     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1130, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,

     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,

     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,    0,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130
    } ;

static const flex_int16_t yy_nxt[2406] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   15,   15,
       17,   18,   19,   20,   20,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   49,   49,   50,   10,   10,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   49,   49,   51,   57,   57,   57,
       57,   57,   57,   61,   61,   61,   63,   71,   64,   64,
       64,   66,   67,  107,   76,   72,  104,   73,   77,  113,

       65,  139,   74,  105,   78,   75,   93,   79,   94,  106,
      164,  183,   95,  114,   80,   70,   71,  115,   96,   57,
       57,   57,  107,   76,   72,  104,   73,   77,  113,   65,
      139,   74,  105,   78,   75,   93,   79,   94,  106,  164,
      183,   95,  114,   80,   81,  184,  115,   96,  116,  188,
      189,   82,  117,  185,  196,   83,  118,  108,   84,  109,
      110,   85,  119, 1124,   86,  179,  179,  111, 1109,  180,
      180,  180,  112,   81,  184,  700,  701,  116,  188,  189,
       82,  117,  185,  196,   83,  118,  108,   84,  109,  110,
       85,  119,  186,   86,   87,  120,  111,  190,   88,  121,

      192,  112,   89,  122,   61,   61,   61,  193,   90,  123,
      191,   91, 1080,  187,   92, 1026,  175,  180,  180,  180,
      161,  186,  162,   87,  120,  163,  190,   88,  121,  192,
      135,   89,  122,  197,  136, 1020,  193,   90,  123,  191,
       91,  137,  187,   92,   97,  175,  124,  138,   98,  161,
      125,  162,   99,  198,  163,  100,  181,  199,  101,  135,
      126,  102,  197,  136,  103,  127,  128,  512,  182, 1005,
      137,  657,  200,   97,  995,  124,  138,   98,  993,  125,
      208,   99,  198,  944,  100,  181,  199,  101,  165,  126,
      102,  166,  167,  103,  127,  128,  129,  182,  168,  140,

      194,  200,  209,  141,  130,  195,  131,  142,  132,  208,
      216,  133,  134,  143,  177,  177,  177,  165,  217,  931,
      166,  167,  218,  914,  876,  129,  178,  168,  140,  194,
      219,  209,  141,  130,  195,  131,  142,  132,  856,  216,
      133,  134,  143,  144,  220,  145,  221,  217,  146,  147,
      156,  218,  148,  149,  150,  178,  151,  157,  158,  219,
      152,  153,  222,  154,  159,  155,   63,  160,   64,   64,
       64,  855,  144,  220,  145,  221,  820,  146,  147,  156,
       65,  148,  149,  150,  230,  151,  157,  158,  201,  152,
      153,  222,  154,  159,  155,  206,  160,  228,  231,  202,

      203,  204,  232,  785,  229,  207,  233,  782,  205,   65,
      235,  699,  234,  230,  689,  236,  237,  201,  238,  223,
      677,  224,  579,  512,  206,  225,  228,  231,  202,  203,
      204,  232,  226,  229,  207,  233,  227,  205,  210,  235,
      211,  234,  243,  212,  236,  237,  239,  238,  223,  213,
      224,  214,  241,  244,  225,  242,  215,  245,  248,  249,
      240,  226,  246,  247,  252,  227,  475,  210,  255,  211,
      250,  243,  212,  256,  257,  239,  258,  432,  213,  266,
      214,  241,  244,  253,  242,  215,  245,  248,  249,  240,
      251,  246,  247,  252,  259,  254,  261,  255,  267,  250,

      263,  262,  256,  257,  268,  258,  260,  269,  266,  264,
      272,  270,  253,  275,  265,  273,  274,  276,  277,  251,
      271,  278,  279,  259,  254,  261,  280,  267,  283,  263,
      262,  281,  282,  268,  284,  260,  269,  288,  264,  272,
      270,  289,  275,  265,  273,  274,  276,  277,  285,  297,
      278,  279,  286,  306,  298,  280,  307,  283,  287,  173,
      281,  282,  301,  284,  299,  308,  288,  171,  169,  302,
      289,   69,   68,  309,   62,  300,  310,  285,  297,  311,
       60,  286,  306,  298,  316,  307,  317,  287,  290,  303,
      291,  301,  318,  299,  308,   58,  304,  305,  302,  319,

      292,  293,  309,  294,  300,  310,  295,  312,  311,  296,
      313,  320,  324,  316,  321,  317,  330,  290,  303,  291,
      335,  318,  322,  323,  314,  304,  305,  315,  319,  292,
      293,  336,  294,  337,  325,  295,  312,  327,  296,  313,
      320,  324,  333,  321,  328,  330,  329,  338,  334,  335,
     1130,  322,  323,  314,  326,  331,  315,   56,   56,  332,
      336,   54,  337,  325,  339,  339,  327,  344,  340,  340,
      340,  333,  345,  328,  346,  329,  338,  334,  177,  177,
      177,  342,  342,  326,  331,  343,  343,  343,  332,  347,
      178,  180,  180,  180,  348,  349,  344,  350,  351,  352,

      353,  345,  359,  346,  354,  357,  355,  360,  361,  358,
      362,  363,  364,  367,  368,  369,  370,  365,  347,  178,
      366,  356,  371,  348,  349,  372,  350,  351,  352,  353,
      373,  359,  374,  354,  357,  355,  360,  361,  358,  362,
      363,  364,  367,  368,  369,  370,  365,  375,  376,  366,
      356,  371,  377,  378,  372,  380,  381,  382,  383,  373,
      384,  374,  385,  386,  387,  388,  389,  390,  391,  392,
      393,  394,  379,  395,  396,  397,  375,  376,  399,  402,
      403,  377,  378,  404,  380,  381,  382,  383,  398,  384,
      405,  385,  386,  387,  388,  389,  390,  391,  392,  393,

      394,  379,  395,  396,  397,  400,  406,  399,  402,  403,
      407,  408,  404,  409,  410,  411,  413,  398,  414,  405,
      415,  416,  401,  417,  418,  412,  419,  420,  421,  424,
      425,  422,  429,   54,  400,  406,  430,  431,  433,  407,
      408,  423,  409,  410,  411,  413,  434,  414,  426,  415,
      416,  401,  417,  418,  412,  419,  420,  421,  424,  425,
      422,  429,  427,  435,  436,  430,  431,  433,  437,  438,
      423,  439,  440,  428,  441,  434,  442,  426,  443,  444,
      445,  448,  449,  446,  450,  453,  451,  455,  456, 1130,
      459,  427,  435,  436,  454,  460,  461,  437,  438,  452,

      439,  440,  447,  441,  462,  442,  463,  443,  444,  445,
      448,  449,  446,  450,  453,  451,  455,  456,  457,  459,
      464,  465,  458,  454,  460,  461,  466,  467,  452,  468,
      469,  447,  471,  462,  472,  463,  473,  474,  476,  477,
      470,  478,  479,  480,  481,  484,  482,  457,  483,  464,
      465,  458,  485,  486,  487,  466,  467,  488,  468,  469,
      489,  471,  490,  472,  491,  473,  474,  476,  477,  492,
      478,  479,  480,  481,  484,  482,  493,  483,  496,  494,
      497,  485,  486,  487,  495,  498,  488,  499,  500,  489,
      501,  490,  502,  491,  503,  507,  504,  505,  492,  508,

      510,  511,  513,  509, 1130,  493, 1130,  496,  494,  497,
      506, 1130, 1130,  495,  498, 1130,  499,  500,  514,  501,
      515,  502,  516,  503,  507,  504,  505,  517,  508,  510,
      511,  513,  509,  340,  340,  340,  340,  340,  340,  506,
      343,  343,  343,  343,  343,  343,  518,  514,  519,  515,
      520,  516,  521,  522,  523,  524,  517,  525,  526,  527,
      528,  529,  531,  532,  533,  530,  534,  535,  536,  537,
     1130,  543,  544, 1130,  545,  518,  546,  519,  547,  520,
      548,  521,  522,  523,  524, 1130,  525,  526,  527,  528,
      529,  531,  532,  533,  530,  534,  535,  536,  537,  538,

      543,  544,  539,  545,  549,  546,  550,  547,  551,  548,
      552,  553,  540,  554,  541,  555,  556,  557,  542,  558,
      559,  560,  561,  562,  563,  564,  565,  566,  538,  567,
      568,  539,  569,  549,  570,  550,  571,  551,  572,  552,
      553,  540,  554,  541,  555,  556,  557,  542,  558,  559,
      560,  561,  562,  563,  564,  565,  566,  573,  567,  568,
      574,  569,  575,  570,  577,  571,  578,  572,  580,  581,
      582,  583,  584,  576,  585,  586,  587,  588,  589,  590,
      593,  591,  594,  595,  596,  597,  573,  592,  598,  574,
      599,  575,  600,  577,  601,  578,  602,  580,  581,  582,

      583,  584,  576,  585,  586,  587,  588,  589,  590,  593,
      591,  594,  595,  596,  597,  603,  592,  598,  604,  599,
      605,  600,  606,  601,  607,  602,  609,  610,  608,  611,
      612,  613,  614,  615,  616,  617,  618,  619,  620,  621,
      622,  623,  624,  625,  603,  626,  627,  604,  628,  605,
     1130,  606,  631,  607,  632,  609,  610,  608,  611,  612,
      613,  614,  615,  616,  617,  618,  619,  620,  621,  622,
      623,  624,  625,  629,  626,  627,  633,  628,  634,  630,
      635,  631,  636,  632,  637,  638,  639,  640,  641,  642,
      643,  644,  645,  646,  647,  648,  649,  650,  651,  652,

      653,  654,  629,  655,  656,  633,  658,  634,  630,  635,
      659,  636,  660,  637,  638,  639,  640,  641,  642,  643,
      644,  645,  646,  647,  648,  649,  650,  651,  652,  653,
      654,  661,  655,  656,  662,  658,  663,  664,  665,  659,
      666,  660,  667,  668,  669,  670,  671,  672,  673,  674,
      675,  676,  678,  679,  680,  681,  682,  683,  684,  685,
      661,  686,  687,  662,  688,  663,  664,  665,  690,  666,
      691,  667,  668,  669,  670,  671,  672,  673,  674,  675,
      676,  678,  679,  680,  681,  682,  683,  684,  685,  692,
      686,  687,  693,  688,  694,  695,  696,  690,  697,  691,

      698,  702,  703,  704,  705,  706,  707,  708,  709,  710,
      711,  712,  713,  714,  715,  716,  717,  718,  692,  719,
      720,  693,  721,  694,  695,  696,  722,  697,  723,  698,
      702,  703,  704,  705,  706,  707,  708,  709,  710,  711,
      712,  713,  714,  715,  716,  717,  718,  724,  719,  720,
      725,  721,  726,  727,  728,  722,  729,  723,  730,  731,
      732,  733,  734,  735,  736,  737,  738,  739,  740,  741,
      742,  743,  744,  745,  746,  747,  724,  748,  749,  725,
      750,  726,  727,  728,  751,  729,  752,  730,  731,  732,
      733,  734,  735,  736,  737,  738,  739,  740,  741,  742,

      743,  744,  745,  746,  747,  753,  748,  749,  754,  750,
      755,  756,  757,  751,  758,  752,  759,  760,  761,  762,
      763,  764,  765,  766,  767,  768,  769,  770,  771,  772,
      773,  774,  775,  776,  753,  777,  778,  754,  779,  755,
      756,  757,  780,  758,  781,  759,  760,  761,  762,  763,
      764,  765,  766,  767,  768,  769,  770,  771,  772,  773,
      774,  775,  776,  783,  777,  778,  784,  779,  786,  787,
      788,  780,  789,  781,  790,  791,  792,  793,  794,  795,
      796,  797,  798,  799,  800,  801,  802,  803,  804,  805,
      806,  807,  783,  808,  809,  784,  810,  786,  787,  788,

      811,  789,  812,  790,  791,  792,  793,  794,  795,  796,
      797,  798,  799,  800,  801,  802,  803,  804,  805,  806,
      807,  813,  808,  809,  814,  810,  815,  816,  817,  811,
      818,  812,  821,  822,  823,  824,  825,  826,  827,  828,
      829,  830,  831,  832,  819,  833,  834,  835,  836,  837,
      813,  838,  839,  814,  840,  815,  816,  817,  841,  818,
      842,  821,  822,  823,  824,  825,  826,  827,  828,  829,
      830,  831,  832,  819,  833,  834,  835,  836,  837,  843,
      838,  839,  844,  840,  845,  846,  847,  841,  848,  842,
      849,  850,  851,  852,  853,  854,  857,  858,  859,  860,

      861,  862,  863,  864,  865,  866,  867,  868,  843,  869,
      870,  844,  871,  845,  846,  847,  872,  848,  873,  849,
      850,  851,  852,  853,  854,  857,  858,  859,  860,  861,
      862,  863,  864,  865,  866,  867,  868,  874,  869,  870,
      875,  871,  877,  878,  879,  872,  880,  873,  881,  882,
      883,  884,  885,  886,  887,  888,  889,  890,  891,  892,
      893,  894,  895,  896,  897,  898,  874,  899,  900,  875,
      901,  877,  878,  879,  902,  880,  903,  881,  882,  883,
      884,  885,  886,  887,  888,  889,  890,  891,  892,  893,
      894,  895,  896,  897,  898,  904,  899,  900,  905,  901,

      906,  907,  908,  902,  909,  903,  910,  911,  912,  913,
      915,  916,  917,  918,  919,  920,  921,  922,  923,  924,
      925,  926,  927,  928,  904,  929,  930,  905,  932,  906,
      907,  908,  933,  909,  934,  910,  911,  912,  913,  915,
      916,  917,  918,  919,  920,  921,  922,  923,  924,  925,
      926,  927,  928,  935,  929,  930,  938,  932,  936,  937,
      939,  933,  940,  934,  941,  942,  943,  945,  946,  947,
      948,  949,  950,  951,  952,  953,  954,  955,  956,  957,
      958,  959,  935,  960,  961,  938,  962,  936,  937,  939,
      963,  940,  964,  941,  942,  943,  945,  946,  947,  948,

      949,  950,  951,  952,  953,  954,  955,  956,  957,  958,
      959,  965,  960,  961,  966,  962,  967,  968,  969,  963,
      970,  964,  971,  972,  973,  974,  975,  976,  977,  978,
      979,  980,  981,  982,  983,  984,  985,  986,  987,  988,
      965,  989,  990,  966,  991,  967,  968,  969,  992,  970,
      994,  971,  972,  973,  974,  975,  976,  977,  978,  979,
      980,  981,  982,  983,  984,  985,  986,  987,  988,  996,
      989,  990,  997,  991,  998, 1000, 1001,  992, 1002,  994,
     1003, 1004, 1006, 1007,  999, 1008, 1009, 1010, 1011, 1012,
     1013, 1014, 1015, 1016, 1017, 1018, 1019, 1021,  996, 1022,

     1023,  997, 1024,  998, 1000, 1001, 1025, 1002, 1027, 1003,
     1004, 1006, 1007,  999, 1008, 1009, 1010, 1011, 1012, 1013,
     1014, 1015, 1016, 1017, 1018, 1019, 1021, 1028, 1022, 1023,
     1029, 1024, 1030, 1031, 1032, 1025, 1033, 1027, 1034, 1035,
     1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
     1046, 1047, 1048, 1049, 1050, 1051, 1028, 1052, 1053, 1029,
     1054, 1030, 1031, 1032, 1055, 1033, 1056, 1034, 1035, 1036,
     1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1057, 1052, 1053, 1058, 1054,
     1059, 1060, 1061, 1055, 1062, 1056, 1063, 1064, 1065, 1066,

     1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
     1077, 1078, 1079, 1081, 1057, 1082, 1083, 1058, 1084, 1059,
     1060, 1061, 1085, 1062, 1086, 1063, 1064, 1065, 1066, 1067,
     1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
     1078, 1079, 1081, 1087, 1082, 1083, 1088, 1084, 1089, 1090,
     1091, 1085, 1092, 1086, 1093, 1094, 1095, 1096, 1097, 1098,
     1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
     1110, 1111, 1087, 1112, 1113, 1088, 1114, 1089, 1090, 1091,
     1115, 1092, 1116, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
     1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110,

     1111, 1117, 1112, 1113, 1118, 1114, 1119, 1120, 1121, 1115,
     1122, 1116, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1117, 1130, 1130, 1118, 1130, 1119, 1120, 1121, 1130, 1122,
     1130, 1123, 1125, 1126, 1127, 1128, 1129,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   59, 1130,   59, 1130,   59,   59,
       59,   59,   59,  170,  170,  170,  170, 1130,  170,  170,
      170,  170,  172,  172,  172,  172,  172,  172,  172,  172,

      174, 1130, 1130,  174,  174,  174,  174,  174,  174,  176,
      176,  176,  176,  176,  176, 1130,  176,  176,  341,  341,
      341,  341,  341, 1130,  341,  341,  341,    9, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,

     1130, 1130, 1130, 1130, 1130
    } ;

static const flex_int16_t yy_chk[2406] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   11,   11,   11,
       12,   12,   12,   18,   18,   18,   20,   26,   20,   20,
       20,   21,   21,   33,   27,   26,   32,   26,   27,   35,

       20,   42,   26,   32,   27,   26,   30,   27,   30,   32,
       47,   71,   30,   36,   27, 1135,   26,   36,   30,   57,
       57,   57,   33,   27,   26,   32,   26,   27,   35,   20,
       42,   26,   32,   27,   26,   30,   27,   30,   32,   47,
       71,   30,   36,   27,   28,   72,   36,   30,   37,   74,
       75,   28,   37,   72,   79,   28,   37,   34,   28,   34,
       34,   28,   37, 1123,   28,   65,   65,   34, 1106,   65,
       65,   65,   34,   28,   72,  561,  561,   37,   74,   75,
       28,   37,   72,   79,   28,   37,   34,   28,   34,   34,
       28,   37,   73,   28,   29,   38,   34,   76,   29,   38,

       77,   34,   29,   38,   61,   61,   61,   77,   29,   38,
       76,   29, 1068,   73,   29, 1004,   61,  179,  179,  179,
       46,   73,   46,   29,   38,   46,   76,   29,   38,   77,
       41,   29,   38,   81,   41,  994,   77,   29,   38,   76,
       29,   41,   73,   29,   31,   61,   39,   41,   31,   46,
       39,   46,   31,   82,   46,   31,   69,   82,   31,   41,
       39,   31,   81,   41,   31,   39,   39,  512,   69,  967,
       41,  512,   83,   31,  954,   39,   41,   31,  951,   39,
       86,   31,   82,  889,   31,   69,   82,   31,   48,   39,
       31,   48,   48,   31,   39,   39,   40,   69,   48,   43,

       78,   83,   87,   43,   40,   78,   40,   43,   40,   86,
       89,   40,   40,   43,   63,   63,   63,   48,   90,  870,
       48,   48,   91,  850,  797,   40,   63,   48,   43,   78,
       92,   87,   43,   40,   78,   40,   43,   40,  767,   89,
       40,   40,   43,   44,   93,   44,   94,   90,   44,   44,
       45,   91,   44,   44,   44,   63,   44,   45,   45,   92,
       44,   44,   95,   44,   45,   44,   64,   45,   64,   64,
       64,  766,   44,   93,   44,   94,  711,   44,   44,   45,
       64,   44,   44,   44,   98,   44,   45,   45,   84,   44,
       44,   95,   44,   45,   44,   85,   45,   97,   99,   84,

       84,   84,  100,  666,   97,   85,  101,  662,   84,   64,
      102,  560,  101,   98,  547,  103,  104,   84,  105,   96,
      534,   96,  417,  341,   85,   96,   97,   99,   84,   84,
       84,  100,   96,   97,   85,  101,   96,   84,   88,  102,
       88,  101,  108,   88,  103,  104,  106,  105,   96,   88,
       96,   88,  107,  110,   96,  107,   88,  111,  112,  113,
      106,   96,  111,  111,  115,   96,  305,   88,  117,   88,
      114,  108,   88,  117,  118,  106,  118,  266,   88,  122,
       88,  107,  110,  116,  107,   88,  111,  112,  113,  106,
      114,  111,  111,  115,  119,  116,  120,  117,  123,  114,

      121,  120,  117,  118,  124,  118,  119,  125,  122,  121,
      127,  126,  116,  129,  121,  128,  128,  130,  131,  114,
      126,  132,  133,  119,  116,  120,  134,  123,  136,  121,
      120,  135,  135,  124,  137,  119,  125,  139,  121,  127,
      126,  140,  129,  121,  128,  128,  130,  131,  138,  142,
      132,  133,  138,  146,  143,  134,  147,  136,  138,   59,
      135,  135,  144,  137,  143,  148,  139,   54,   51,  144,
      140,   25,   23,  149,   19,  143,  150,  138,  142,  151,
       17,  138,  146,  143,  153,  147,  154,  138,  141,  145,
      141,  144,  155,  143,  148,   13,  145,  145,  144,  156,

      141,  141,  149,  141,  143,  150,  141,  152,  151,  141,
      152,  157,  159,  153,  158,  154,  162,  141,  145,  141,
      165,  155,  158,  158,  152,  145,  145,  152,  156,  141,
      141,  166,  141,  167,  160,  141,  152,  161,  141,  152,
      157,  159,  164,  158,  161,  162,  161,  168,  164,  165,
        9,  158,  158,  152,  160,  163,  152,    8,    7,  163,
      166,    6,  167,  160,  175,  175,  161,  181,  175,  175,
      175,  164,  182,  161,  185,  161,  168,  164,  177,  177,
      177,  178,  178,  160,  163,  178,  178,  178,  163,  190,
      177,  180,  180,  180,  191,  192,  181,  193,  194,  195,

      196,  182,  199,  185,  197,  198,  197,  200,  201,  198,
      202,  203,  204,  205,  206,  207,  208,  204,  190,  177,
      204,  197,  209,  191,  192,  210,  193,  194,  195,  196,
      211,  199,  212,  197,  198,  197,  200,  201,  198,  202,
      203,  204,  205,  206,  207,  208,  204,  213,  214,  204,
      197,  209,  215,  216,  210,  217,  218,  219,  220,  211,
      222,  212,  223,  224,  225,  226,  227,  228,  229,  230,
      231,  232,  216,  233,  234,  235,  213,  214,  236,  238,
      239,  215,  216,  240,  217,  218,  219,  220,  235,  222,
      241,  223,  224,  225,  226,  227,  228,  229,  230,  231,

      232,  216,  233,  234,  235,  237,  242,  236,  238,  239,
      243,  244,  240,  245,  246,  247,  248,  235,  249,  241,
      250,  252,  237,  254,  255,  247,  256,  257,  258,  260,
      261,  259,  263,    5,  237,  242,  264,  265,  267,  243,
      244,  259,  245,  246,  247,  248,  268,  249,  262,  250,
      252,  237,  254,  255,  247,  256,  257,  258,  260,  261,
      259,  263,  262,  269,  271,  264,  265,  267,  272,  273,
      259,  274,  275,  262,  276,  268,  277,  262,  278,  279,
      280,  282,  283,  281,  284,  286,  285,  287,  288,    0,
      290,  262,  269,  271,  286,  291,  292,  272,  273,  285,

      274,  275,  281,  276,  293,  277,  294,  278,  279,  280,
      282,  283,  281,  284,  286,  285,  287,  288,  289,  290,
      295,  296,  289,  286,  291,  292,  297,  298,  285,  299,
      300,  281,  301,  293,  302,  294,  303,  304,  306,  307,
      300,  308,  309,  310,  311,  313,  312,  289,  312,  295,
      296,  289,  314,  315,  317,  297,  298,  318,  299,  300,
      319,  301,  320,  302,  321,  303,  304,  306,  307,  322,
      308,  309,  310,  311,  313,  312,  323,  312,  326,  325,
      327,  314,  315,  317,  325,  328,  318,  329,  330,  319,
      331,  320,  332,  321,  333,  335,  334,  334,  322,  336,

      337,  338,  344,  336,    0,  323,    0,  326,  325,  327,
      334,    0,    0,  325,  328,    0,  329,  330,  345,  331,
      346,  332,  347,  333,  335,  334,  334,  348,  336,  337,
      338,  344,  336,  339,  339,  339,  340,  340,  340,  334,
      342,  342,  342,  343,  343,  343,  349,  345,  350,  346,
      351,  347,  353,  354,  357,  358,  348,  359,  360,  361,
      362,  363,  364,  365,  366,  363,  367,  368,  369,  370,
        0,  372,  373,    0,  374,  349,  375,  350,  376,  351,
      377,  353,  354,  357,  358,    0,  359,  360,  361,  362,
      363,  364,  365,  366,  363,  367,  368,  369,  370,  371,

      372,  373,  371,  374,  378,  375,  379,  376,  380,  377,
      384,  385,  371,  386,  371,  387,  388,  389,  371,  390,
      392,  393,  394,  395,  396,  398,  400,  401,  371,  402,
      403,  371,  404,  378,  406,  379,  407,  380,  408,  384,
      385,  371,  386,  371,  387,  388,  389,  371,  390,  392,
      393,  394,  395,  396,  398,  400,  401,  409,  402,  403,
      410,  404,  411,  406,  413,  407,  415,  408,  418,  421,
      422,  423,  425,  411,  426,  427,  428,  429,  430,  431,
      433,  432,  434,  436,  437,  438,  409,  432,  439,  410,
      440,  411,  442,  413,  443,  415,  444,  418,  421,  422,

      423,  425,  411,  426,  427,  428,  429,  430,  431,  433,
      432,  434,  436,  437,  438,  446,  432,  439,  447,  440,
      448,  442,  449,  443,  451,  444,  452,  453,  451,  454,
      455,  456,  457,  460,  461,  462,  463,  464,  465,  466,
      467,  468,  470,  471,  446,  472,  473,  447,  474,  448,
        0,  449,  477,  451,  478,  452,  453,  451,  454,  455,
      456,  457,  460,  461,  462,  463,  464,  465,  466,  467,
      468,  470,  471,  475,  472,  473,  479,  474,  480,  475,
      481,  477,  482,  478,  483,  484,  485,  486,  487,  488,
      489,  492,  493,  494,  495,  497,  498,  499,  500,  502,

      503,  504,  475,  505,  509,  479,  513,  480,  475,  481,
      514,  482,  517,  483,  484,  485,  486,  487,  488,  489,
      492,  493,  494,  495,  497,  498,  499,  500,  502,  503,
      504,  518,  505,  509,  519,  513,  520,  521,  522,  514,
      523,  517,  524,  525,  526,  527,  528,  529,  530,  531,
      532,  533,  535,  537,  538,  539,  540,  541,  542,  543,
      518,  544,  545,  519,  546,  520,  521,  522,  548,  523,
      549,  524,  525,  526,  527,  528,  529,  530,  531,  532,
      533,  535,  537,  538,  539,  540,  541,  542,  543,  550,
      544,  545,  551,  546,  553,  554,  555,  548,  556,  549,

      557,  562,  563,  564,  565,  566,  567,  569,  570,  571,
      572,  574,  575,  576,  577,  578,  579,  580,  550,  583,
      584,  551,  585,  553,  554,  555,  586,  556,  587,  557,
      562,  563,  564,  565,  566,  567,  569,  570,  571,  572,
      574,  575,  576,  577,  578,  579,  580,  588,  583,  584,
      589,  585,  591,  592,  593,  586,  594,  587,  595,  597,
      598,  599,  600,  603,  604,  605,  606,  607,  608,  609,
      610,  611,  612,  615,  616,  617,  588,  618,  619,  589,
      620,  591,  592,  593,  622,  594,  623,  595,  597,  598,
      599,  600,  603,  604,  605,  606,  607,  608,  609,  610,

      611,  612,  615,  616,  617,  624,  618,  619,  625,  620,
      627,  628,  629,  622,  630,  623,  631,  633,  634,  635,
      637,  638,  639,  641,  642,  643,  644,  645,  646,  647,
      648,  650,  651,  653,  624,  654,  655,  625,  658,  627,
      628,  629,  659,  630,  660,  631,  633,  634,  635,  637,
      638,  639,  641,  642,  643,  644,  645,  646,  647,  648,
      650,  651,  653,  663,  654,  655,  665,  658,  667,  668,
      669,  659,  670,  660,  671,  672,  674,  675,  676,  677,
      678,  679,  680,  681,  682,  683,  684,  685,  686,  687,
      689,  690,  663,  691,  692,  665,  695,  667,  668,  669,

      697,  670,  698,  671,  672,  674,  675,  676,  677,  678,
      679,  680,  681,  682,  683,  684,  685,  686,  687,  689,
      690,  699,  691,  692,  702,  695,  705,  706,  708,  697,
      710,  698,  713,  714,  716,  717,  718,  722,  723,  724,
      726,  727,  728,  729,  710,  730,  732,  735,  736,  737,
      699,  738,  739,  702,  740,  705,  706,  708,  741,  710,
      742,  713,  714,  716,  717,  718,  722,  723,  724,  726,
      727,  728,  729,  710,  730,  732,  735,  736,  737,  743,
      738,  739,  744,  740,  745,  748,  749,  741,  752,  742,
      753,  756,  757,  758,  760,  761,  769,  770,  771,  772,

      773,  774,  777,  778,  779,  780,  782,  785,  743,  786,
      787,  744,  789,  745,  748,  749,  792,  752,  793,  753,
      756,  757,  758,  760,  761,  769,  770,  771,  772,  773,
      774,  777,  778,  779,  780,  782,  785,  795,  786,  787,
      796,  789,  799,  800,  801,  792,  802,  793,  803,  806,
      807,  809,  812,  813,  814,  816,  817,  818,  819,  820,
      822,  823,  824,  826,  827,  828,  795,  829,  830,  796,
      831,  799,  800,  801,  833,  802,  835,  803,  806,  807,
      809,  812,  813,  814,  816,  817,  818,  819,  820,  822,
      823,  824,  826,  827,  828,  836,  829,  830,  837,  831,

      839,  840,  843,  833,  844,  835,  845,  847,  848,  849,
      851,  852,  853,  854,  855,  856,  857,  859,  860,  861,
      863,  864,  866,  867,  836,  868,  869,  837,  872,  839,
      840,  843,  873,  844,  874,  845,  847,  848,  849,  851,
      852,  853,  854,  855,  856,  857,  859,  860,  861,  863,
      864,  866,  867,  875,  868,  869,  881,  872,  876,  876,
      882,  873,  885,  874,  886,  887,  888,  890,  892,  893,
      894,  895,  896,  897,  898,  899,  900,  901,  902,  903,
      904,  906,  875,  907,  908,  881,  909,  876,  876,  882,
      910,  885,  913,  886,  887,  888,  890,  892,  893,  894,

      895,  896,  897,  898,  899,  900,  901,  902,  903,  904,
      906,  914,  907,  908,  915,  909,  916,  919,  920,  910,
      921,  913,  923,  924,  925,  926,  928,  929,  931,  932,
      933,  935,  936,  937,  938,  939,  940,  941,  943,  944,
      914,  945,  946,  915,  949,  916,  919,  920,  950,  921,
      953,  923,  924,  925,  926,  928,  929,  931,  932,  933,
      935,  936,  937,  938,  939,  940,  941,  943,  944,  955,
      945,  946,  956,  949,  957,  961,  962,  950,  964,  953,
      965,  966,  968,  969,  957,  971,  974,  975,  977,  981,
      982,  985,  986,  988,  990,  992,  993,  995,  955,  997,

      998,  956, 1001,  957,  961,  962, 1003,  964, 1005,  965,
      966,  968,  969,  957,  971,  974,  975,  977,  981,  982,
      985,  986,  988,  990,  992,  993,  995, 1006,  997,  998,
     1007, 1001, 1008, 1009, 1010, 1003, 1011, 1005, 1012, 1013,
     1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026,
     1027, 1028, 1031, 1032, 1034, 1036, 1006, 1037, 1039, 1007,
     1040, 1008, 1009, 1010, 1041, 1011, 1042, 1012, 1013, 1014,
     1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027,
     1028, 1031, 1032, 1034, 1036, 1043, 1037, 1039, 1045, 1040,
     1046, 1047, 1049, 1041, 1050, 1042, 1051, 1052, 1053, 1054,

     1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
     1065, 1066, 1067, 1069, 1043, 1070, 1071, 1045, 1074, 1046,
     1047, 1049, 1075, 1050, 1076, 1051, 1052, 1053, 1054, 1055,
     1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
     1066, 1067, 1069, 1077, 1070, 1071, 1078, 1074, 1079, 1080,
     1081, 1075, 1082, 1076, 1083, 1084, 1086, 1087, 1088, 1089,
     1090, 1092, 1093, 1095, 1097, 1099, 1100, 1102, 1103, 1104,
     1107, 1108, 1077, 1109, 1110, 1078, 1112, 1079, 1080, 1081,
     1114, 1082, 1115, 1083, 1084, 1086, 1087, 1088, 1089, 1090,
     1092, 1093, 1095, 1097, 1099, 1100, 1102, 1103, 1104, 1107,

     1108, 1116, 1109, 1110, 1117, 1112, 1118, 1119, 1120, 1114,
     1121, 1115, 1122, 1124, 1125, 1126, 1127, 1128,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1116,    0,    0, 1117,    0, 1118, 1119, 1120,    0, 1121,
        0, 1122, 1124, 1125, 1126, 1127, 1128, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1132, 1132, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1134,    0, 1134,    0, 1134, 1134,
     1134, 1134, 1134, 1136, 1136, 1136, 1136,    0, 1136, 1136,
     1136, 1136, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1138,    0,    0, 1138, 1138, 1138, 1138, 1138, 1138, 1139,
     1139, 1139, 1139, 1139, 1139,    0, 1139, 1139, 1140, 1140,
     1140, 1140, 1140,    0, 1140, 1140, 1140, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,

     1130, 1130, 1130, 1130, 1130
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sqlparser.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "sqlparser.l"

#include "node.h"
#include "sqlparser_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#line 1382 "sqlparser_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1395 "sqlparser_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 98 "sqlparser.l"

#line 1682 "sqlparser_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1131 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1130 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 99 "sqlparser.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 100 "sqlparser.l"
{ return ALTER; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 101 "sqlparser.l"
{ return AND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 102 "sqlparser.l"
{ return ANY; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 103 "sqlparser.l"
{ return ALL; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 104 "sqlparser.l"
{ return AS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 105 "sqlparser.l"
{ return ASC; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 106 "sqlparser.l"
{ return BEGI; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 107 "sqlparser.l"
{ return BETWEEN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 108 "sqlparser.l"
{ return BIGINT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 109 "sqlparser.l"
{ return BINARY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 110 "sqlparser.l"
{ return BOOLEAN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 111 "sqlparser.l"
{ return BOTH; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 112 "sqlparser.l"
{ return BROWSE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 113 "sqlparser.l"
{ return BY; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 114 "sqlparser.l"
{ return CASCADE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 115 "sqlparser.l"
{ return CASE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 116 "sqlparser.l"
{ return CHARACTER; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 117 "sqlparser.l"
{ return CLUSTER; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 118 "sqlparser.l"
{ return COLUMN; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 119 "sqlparser.l"
{ return COLUMNS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 120 "sqlparser.l"
{ return COMMIT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 121 "sqlparser.l"
{ return CONSISTENT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 122 "sqlparser.l"
{ return CREATE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 123 "sqlparser.l"
{ return CREATETIME; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 124 "sqlparser.l"
{ return CROSS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 125 "sqlparser.l"
{ return CURRENT_USER; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 126 "sqlparser.l"
{ return DATE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 127 "sqlparser.l"
{ return DATETIME; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 128 "sqlparser.l"
{ return DEALLOCATE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 129 "sqlparser.l"
{ return DECIMAL; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 130 "sqlparser.l"
{ return DEFAULT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 131 "sqlparser.l"
{ return DELETE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 132 "sqlparser.l"
{ return DESC; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 133 "sqlparser.l"
{ return DESCRIBE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 134 "sqlparser.l"
{ return DISTINCT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 135 "sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 136 "sqlparser.l"
{ return DROP; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 137 "sqlparser.l"
{ return DUAL; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 138 "sqlparser.l"
{ return ELSE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 139 "sqlparser.l"
{ return END; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 140 "sqlparser.l"
{ return ERROR; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 141 "sqlparser.l"
{ return EXCEPT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 142 "sqlparser.l"
{ return EXECUTE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 143 "sqlparser.l"
{ return EXISTS; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 144 "sqlparser.l"
{ return EXPLAIN; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 145 "sqlparser.l"
{ return FETCH; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 146 "sqlparser.l"
{ return FIRST; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 147 "sqlparser.l"
{ return NEXT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 148 "sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 149 "sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 150 "sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 151 "sqlparser.l"
{ return FOR; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 152 "sqlparser.l"
{ return FROM; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 153 "sqlparser.l"
{ return FULL; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 154 "sqlparser.l"
{ return GRANT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 155 "sqlparser.l"
{ return GROUP; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 156 "sqlparser.l"
{ return GLOBAL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 157 "sqlparser.l"
{ return HASH; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 158 "sqlparser.l"
{ return HAVING; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 159 "sqlparser.l"
{ return IDENTIFIED; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 160 "sqlparser.l"
{ return IF; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 161 "sqlparser.l"
{ return IN; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 162 "sqlparser.l"
{ return INNER; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 163 "sqlparser.l"
{ return INTEGER; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 164 "sqlparser.l"
{ return INTEGER; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 165 "sqlparser.l"
{ return INTERSECT; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 166 "sqlparser.l"
{ return INSERT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 167 "sqlparser.l"
{ return INTO; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 168 "sqlparser.l"
{ return IS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 169 "sqlparser.l"
{ return JOIN; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 170 "sqlparser.l"
{ return KEY; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 171 "sqlparser.l"
{ return LEADING; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 172 "sqlparser.l"
{ return LEFT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 173 "sqlparser.l"
{ return LIMIT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 174 "sqlparser.l"
{ return LIKE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 175 "sqlparser.l"
{ return LOCAL; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 176 "sqlparser.l"
{ return LOCKED; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 177 "sqlparser.l"
{ return LOOP; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 178 "sqlparser.l"
{ return MEDIUMINT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 179 "sqlparser.l"
{ return MEMORY; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 180 "sqlparser.l"
{ return MERGE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 181 "sqlparser.l"
{ return MOD; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 182 "sqlparser.l"
{ return MODIFYTIME; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 183 "sqlparser.l"
{ return NATURAL; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 184 "sqlparser.l"
{ return NOT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 185 "sqlparser.l"
{ return NUMERIC; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 186 "sqlparser.l"
{ return OFFSET; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 187 "sqlparser.l"
{ return ON; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 188 "sqlparser.l"
{ return ONLY; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 189 "sqlparser.l"
{ return OPTION; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 190 "sqlparser.l"
{ return OR; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 191 "sqlparser.l"
{ return ORDER; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 192 "sqlparser.l"
{ return OUTER; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 193 "sqlparser.l"
{ return COMMENT; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 194 "sqlparser.l"
{ return PARAMETERS; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 195 "sqlparser.l"
{ return PASSWORD; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 196 "sqlparser.l"
{ return PRECISION; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 197 "sqlparser.l"
{ return PREPARE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 198 "sqlparser.l"
{ return PRIMARY; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 199 "sqlparser.l"
{ return REAL; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 200 "sqlparser.l"
{ return REMOTE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 201 "sqlparser.l"
{ return RENAME; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 202 "sqlparser.l"
{ return REPLACE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 203 "sqlparser.l"
{ return RESTRICT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 204 "sqlparser.l"
{ return REVOKE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 205 "sqlparser.l"
{ return RIGHT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 206 "sqlparser.l"
{ return ROLLBACK; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 207 "sqlparser.l"
{ return ROW; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 208 "sqlparser.l"
{ return ROWS; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 209 "sqlparser.l"
{ return PRIVILEGES; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 210 "sqlparser.l"
{ return SELECT; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 211 "sqlparser.l"
{ return SCHEMA; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 212 "sqlparser.l"
{ return PROCESSLIST; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 213 "sqlparser.l"
{ return SCOPE; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 214 "sqlparser.l"
{ return SESSION; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 215 "sqlparser.l"
{ return SET; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 216 "sqlparser.l"
{ return SHOW; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 217 "sqlparser.l"
{ return SMALLINT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 218 "sqlparser.l"
{ return SNAPSHOT; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 219 "sqlparser.l"
{ return SPFILE; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 220 "sqlparser.l"
{ return START; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 221 "sqlparser.l"
{ return STATIC; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 222 "sqlparser.l"
{ return WEAK;   }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 223 "sqlparser.l"
{ return STRONG; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 224 "sqlparser.l"
{ return SYSTEM; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 225 "sqlparser.l"
{ return TABLE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 226 "sqlparser.l"
{ return TABLES; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 227 "sqlparser.l"
{ return THEN; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 228 "sqlparser.l"
{ return TIME; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 229 "sqlparser.l"
{ return TIMESTAMP; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 230 "sqlparser.l"
{ return TINYINT; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 231 "sqlparser.l"
{ return TO; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 232 "sqlparser.l"
{ return TRAILING; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 233 "sqlparser.l"
{ return TRANSACTION; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 234 "sqlparser.l"
{ return UNION; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 235 "sqlparser.l"
{ return UPDATE; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 236 "sqlparser.l"
{ return USER; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 237 "sqlparser.l"
{ return USING; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 238 "sqlparser.l"
{ return VALUES; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 239 "sqlparser.l"
{ return VARBINARY; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 240 "sqlparser.l"
{ return VARCHAR; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 241 "sqlparser.l"
{ return WHERE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 242 "sqlparser.l"
{ return WHEN; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 243 "sqlparser.l"
{ return WITH; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 244 "sqlparser.l"
{ return WORK; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 245 "sqlparser.l"
{ return KILL; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 246 "sqlparser.l"
{ return QUERY; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 247 "sqlparser.l"
{ return CONNECTION; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 248 "sqlparser.l"
{ return FROZEN;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 249 "sqlparser.l"
{ return GLOBAL_ALIAS; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 250 "sqlparser.l"
{ return SESSION_ALIAS; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 251 "sqlparser.l"
{ return CHANGE_OBI; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 252 "sqlparser.l"
{ return SWITCH_CLUSTER; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 253 "sqlparser.l"
{ return SET_MASTER_CLUSTER; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 254 "sqlparser.l"
{ return SET_SLAVE_CLUSTER;  }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 255 "sqlparser.l"
{ return MASTER; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 256 "sqlparser.l"
{ return SLAVE;  }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 257 "sqlparser.l"
{ return FORCE;  }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 258 "sqlparser.l"
{ return TOP; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 259 "sqlparser.l"
{ return PERCENT; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 260 "sqlparser.l"
{ return TIES; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 261 "sqlparser.l"
{ return FAST; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 262 "sqlparser.l"
{ return DISABLE; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 263 "sqlparser.l"
{ return EXTERNALPUSHDOWN; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 264 "sqlparser.l"
{ return IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 265 "sqlparser.l"
{ return KEEP; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 266 "sqlparser.l"
{ return PLAN; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 267 "sqlparser.l"
{ return KEEPFIXED; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 268 "sqlparser.l"
{ return MAX_GRANT_PERCENT; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 269 "sqlparser.l"
{ return MIN_GRANT_PERCENT; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 270 "sqlparser.l"
{ return MAXDOP; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 271 "sqlparser.l"
{ return MAXRECURSION; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 272 "sqlparser.l"
{ return NO_PERFORMANCE_SPOOL; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 273 "sqlparser.l"
{ return PARAMETERIZATION; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 274 "sqlparser.l"
{ return SIMPLE; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 275 "sqlparser.l"
{ return FORCED; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 276 "sqlparser.l"
{ return RECOMPILE; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 277 "sqlparser.l"
{ return ROBUST; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 278 "sqlparser.l"
{ return CHECKSUM; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 279 "sqlparser.l"
{ return BINARY_CHECKSUM; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 280 "sqlparser.l"
{ return RANK; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 281 "sqlparser.l"
{ return DENSE_RANK; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 282 "sqlparser.l"
{ return ROW_NUMBER; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 283 "sqlparser.l"
{ return NTILE; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 284 "sqlparser.l"
{ return PARTITION; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 285 "sqlparser.l"
{ return RANGE; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 286 "sqlparser.l"
{ return UNBOUNDED; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 287 "sqlparser.l"
{ return PRECEDING; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 288 "sqlparser.l"
{ return CURRENT; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 289 "sqlparser.l"
{ return FOLLOWING; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 290 "sqlparser.l"
{ return OVER; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 291 "sqlparser.l"
{ return VARP; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 292 "sqlparser.l"
{ return VAR; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 293 "sqlparser.l"
{ return SUM; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 294 "sqlparser.l"
{ return STDEVP; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 295 "sqlparser.l"
{ return STDEV; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 296 "sqlparser.l"
{ return MIN; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 297 "sqlparser.l"
{ return MAX; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 298 "sqlparser.l"
{ return LEAD; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 299 "sqlparser.l"
{ return LAST_VALUE; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 300 "sqlparser.l"
{ return LAG; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 301 "sqlparser.l"
{ return GROUPING_ID; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 302 "sqlparser.l"
{ return GROUPING; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 303 "sqlparser.l"
{ return FIRST_VALUE; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 304 "sqlparser.l"
{ return COUNT_BIG; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 305 "sqlparser.l"
{ return COUNT; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 306 "sqlparser.l"
{ return CHECKSUM_AGG; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 307 "sqlparser.l"
{ return AVG; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 308 "sqlparser.l"
{ return SYSTEM_USER; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 309 "sqlparser.l"
{ return STUFF; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 310 "sqlparser.l"
{ return SESSION_USER; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 311 "sqlparser.l"
{ return NULLIF; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 312 "sqlparser.l"
{ return MIN_ACTIVE_ROWVERSION; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 313 "sqlparser.l"
{ return ISNULL; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 314 "sqlparser.l"
{ return IDENTITY; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 315 "sqlparser.l"
{ return GETUTCDATE; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 316 "sqlparser.l"
{ return GETDATE; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 317 "sqlparser.l"
{ return DATEPART; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 318 "sqlparser.l"
{ return DATENAME; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 319 "sqlparser.l"
{ return DATEDIFF; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 320 "sqlparser.l"
{ return DATEADD; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 321 "sqlparser.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 322 "sqlparser.l"
{ return CONVERT; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 323 "sqlparser.l"
{ return COALESCE; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 324 "sqlparser.l"
{ return CAST; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 328 "sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return NULLX;
}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 333 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return INTNUM;
}
	YY_BREAK
case 229:
#line 341 "sqlparser.l"
case 230:
#line 342 "sqlparser.l"
case 231:
YY_RULE_SETUP
#line 342 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 232:
#line 350 "sqlparser.l"
case 233:
YY_RULE_SETUP
#line 350 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 357 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return BOOL;
}
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 364 "sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return UNKNOWN;
}
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 369 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return BOOL;
}
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 376 "sqlparser.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 382 "sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 386 "sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 390 "sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return STRING;
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 399 "sqlparser.l"
{
    BEGIN(sb);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '[';
}
	YY_BREAK
case 242:
/* rule 242 can match eol */
YY_RULE_SETUP
#line 405 "sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 409 "sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << ']';
    std::string text = ((ParseResult*)yyextra)->buf_.str();
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, text.c_str());
    nd->terminalToken_.str = text.substr(1, text.length() - 2);
    yylval->node = nd;
    return NAME;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 419 "sqlparser.l"
{
  fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return ERROR;
}
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 424 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = std::string(yytext+1, yytext + strlen(yytext) - 1);
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return NAME;
}
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 433 "sqlparser.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return NAME;
}
	YY_BREAK
case 246:
/* rule 246 can match eol */
YY_RULE_SETUP
#line 442 "sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 247:
/* rule 247 can match eol */
YY_RULE_SETUP
#line 443 "sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 445 "sqlparser.l"
{ return yytext[0];}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 447 "sqlparser.l"
{ return CNNOP; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 448 "sqlparser.l"
{ return COMP_EQ; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 449 "sqlparser.l"
{ return COMP_GE; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 450 "sqlparser.l"
{ return COMP_GT; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 451 "sqlparser.l"
{ return COMP_LE; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 452 "sqlparser.l"
{ return COMP_LT; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 453 "sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 454 "sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 456 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
case YY_STATE_EOF(sb):
#line 463 "sqlparser.l"
{ return END_P; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 465 "sqlparser.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return ERROR;
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 469 "sqlparser.l"
ECHO;
	YY_BREAK
#line 3119 "sqlparser_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1131 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1131 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1130);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 469 "sqlparser.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

