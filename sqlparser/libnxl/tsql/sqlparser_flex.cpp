#line 2 "sqlparser_flex.cpp"

#line 4 "sqlparser_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

#ifdef yyget_lloc
#define yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc yyget_lloc
#endif

#ifdef yyset_lloc
#define yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc yyset_lloc
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 181
#define YY_END_OF_BUFFER 182
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[748] =
    {   0,
        0,    0,    0,    0,  164,  164,  182,  180,  169,  169,
      170,  180,  170,  162,  170,  170,  170,  153,  176,  172,
      174,  179,  180,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  170,  181,  164,
      165,  169,  178,    0,  168,  158,    0,  157,  153,    0,
      175,  177,  173,    0,  167,  167,  167,  167,    6,  167,
      167,  167,   14,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,   57,   58,

       65,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,   82,  167,   84,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  122,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  171,  164,
      163,  166,  168,    0,    0,  157,    0,    0,  154,    0,
        0,    1,    5,  167,    3,    4,    7,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,   30,  167,  167,  167,  167,  167,
      167,  167,  167,   40,  167,  167,  167,  167,  167,  167,

      167,   49,  167,  167,  167,  167,  167,  167,  167,  167,
      167,   60,  167,   67,  167,  167,  167,  167,  167,  167,
      167,  167,  167,   76,  167,   79,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      106,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  149,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,    0,
      156,    0,    0,  155,    0,    0,  167,  167,  167,  167,
      167,   12,   13,  167,   16,  167,   17,  167,  167,  167,

      167,  167,  167,  167,  167,   27,  167,  167,  167,  167,
       33,  167,  167,   37,   38,   39,  167,  167,  167,  167,
      167,  167,  167,  167,   50,  167,   51,  167,  167,  167,
      167,  167,  167,  167,  167,   64,   66,  136,  167,   69,
       71,  167,  167,  167,  167,  167,  167,  167,  167,  152,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,   93,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  107,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  118,  151,  119,
      167,  167,  167,  159,  167,  167,  167,  127,  167,  167,

      167,  167,  113,  133,  167,  134,  135,    0,    0,    0,
        2,    8,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,   25,  167,  167,  167,
      167,  167,  167,  167,  167,  167,   41,  167,  167,  167,
      167,  161,   46,  148,  167,  167,   52,   53,  167,  167,
       59,  167,  167,  167,  167,   70,   72,  167,  167,  167,
      167,  167,  167,  167,  167,  167,   85,   86,  167,  167,
      167,  167,  167,  167,  167,  167,  137,  167,  167,  167,
      167,   98,  167,  167,  104,  167,  167,  167,  167,  147,
      167,  167,  167,  111,  167,  167,  167,  167,  116,  167,

      167,  167,  167,  125,  167,  167,  128,  167,  167,  167,
      132,  168,    0,    0,  167,   10,   11,  167,  167,  167,
      167,  167,   19,  167,   21,  167,  167,   23,  167,  167,
      167,  167,  167,   32,  167,  167,   36,   42,  167,   44,
      167,   47,   48,  139,   54,   55,  167,   63,  167,  167,
      167,   73,  146,  167,   75,  167,  167,  167,   81,   83,
      167,  167,  167,  167,  167,  167,  167,  167,   94,  167,
      167,   97,  167,  102,  101,  167,  167,  167,  167,  167,
      110,  112,  114,  167,  115,  117,  167,  167,  167,  167,
      167,  126,  129,  167,  167,    0,    0,    9,   12,   15,

      167,  167,   18,   20,   87,  167,  167,  167,  167,  167,
      167,   30,   31,  167,  167,   43,   45,  167,   61,  167,
       68,  167,  167,   78,   80,  167,  167,  150,  167,   91,
       92,  167,  167,   95,  167,  167,  105,  167,  167,  167,
      167,  167,  167,  121,  167,  167,  160,  167,  131,  140,
        0,  167,  167,  167,  167,  167,  167,   28,  167,   34,
       35,  167,  167,  167,  167,  167,   89,  167,  167,  167,
       96,   99,  167,  167,  108,  109,  167,  167,  123,  167,
      167,  167,  141,  167,   17,  167,  167,  167,  167,  167,
      167,   62,   74,  167,  167,   90,  167,  167,  167,  167,

      167,  120,  167,  130,  167,  142,  138,   22,   24,  167,
       29,   56,   77,   88,  100,  167,  167,  167,  167,  167,
      167,  167,  103,  167,  167,  167,  124,  167,   26,  167,
      167,  167,  131,  167,  167,  167,  167,  167,  143,  167,
      167,  167,  167,  167,  145,  144,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    7,    7,    8,    7,
        7,    9,   10,    7,   11,   12,   13,   14,   14,   14,
       14,   15,   14,   14,   14,   16,   14,    1,    7,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
        1,    1,    1,    7,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,   75,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    5,    6,    7,
        1,    1,    6,    8,    8,    8,    1,    1,    1,    1,
        1,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    1
    } ;

static const flex_int16_t yy_base[756] =
    {   0,
        0,    0,    0,    0,  450,  313,  306, 1568,   74,   77,
      267,    0, 1568, 1568,  257,   68,  256,   73,   72, 1568,
      241, 1568,  233,   61,   72,  124,  172,   70,   78,   71,
       70,  124,   59,   86,  122,  146,  147,  178,  197,   55,
      171,  240,  231,  255,   84,  226,    0,  176, 1568,    0,
      240,  152, 1568,  237,    0,  300,    0,  309,  315,  322,
     1568, 1568, 1568,  137,    0,   82,  189,  115,  176,  190,
      243,  271,    0,  166,  190,  230,  309,  292,  237,  279,
      324,  300,  307,  314,  330,  314,  331,  319,  335,  327,
      327,  327,  338,  347,  346,  367,  351,  369,    0,  365,

        0,  366,  351,  365,  386,  370,  386,  371,  392,  387,
      373,  374,  385,  393,    0,  387,  409,  395,  409,  404,
      424,  425,  445,  424,  423,  428,  432,  423,  440,  444,
      446,  442,  475,  441,  434,  467,  476,  484,  466,  483,
      474,  483,  490,  488,  489,  487,  481,  484, 1568,    0,
     1568, 1568,    0,  545,    0,  548,  555,  561,  564,  493,
      531,    0,    0,  532,    0,    0,    0,  537,  524,  542,
      551,  548,  553,  562,  548,  549,  548,  557,  557,  571,
      556,  559,  576,  570,  574,  583,  580,  583,  570,  589,
      584,  589,  600,    0,  591,  602,  611,  596,  604,  600,

      619,  618,  609,  611,  622,  611,  605,  620,  616,  626,
      631,  639,  623,    0,  626,  635,  620,  640,  646,  658,
      640,  652,  653,  661,  652,    0,  662,  670,  657,  668,
      673,  674,  679,  664,  681,  682,  677,  686,  673,  680,
      692,  682,  688,  694,  705,  702,  710,  706,  718,  705,
      189,  704,  706,  717,  714,  722,  714,  718,  717,  718,
      727,  729,  725,  740,  721,    0,  738,  743,  738,  748,
      762,  749,  754,  748,  774,  767,  767,  774,  772,  793,
      798,  217,  804,  807,  769,  787,  789,  799,  809,  801,
      798,  812,    0,  817,    0,  812,  819,  801,  809,  818,

      819,  816,  806,  809,  824,  810,  819,  819,  814,  816,
      819,  829,  827,    0,    0,    0,  842,  845,  846,  848,
      868,  865,  851,  867,    0,  868,    0,  873,  855,  860,
      863,  858,  861,  862,  874,    0,    0,    0,  873,    0,
        0,  863,  872,  880,  881,  868,  872,  885,  875,    0,
      896,  910,  906,  904,  905,  911,  902,  921,  918,  927,
      928,  921,  926,  907,    0,  920,  933,  917,  925,  917,
      936,  926,  935,  940,  935,  955,    0,  940,  934,  950,
      963,  956,  968,  964,  976,  975,  976,    0,    0,  963,
      974,  972,  966,    0,  972,  972,  968,    0,  982,  985,

      982,  984,    0,    0,  988,    0,    0,  161,  992,  978,
        0,    0,  993,  979,  975, 1021, 1019, 1023, 1026, 1025,
     1017, 1018, 1013, 1031, 1016, 1031,    0, 1023, 1029, 1024,
     1039, 1029, 1037, 1034, 1030, 1040,    0, 1026, 1027, 1029,
     1042,    0,  294,    0, 1038, 1041,    0,    0, 1047, 1067,
        0, 1057, 1077, 1064, 1070,    0,    0, 1081, 1068, 1074,
     1063, 1064, 1089, 1082, 1072, 1079,    0,    0, 1089, 1080,
     1082, 1078, 1080, 1081, 1088, 1082,    0, 1097, 1102, 1097,
     1102,    0, 1107, 1129,    0, 1111, 1121, 1136, 1126,    0,
     1130, 1132, 1136,    0, 1139, 1136, 1136, 1132, 1127, 1127,

     1134, 1140, 1149,    0, 1128, 1147,    0, 1134, 1140, 1154,
        0, 1568, 1155, 1150, 1146,    0,    0, 1147, 1157,  155,
     1164, 1167, 1171, 1171,    0, 1172, 1173, 1174, 1175, 1183,
     1194, 1186, 1179,    0, 1198, 1198,    0,    0, 1197,    0,
     1189,    0,    0,    0,    0,    0, 1198,    0, 1187, 1201,
     1200,    0,    0, 1199,    0, 1189, 1198, 1210,    0,    0,
     1194, 1197, 1196, 1229, 1234, 1219, 1240, 1227,    0, 1242,
     1245,    0, 1246,    0,    0, 1236, 1232, 1251, 1239, 1239,
        0,    0,    0,  133,    0,    0, 1254, 1236, 1243, 1255,
     1245,    0,    0, 1259, 1243, 1250, 1248,    0,    0,    0,

     1249, 1262,    0,    0,    0, 1259, 1264, 1261,  123, 1287,
     1292,    0,    0, 1293, 1279,    0,    0, 1291,    0, 1298,
        0, 1288, 1294,    0,    0, 1299, 1301,    0, 1291,    0,
        0, 1300, 1296,    0, 1289, 1299,    0, 1291, 1290, 1293,
     1294, 1312, 1303,    0, 1310, 1298,    0, 1303, 1321, 1568,
     1309, 1322, 1328, 1332, 1338, 1340, 1333,    0, 1335,    0,
        0, 1351, 1337, 1338, 1346, 1342,    0, 1347, 1357, 1354,
        0,    0, 1359, 1360,    0,    0, 1354, 1351,    0, 1359,
     1344, 1367, 1568, 1362,    0, 1358, 1355, 1371, 1358, 1373,
     1396,    0,    0, 1396, 1387,    0, 1388, 1389, 1391,  114,

     1389,    0, 1396,    0, 1392,    0,    0,    0,    0, 1408,
        0,    0,    0,    0,    0, 1394,  102, 1412, 1397, 1403,
     1413, 1401,    0, 1417, 1409, 1402,    0, 1405,    0, 1412,
     1404, 1421,    0, 1408, 1411, 1413, 1413, 1434,    0, 1435,
     1455, 1456, 1444, 1445,    0,    0, 1568, 1511, 1519, 1527,
       85, 1535, 1543, 1551, 1559
    } ;

static const flex_int16_t yy_def[756] =
    {   0,
      747,    1,  748,  748,  749,  749,  747,  747,  747,  747,
      747,  750,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  747,  747,  752,
      747,  747,  747,  750,  753,  747,  754,  747,  747,  747,
      747,  747,  747,  747,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  747,  752,
      747,  747,  753,  747,  755,  747,  747,  747,  747,  747,
      747,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  747,
      747,  755,  747,  747,  747,  747,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  747,  747,  747,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  747,  747,  747,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  747,  747,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  747,
      747,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  747,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,

      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,    0,  747,  747,  747,
      747,  747,  747,  747,  747
    } ;

static const flex_int16_t yy_nxt[1644] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   13,   13,
       15,   16,   17,   18,   18,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   47,   47,    8,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   47,   47,   48,   52,   52,   52,   52,   52,
       52,   56,   56,   56,   58,   66,   59,   59,   59,   61,
       62,   97,   65,   67,  102,   68,  122,   70,   60,   90,

       69,   71,   86,   95,   87,  144,  162,   72,   88,   96,
       91,  103,   66,   92,   89,  104,   93,   73,   97,   94,
       67,  102,   68,  122,   70,   60,   90,   69,   71,   86,
       95,   87,  144,  162,   72,   88,   96,   91,  103,  165,
       92,   89,  104,   93,   73,   74,   94,  105,   98,  724,
       99,  106,   75,   52,   52,   52,   76,  107,  100,   77,
      166,  718,   78,  101,  160,   79,  165,  108,  111,  408,
      657,  109,   74,  512,  105,   98,  161,   99,  106,   75,
      642,  110,  112,   76,  107,  100,   77,  166,  113,   78,
      101,  160,   79,   80,  108,  111,  123,   81,  109,  167,

      124,   82,  601,  161,  114,  174,  125,   83,  110,  112,
       84,  175,  115,   85,  116,  113,  117,  168,  119,  118,
       80,  163,  120,  123,   81,  408,  167,  124,   82,  164,
      169,  114,  174,  125,   83,  121,  376,   84,  175,  115,
       85,  116,  152,  117,  168,  119,  118,  151,  163,  120,
      149,  145,  136,   64,  146,  147,  164,  169,   63,  137,
      138,  148,  121,  126,   57,  127,  139,   55,  128,  140,
      170,  176,  129,  130,  131,  182,  132,  171,  145,  136,
      133,  146,  147,  134,   53,  135,  137,  138,  148,  141,
      126,  142,  127,  139,  143,  128,  140,  170,  176,  129,

      130,  131,  182,  132,  171,  747,  172,  133,  542,  543,
      134,  173,  135,   56,   56,   56,  141,  180,  142,  183,
       51,  143,  156,  156,  156,  154,   58,  181,   59,   59,
       59,  158,  158,  172,  157,  159,  159,  159,  173,  189,
       60,  177,  178,  179,  180,  184,  183,  185,  190,  191,
      186,  192,  154,  193,  181,  194,  187,  195,  196,  200,
      197,  157,  201,  188,  198,  202,  189,   60,  177,  178,
      179,  199,  184,  203,  185,  190,  191,  186,  192,  204,
      193,  205,  194,  187,  195,  196,  200,  197,  206,  201,
      188,  198,  202,  208,  209,  213,  214,  215,  199,  210,

      203,  218,  207,  219,  211,  212,  204,  216,  205,  220,
      221,  224,  217,  225,  226,  206,  222,  227,  228,  229,
      208,  209,  213,  214,  215,  223,  210,  230,  218,  207,
      219,  211,  212,  231,  216,  232,  220,  221,  224,  217,
      225,  226,  235,  222,  227,  228,  229,  233,  234,  236,
      239,  245,  223,  237,  230,  246,  247,   51,  252,  238,
      231,  253,  232,  248,  249,  254,  240,  255,  256,  235,
      259,  250,  251,  260,  233,  234,  236,  239,  245,  241,
      237,  242,  246,  247,  243,  252,  238,  244,  253,  261,
      248,  249,  254,  240,  255,  256,  257,  259,  250,  251,

      260,  262,  266,  269,  267,  270,  241,  271,  242,  263,
      276,  243,  277,  258,  244,  272,  261,  264,  265,  273,
      274,  278,  279,  257,  268,  285,  275,  747,  262,  266,
      269,  267,  270,  747,  271,  747,  263,  276,  747,  277,
      258,  747,  272,  747,  264,  265,  273,  274,  278,  279,
      747,  268,  285,  275,  280,  280,  286,  287,  281,  281,
      281,  156,  156,  156,  283,  283,  288,  289,  284,  284,
      284,  290,  291,  157,  159,  159,  159,  159,  159,  159,
      292,  293,  296,  286,  287,  294,  297,  295,  298,  299,
      300,  301,  303,  288,  289,  304,  302,  305,  290,  291,

      157,  306,  307,  308,  309,  310,  311,  292,  293,  296,
      312,  313,  294,  297,  295,  298,  299,  300,  301,  303,
      314,  315,  304,  302,  305,  316,  317,  318,  306,  307,
      308,  309,  310,  311,  319,  320,  321,  312,  313,  322,
      323,  324,  325,  327,  328,  329,  330,  314,  315,  331,
      332,  333,  316,  317,  318,  326,  334,  337,  338,  339,
      340,  319,  320,  321,  335,  341,  322,  323,  324,  325,
      327,  328,  329,  330,  336,  342,  331,  332,  333,  343,
      345,  346,  326,  334,  337,  338,  339,  340,  347,  344,
      348,  335,  341,  349,  350,  351,  352,  353,  354,  355,

      356,  336,  342,  357,  358,  359,  343,  345,  346,  363,
      361,  364,  365,  366,  367,  347,  344,  348,  360,  362,
      349,  350,  351,  352,  353,  354,  355,  356,  368,  369,
      357,  358,  359,  370,  371,  372,  363,  361,  364,  365,
      366,  367,  373,  374,  375,  360,  362,  377,  378,  379,
      380,  381,  382,  384,  383,  368,  369,  385,  386,  387,
      370,  371,  372,  388,  389,  390,  391,  392,  394,  373,
      374,  375,  393,  395,  377,  378,  379,  380,  381,  382,
      384,  383,  396,  397,  385,  386,  387,  398,  399,  400,
      388,  389,  390,  391,  392,  394,  401,  402,  403,  393,

      395,  404,  406,  407,  409,  405,  281,  281,  281,  396,
      397,  281,  281,  281,  398,  399,  400,  284,  284,  284,
      284,  284,  284,  401,  402,  403,  410,  411,  404,  406,
      407,  409,  405,  412,  413,  414,  415,  416,  417,  418,
      419,  420,  421,  422,  424,  425,  426,  423,  427,  428,
      429,  430,  431,  410,  411,  432,  433,  434,  435,  436,
      412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
      422,  424,  425,  426,  423,  427,  428,  429,  430,  431,
      437,  438,  432,  433,  434,  435,  436,  439,  440,  441,
      442,  443,  444,  445,  446,  447,  448,  449,  450,  451,

      452,  453,  455,  456,  457,  458,  459,  437,  438,  460,
      461,  462,  454,  463,  439,  440,  441,  442,  443,  444,
      445,  446,  447,  448,  449,  450,  451,  452,  453,  455,
      456,  457,  458,  459,  464,  465,  460,  461,  462,  454,
      463,  466,  467,  468,  469,  470,  471,  472,  473,  474,
      475,  476,  477,  478,  479,  480,  481,  482,  483,  484,
      485,  464,  465,  486,  487,  490,  491,  747,  466,  467,
      468,  469,  470,  471,  472,  473,  474,  475,  476,  477,
      478,  479,  480,  481,  482,  483,  484,  485,  488,  492,
      486,  487,  490,  491,  489,  493,  494,  495,  496,  497,

      498,  499,  500,  501,  502,  503,  504,  505,  506,  507,
      508,  509,  510,  511,  513,  488,  492,  514,  515,  516,
      517,  489,  493,  494,  495,  496,  497,  498,  499,  500,
      501,  502,  503,  504,  505,  506,  507,  508,  509,  510,
      511,  513,  518,  519,  514,  515,  516,  517,  520,  521,
      522,  523,  524,  525,  526,  527,  528,  529,  530,  531,
      532,  533,  534,  535,  536,  537,  538,  539,  540,  518,
      519,  541,  544,  545,  546,  520,  521,  522,  523,  524,
      525,  526,  527,  528,  529,  530,  531,  532,  533,  534,
      535,  536,  537,  538,  539,  540,  547,  548,  541,  544,

      545,  546,  549,  550,  551,  552,  553,  554,  555,  556,
      557,  558,  559,  560,  561,  562,  563,  564,  565,  566,
      567,  568,  569,  547,  548,  570,  571,  572,  573,  549,
      550,  551,  552,  553,  554,  555,  556,  557,  558,  559,
      560,  561,  562,  563,  564,  565,  566,  567,  568,  569,
      574,  575,  570,  571,  572,  573,  576,  577,  578,  579,
      580,  581,  582,  583,  584,  585,  586,  587,  588,  589,
      590,  591,  592,  593,  594,  595,  596,  574,  575,  597,
      598,  599,  600,  576,  577,  578,  579,  580,  581,  582,
      583,  584,  585,  586,  587,  588,  589,  590,  591,  592,

      593,  594,  595,  596,  602,  603,  597,  598,  599,  600,
      604,  605,  606,  607,  608,  609,  610,  611,  612,  613,
      614,  615,  616,  617,  618,  619,  620,  621,  622,  623,
      624,  602,  603,  625,  626,  627,  628,  604,  605,  606,
      607,  608,  609,  610,  611,  612,  613,  614,  615,  616,
      617,  618,  619,  620,  621,  622,  623,  624,  629,  630,
      625,  626,  627,  628,  631,  632,  633,  634,  635,  636,
      637,  638,  639,  640,  641,  643,  644,  645,  646,  647,
      648,  649,  650,  651,  652,  629,  630,  653,  654,  655,
      656,  631,  632,  633,  634,  635,  636,  637,  638,  639,

      640,  641,  643,  644,  645,  646,  647,  648,  649,  650,
      651,  652,  658,  659,  653,  654,  655,  656,  660,  661,
      662,  663,  664,  665,  666,  667,  668,  669,  670,  671,
      672,  673,  674,  675,  676,  677,  678,  679,  680,  658,
      659,  681,  682,  683,  684,  660,  661,  662,  663,  664,
      665,  666,  667,  668,  669,  670,  671,  672,  673,  674,
      675,  676,  677,  678,  679,  680,  685,  686,  681,  682,
      683,  684,  687,  688,  689,  690,  691,  692,  693,  694,
      695,  696,  697,  698,  699,  700,  701,  702,  703,  704,
      705,  706,  707,  685,  686,  708,  709,  710,  711,  687,

      688,  689,  690,  691,  692,  693,  694,  695,  696,  697,
      698,  699,  700,  701,  702,  703,  704,  705,  706,  707,
      712,  713,  708,  709,  710,  711,  714,  715,  716,  717,
      719,  720,  721,  722,  723,  725,  726,  727,  728,  729,
      730,  731,  732,  733,  734,  735,  736,  712,  713,  737,
      738,  739,  740,  714,  715,  716,  717,  719,  720,  721,
      722,  723,  725,  726,  727,  728,  729,  730,  731,  732,
      733,  734,  735,  736,  741,  742,  737,  738,  739,  740,
      743,  744,  745,  746,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,

      747,  741,  742,  747,  747,  747,  747,  743,  744,  745,
      746,   49,   49,   49,   49,   49,   49,   49,   49,   50,
       50,   50,   50,   50,   50,   50,   50,   54,  747,   54,
      747,   54,   54,   54,   54,  150,  150,  150,  150,  747,
      150,  150,  150,  153,  747,  747,  153,  153,  153,  153,
      153,  155,  155,  155,  155,  155,  155,  747,  155,  282,
      282,  282,  282,  282,  747,  282,  282,    7,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,

      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747
    } ;

static const flex_int16_t yy_chk[1644] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    9,    9,    9,   10,   10,
       10,   16,   16,   16,   18,   24,   18,   18,   18,   19,
       19,   31,  751,   24,   33,   24,   40,   25,   18,   29,

       24,   25,   28,   30,   28,   45,   66,   25,   28,   30,
       29,   34,   24,   29,   28,   34,   29,   25,   31,   29,
       24,   33,   24,   40,   25,   18,   29,   24,   25,   28,
       30,   28,   45,   66,   25,   28,   30,   29,   34,   68,
       29,   28,   34,   29,   25,   26,   29,   35,   32,  717,
       32,   35,   26,   52,   52,   52,   26,   35,   32,   26,
       68,  700,   26,   32,   64,   26,   68,   36,   37,  408,
      609,   36,   26,  408,   35,   32,   64,   32,   35,   26,
      584,   36,   37,   26,   35,   32,   26,   68,   37,   26,
       32,   64,   26,   27,   36,   37,   41,   27,   36,   69,

       41,   27,  520,   64,   38,   74,   41,   27,   36,   37,
       27,   75,   38,   27,   38,   37,   38,   70,   39,   38,
       27,   67,   39,   41,   27,  282,   69,   41,   27,   67,
       70,   38,   74,   41,   27,   39,  251,   27,   75,   38,
       27,   38,   54,   38,   70,   39,   38,   51,   67,   39,
       48,   46,   43,   23,   46,   46,   67,   70,   21,   43,
       43,   46,   39,   42,   17,   42,   43,   15,   42,   43,
       71,   76,   42,   42,   42,   79,   42,   71,   46,   43,
       42,   46,   46,   42,   11,   42,   43,   43,   46,   44,
       42,   44,   42,   43,   44,   42,   43,   71,   76,   42,

       42,   42,   79,   42,   71,    7,   72,   42,  443,  443,
       42,   72,   42,   56,   56,   56,   44,   78,   44,   80,
        6,   44,   58,   58,   58,   56,   59,   78,   59,   59,
       59,   60,   60,   72,   58,   60,   60,   60,   72,   82,
       59,   77,   77,   77,   78,   81,   80,   81,   83,   84,
       81,   85,   56,   86,   78,   87,   81,   88,   89,   90,
       89,   58,   91,   81,   89,   92,   82,   59,   77,   77,
       77,   89,   81,   93,   81,   83,   84,   81,   85,   94,
       86,   95,   87,   81,   88,   89,   90,   89,   96,   91,
       81,   89,   92,   97,   98,  102,  103,  104,   89,  100,

       93,  106,   96,  106,  100,  100,   94,  105,   95,  107,
      108,  110,  105,  111,  112,   96,  109,  113,  113,  114,
       97,   98,  102,  103,  104,  109,  100,  116,  106,   96,
      106,  100,  100,  117,  105,  118,  107,  108,  110,  105,
      111,  112,  120,  109,  113,  113,  114,  119,  119,  121,
      122,  124,  109,  121,  116,  125,  126,    5,  128,  121,
      117,  129,  118,  126,  127,  130,  123,  131,  132,  120,
      134,  127,  127,  135,  119,  119,  121,  122,  124,  123,
      121,  123,  125,  126,  123,  128,  121,  123,  129,  136,
      126,  127,  130,  123,  131,  132,  133,  134,  127,  127,

      135,  137,  139,  141,  140,  141,  123,  142,  123,  138,
      145,  123,  146,  133,  123,  143,  136,  138,  138,  143,
      144,  147,  148,  133,  140,  160,  144,    0,  137,  139,
      141,  140,  141,    0,  142,    0,  138,  145,    0,  146,
      133,    0,  143,    0,  138,  138,  143,  144,  147,  148,
        0,  140,  160,  144,  154,  154,  161,  164,  154,  154,
      154,  156,  156,  156,  157,  157,  168,  169,  157,  157,
      157,  170,  171,  156,  158,  158,  158,  159,  159,  159,
      172,  173,  175,  161,  164,  174,  175,  174,  176,  177,
      178,  179,  180,  168,  169,  181,  179,  182,  170,  171,

      156,  183,  184,  185,  186,  187,  188,  172,  173,  175,
      189,  190,  174,  175,  174,  176,  177,  178,  179,  180,
      191,  192,  181,  179,  182,  193,  195,  196,  183,  184,
      185,  186,  187,  188,  197,  198,  199,  189,  190,  200,
      201,  202,  203,  204,  205,  206,  207,  191,  192,  208,
      209,  210,  193,  195,  196,  203,  211,  213,  215,  216,
      217,  197,  198,  199,  212,  218,  200,  201,  202,  203,
      204,  205,  206,  207,  212,  219,  208,  209,  210,  220,
      221,  222,  203,  211,  213,  215,  216,  217,  223,  220,
      224,  212,  218,  225,  227,  228,  229,  230,  231,  232,

      233,  212,  219,  234,  235,  236,  220,  221,  222,  238,
      237,  239,  240,  241,  242,  223,  220,  224,  236,  237,
      225,  227,  228,  229,  230,  231,  232,  233,  243,  244,
      234,  235,  236,  245,  246,  247,  238,  237,  239,  240,
      241,  242,  248,  249,  250,  236,  237,  252,  253,  254,
      255,  256,  257,  258,  257,  243,  244,  259,  260,  261,
      245,  246,  247,  262,  263,  264,  265,  267,  268,  248,
      249,  250,  267,  269,  252,  253,  254,  255,  256,  257,
      258,  257,  270,  271,  259,  260,  261,  272,  273,  274,
      262,  263,  264,  265,  267,  268,  275,  275,  276,  267,

      269,  277,  278,  279,  285,  277,  280,  280,  280,  270,
      271,  281,  281,  281,  272,  273,  274,  283,  283,  283,
      284,  284,  284,  275,  275,  276,  286,  287,  277,  278,
      279,  285,  277,  288,  289,  290,  291,  292,  294,  296,
      297,  298,  299,  300,  301,  302,  303,  300,  304,  305,
      306,  307,  308,  286,  287,  309,  310,  311,  312,  313,
      288,  289,  290,  291,  292,  294,  296,  297,  298,  299,
      300,  301,  302,  303,  300,  304,  305,  306,  307,  308,
      317,  318,  309,  310,  311,  312,  313,  319,  320,  321,
      322,  323,  324,  326,  328,  329,  330,  331,  332,  333,

      334,  335,  339,  342,  343,  344,  345,  317,  318,  346,
      347,  348,  335,  349,  319,  320,  321,  322,  323,  324,
      326,  328,  329,  330,  331,  332,  333,  334,  335,  339,
      342,  343,  344,  345,  351,  352,  346,  347,  348,  335,
      349,  353,  354,  355,  356,  357,  358,  359,  360,  361,
      362,  363,  364,  366,  367,  368,  369,  370,  371,  372,
      373,  351,  352,  374,  375,  378,  379,    0,  353,  354,
      355,  356,  357,  358,  359,  360,  361,  362,  363,  364,
      366,  367,  368,  369,  370,  371,  372,  373,  376,  380,
      374,  375,  378,  379,  376,  381,  382,  383,  384,  385,

      386,  387,  390,  391,  392,  393,  395,  396,  397,  399,
      400,  401,  402,  405,  409,  376,  380,  410,  413,  414,
      415,  376,  381,  382,  383,  384,  385,  386,  387,  390,
      391,  392,  393,  395,  396,  397,  399,  400,  401,  402,
      405,  409,  416,  417,  410,  413,  414,  415,  418,  419,
      420,  421,  422,  423,  424,  425,  426,  428,  429,  430,
      431,  432,  433,  434,  435,  436,  438,  439,  440,  416,
      417,  441,  445,  446,  449,  418,  419,  420,  421,  422,
      423,  424,  425,  426,  428,  429,  430,  431,  432,  433,
      434,  435,  436,  438,  439,  440,  450,  452,  441,  445,

      446,  449,  453,  454,  455,  458,  459,  460,  461,  462,
      463,  464,  465,  466,  469,  470,  471,  472,  473,  474,
      475,  476,  478,  450,  452,  479,  480,  481,  483,  453,
      454,  455,  458,  459,  460,  461,  462,  463,  464,  465,
      466,  469,  470,  471,  472,  473,  474,  475,  476,  478,
      484,  486,  479,  480,  481,  483,  487,  488,  489,  491,
      492,  493,  495,  496,  497,  498,  499,  500,  501,  502,
      503,  505,  506,  508,  509,  510,  513,  484,  486,  514,
      515,  518,  519,  487,  488,  489,  491,  492,  493,  495,
      496,  497,  498,  499,  500,  501,  502,  503,  505,  506,

      508,  509,  510,  513,  521,  522,  514,  515,  518,  519,
      523,  524,  526,  527,  528,  529,  530,  531,  532,  533,
      535,  536,  539,  541,  547,  549,  550,  551,  554,  556,
      557,  521,  522,  558,  561,  562,  563,  523,  524,  526,
      527,  528,  529,  530,  531,  532,  533,  535,  536,  539,
      541,  547,  549,  550,  551,  554,  556,  557,  564,  565,
      558,  561,  562,  563,  566,  567,  568,  570,  571,  573,
      576,  577,  578,  579,  580,  587,  588,  589,  590,  591,
      594,  595,  596,  597,  601,  564,  565,  602,  606,  607,
      608,  566,  567,  568,  570,  571,  573,  576,  577,  578,

      579,  580,  587,  588,  589,  590,  591,  594,  595,  596,
      597,  601,  610,  611,  602,  606,  607,  608,  614,  615,
      618,  620,  622,  623,  626,  627,  629,  632,  633,  635,
      636,  638,  639,  640,  641,  642,  643,  645,  646,  610,
      611,  648,  649,  651,  652,  614,  615,  618,  620,  622,
      623,  626,  627,  629,  632,  633,  635,  636,  638,  639,
      640,  641,  642,  643,  645,  646,  653,  654,  648,  649,
      651,  652,  655,  656,  657,  659,  662,  663,  664,  665,
      666,  668,  669,  670,  673,  674,  677,  678,  680,  681,
      682,  684,  686,  653,  654,  687,  688,  689,  690,  655,

      656,  657,  659,  662,  663,  664,  665,  666,  668,  669,
      670,  673,  674,  677,  678,  680,  681,  682,  684,  686,
      691,  694,  687,  688,  689,  690,  695,  697,  698,  699,
      701,  703,  705,  710,  716,  718,  719,  720,  721,  722,
      724,  725,  726,  728,  730,  731,  732,  691,  694,  734,
      735,  736,  737,  695,  697,  698,  699,  701,  703,  705,
      710,  716,  718,  719,  720,  721,  722,  724,  725,  726,
      728,  730,  731,  732,  738,  740,  734,  735,  736,  737,
      741,  742,  743,  744,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  738,  740,    0,    0,    0,    0,  741,  742,  743,
      744,  748,  748,  748,  748,  748,  748,  748,  748,  749,
      749,  749,  749,  749,  749,  749,  749,  750,    0,  750,
        0,  750,  750,  750,  750,  752,  752,  752,  752,    0,
      752,  752,  752,  753,    0,    0,  753,  753,  753,  753,
      753,  754,  754,  754,  754,  754,  754,    0,  754,  755,
      755,  755,  755,  755,    0,  755,  755,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,

      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sqlparser.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "sqlparser.l"

#include "node.h"
#include "sqlparser_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#line 1088 "sqlparser_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1101 "sqlparser_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 90 "sqlparser.l"

#line 1387 "sqlparser_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 748 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 747 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 91 "sqlparser.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "sqlparser.l"
{ return ALTER; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 93 "sqlparser.l"
{ return AND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 94 "sqlparser.l"
{ return ANY; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 95 "sqlparser.l"
{ return ALL; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 96 "sqlparser.l"
{ return AS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 97 "sqlparser.l"
{ return ASC; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 98 "sqlparser.l"
{ return BEGI; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 99 "sqlparser.l"
{ return BETWEEN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 100 "sqlparser.l"
{ return BIGINT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 101 "sqlparser.l"
{ return BINARY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 102 "sqlparser.l"
{ return BOOLEAN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 103 "sqlparser.l"
{ return BOTH; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 104 "sqlparser.l"
{ return BY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 105 "sqlparser.l"
{ return CASCADE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 106 "sqlparser.l"
{ return CASE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 107 "sqlparser.l"
{ return CHARACTER; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 108 "sqlparser.l"
{ return CLUSTER; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 109 "sqlparser.l"
{ return COLUMN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 110 "sqlparser.l"
{ return COLUMNS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 111 "sqlparser.l"
{ return COMMIT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 112 "sqlparser.l"
{ return CONSISTENT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 113 "sqlparser.l"
{ return CREATE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 114 "sqlparser.l"
{ return CREATETIME; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 115 "sqlparser.l"
{ return CROSS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 116 "sqlparser.l"
{ return CURRENT_USER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 117 "sqlparser.l"
{ return DATE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 118 "sqlparser.l"
{ return DATETIME; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 119 "sqlparser.l"
{ return DEALLOCATE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 120 "sqlparser.l"
{ return DECIMAL; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 121 "sqlparser.l"
{ return DEFAULT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 122 "sqlparser.l"
{ return DELETE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 123 "sqlparser.l"
{ return DESC; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 124 "sqlparser.l"
{ return DESCRIBE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 125 "sqlparser.l"
{ return DISTINCT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 126 "sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 127 "sqlparser.l"
{ return DROP; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 128 "sqlparser.l"
{ return DUAL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 129 "sqlparser.l"
{ return ELSE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 130 "sqlparser.l"
{ return END; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 131 "sqlparser.l"
{ return ERROR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 132 "sqlparser.l"
{ return EXCEPT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 133 "sqlparser.l"
{ return EXECUTE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 134 "sqlparser.l"
{ return EXISTS; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 135 "sqlparser.l"
{ return EXPLAIN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 136 "sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 137 "sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 138 "sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 139 "sqlparser.l"
{ return FOR; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 140 "sqlparser.l"
{ return FROM; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 141 "sqlparser.l"
{ return FULL; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 142 "sqlparser.l"
{ return GRANT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 143 "sqlparser.l"
{ return GROUP; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 144 "sqlparser.l"
{ return GLOBAL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 145 "sqlparser.l"
{ return HAVING; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 146 "sqlparser.l"
{ return IDENTIFIED; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 147 "sqlparser.l"
{ return IF; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 148 "sqlparser.l"
{ return IN; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 149 "sqlparser.l"
{ return INNER; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 150 "sqlparser.l"
{ return INTEGER; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 151 "sqlparser.l"
{ return INTEGER; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 152 "sqlparser.l"
{ return INTERSECT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 153 "sqlparser.l"
{ return INSERT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 154 "sqlparser.l"
{ return INTO; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 155 "sqlparser.l"
{ return IS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 156 "sqlparser.l"
{ return JOIN; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 157 "sqlparser.l"
{ return KEY; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 158 "sqlparser.l"
{ return LEADING; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 159 "sqlparser.l"
{ return LEFT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 160 "sqlparser.l"
{ return LIMIT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 161 "sqlparser.l"
{ return LIKE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 162 "sqlparser.l"
{ return LOCAL; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 163 "sqlparser.l"
{ return LOCKED; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 164 "sqlparser.l"
{ return MEDIUMINT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 165 "sqlparser.l"
{ return MEMORY; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 166 "sqlparser.l"
{ return MOD; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 167 "sqlparser.l"
{ return MODIFYTIME; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 168 "sqlparser.l"
{ return NATURAL; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 169 "sqlparser.l"
{ return NOT; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 170 "sqlparser.l"
{ return NUMERIC; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 171 "sqlparser.l"
{ return OFFSET; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 172 "sqlparser.l"
{ return ON; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 173 "sqlparser.l"
{ return OPTION; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 174 "sqlparser.l"
{ return OR; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 175 "sqlparser.l"
{ return ORDER; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 176 "sqlparser.l"
{ return OUTER; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 177 "sqlparser.l"
{ return COMMENT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 178 "sqlparser.l"
{ return PARAMETERS; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 179 "sqlparser.l"
{ return PASSWORD; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 180 "sqlparser.l"
{ return PRECISION; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 181 "sqlparser.l"
{ return PREPARE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 182 "sqlparser.l"
{ return PRIMARY; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 183 "sqlparser.l"
{ return REAL; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 184 "sqlparser.l"
{ return RENAME; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 185 "sqlparser.l"
{ return REPLACE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 186 "sqlparser.l"
{ return RESTRICT; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 187 "sqlparser.l"
{ return REVOKE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 188 "sqlparser.l"
{ return RIGHT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 189 "sqlparser.l"
{ return ROLLBACK; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 190 "sqlparser.l"
{ return PRIVILEGES; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 191 "sqlparser.l"
{ return SELECT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 192 "sqlparser.l"
{ return SCHEMA; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 193 "sqlparser.l"
{ return PROCESSLIST; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 194 "sqlparser.l"
{ return SCOPE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 195 "sqlparser.l"
{ return SESSION; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 196 "sqlparser.l"
{ return SET; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 197 "sqlparser.l"
{ return SHOW; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 198 "sqlparser.l"
{ return SMALLINT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 199 "sqlparser.l"
{ return SNAPSHOT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 200 "sqlparser.l"
{ return SPFILE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 201 "sqlparser.l"
{ return START; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 202 "sqlparser.l"
{ return STATIC; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 203 "sqlparser.l"
{ return WEAK;   }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 204 "sqlparser.l"
{ return STRONG; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 205 "sqlparser.l"
{ return SYSTEM; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 206 "sqlparser.l"
{ return TABLE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 207 "sqlparser.l"
{ return TABLES; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 208 "sqlparser.l"
{ return THEN; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 209 "sqlparser.l"
{ return TIME; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 210 "sqlparser.l"
{ return TIMESTAMP; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 211 "sqlparser.l"
{ return TINYINT; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 212 "sqlparser.l"
{ return TO; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 213 "sqlparser.l"
{ return TRAILING; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 214 "sqlparser.l"
{ return TRANSACTION; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 215 "sqlparser.l"
{ return UNION; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 216 "sqlparser.l"
{ return UPDATE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 217 "sqlparser.l"
{ return USER; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 218 "sqlparser.l"
{ return USING; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 219 "sqlparser.l"
{ return VALUES; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 220 "sqlparser.l"
{ return VARBINARY; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 221 "sqlparser.l"
{ return VARCHAR; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 222 "sqlparser.l"
{ return WHERE; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 223 "sqlparser.l"
{ return WHEN; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 224 "sqlparser.l"
{ return WITH; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 225 "sqlparser.l"
{ return WORK; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 226 "sqlparser.l"
{ return KILL; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 227 "sqlparser.l"
{ return QUERY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 228 "sqlparser.l"
{ return CONNECTION; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 229 "sqlparser.l"
{ return FROZEN;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 230 "sqlparser.l"
{ return GLOBAL_ALIAS; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 231 "sqlparser.l"
{ return SESSION_ALIAS; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 232 "sqlparser.l"
{ return CHANGE_OBI; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 233 "sqlparser.l"
{ return SWITCH_CLUSTER; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 234 "sqlparser.l"
{ return SET_MASTER_CLUSTER; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 235 "sqlparser.l"
{ return SET_SLAVE_CLUSTER;  }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 236 "sqlparser.l"
{ return MASTER; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 237 "sqlparser.l"
{ return SLAVE;  }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 238 "sqlparser.l"
{ return FORCE;  }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 239 "sqlparser.l"
{ return TOP; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 240 "sqlparser.l"
{ return PERCENT; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 241 "sqlparser.l"
{ return TIES; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 243 "sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return NULLX;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 248 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return INTNUM;
}
	YY_BREAK
case 154:
#line 256 "sqlparser.l"
case 155:
#line 257 "sqlparser.l"
case 156:
YY_RULE_SETUP
#line 257 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 157:
#line 265 "sqlparser.l"
case 158:
YY_RULE_SETUP
#line 265 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 272 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return BOOL;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 279 "sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return UNKNOWN;
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 284 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return BOOL;
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 291 "sqlparser.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 297 "sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 164:
/* rule 164 can match eol */
YY_RULE_SETUP
#line 301 "sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 305 "sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return STRING;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 314 "sqlparser.l"
{
  fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return ERROR;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 319 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = std::string(yytext+1, yytext + strlen(yytext) - 1);
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return NAME;
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 328 "sqlparser.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return NAME;
}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 337 "sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 338 "sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 340 "sqlparser.l"
{ return yytext[0];}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 342 "sqlparser.l"
{ return CNNOP; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 343 "sqlparser.l"
{ return COMP_EQ; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 344 "sqlparser.l"
{ return COMP_GE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 345 "sqlparser.l"
{ return COMP_GT; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 346 "sqlparser.l"
{ return COMP_LE; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 347 "sqlparser.l"
{ return COMP_LT; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 348 "sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 349 "sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 351 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
#line 358 "sqlparser.l"
{ return END_P; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 360 "sqlparser.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return ERROR;
}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 364 "sqlparser.l"
ECHO;
	YY_BREAK
#line 2418 "sqlparser_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 748 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 748 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 747);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 364 "sqlparser.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

