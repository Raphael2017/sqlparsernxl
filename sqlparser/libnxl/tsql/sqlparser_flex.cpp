#line 2 "sqlparser_flex.cpp"

#line 4 "sqlparser_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

#ifdef yyget_lloc
#define yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc yyget_lloc
#endif

#ifdef yyset_lloc
#define yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc yyset_lloc
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 274
#define YY_END_OF_BUFFER 275
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1182] =
    {   0,
        0,    0,    0,    0,  254,  254,  257,  257,  275,  273,
      262,  262,  263,  273,  263,  251,  263,  263,  263,  242,
      269,  265,  267,  272,  273,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  256,
      263,  274,  254,  255,  257,  258,  262,  271,    0,  261,
      247,    0,  246,  242,    0,  268,  270,  266,    0,  260,
      260,  260,  260,  260,    6,  260,  260,  260,  260,  260,
       14,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,   61,
      260,   62,   67,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  252,  260,  260,  260,  260,  260,
      260,  260,  237,   85,  260,   88,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  129,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  264,  254,  253,  257,  259,  261,
        0,    0,  246,    0,    0,  243,    0,    0,    1,    5,
      260,    3,    4,  260,    7,  205,  260,  260,  260,  260,

      223,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,   30,  260,  260,
      260,  260,  260,  260,  260,  260,  260,   40,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
       52,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  227,  260,  260,  260,   69,  260,  198,
      260,  260,  260,  260,  260,  260,  260,  260,  195,  260,
      260,  194,   79,  260,  260,  260,  260,   82,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  260,  105,
      260,  260,  260,  260,  113,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  191,  260,  260,  260,  260,
      260,  260,  260,  260,  156,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  190,  260,  260,  260,  260,
        0,  245,    0,    0,  244,    0,    0,  260,  260,  260,
      260,  260,  260,   12,  260,  260,   16,  222,  260,  224,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,   27,  260,  260,  260,  260,  260,
       33,  260,  260,  260,   37,   38,   39,  260,  260,  260,

      260,  260,  260,  260,  159,  260,  260,  260,  260,  260,
       53,  260,   54,  260,  260,  260,  260,  260,   58,  260,
      260,  260,  260,  260,  260,   66,  260,   68,  163,  143,
      260,  196,   71,   73,  260,  260,  260,   76,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,   48,
      260,  260,  241,  260,  260,  260,   86,  260,  260,  260,
      188,  260,  260,  260,  260,  260,  164,  260,  260,  260,
      260,  260,  260,  260,  178,   97,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  106,  260,  260,  260,  260,
      260,  260,  114,  260,  260,  260,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  233,  125,  158,  126,
      260,  260,  260,  248,  260,  260,  260,  260,  260,  134,
      260,  260,  260,  260,  189,  120,  140,  260,  141,  142,
        0,    0,    0,    2,  235,    8,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  203,  260,   25,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,   41,  260,  260,  260,  260,  260,  250,   46,
       47,   49,  260,  155,  260,  260,  260,  260,   55,   56,
      260,  260,  260,   63,  260,  260,  260,  260,  260,  260,

       72,   74,  260,  260,  260,  260,  260,  260,   78,  260,
      260,  260,  228,  260,  229,  260,  181,  260,  260,  260,
      260,  260,   89,   90,  260,  260,  260,  260,  239,  260,
      260,  260,  260,  260,  260,  144,  183,  260,  260,  260,
      260,  260,  260,  103,  260,  260,  260,  260,  111,  260,
      260,  260,  260,  260,  154,  260,  260,  260,  118,  260,
      193,  260,  207,  260,  260,  123,  260,  260,  260,  260,
      260,  132,  260,  260,  260,  135,  260,  260,  260,  139,
      261,    0,    0,  260,   10,   11,   13,  260,  260,  260,
      260,  260,  260,  260,   19,  260,   21,  260,  260,  260,

      260,  260,   23,  260,  260,  260,  260,  260,  260,  260,
      260,  260,   32,  260,  260,  260,  260,   36,   42,  260,
       44,  260,  260,  260,   50,   51,  260,  173,  146,  260,
      260,   57,  260,   59,  260,  260,   65,  260,  211,  260,
      260,  260,   75,  153,  168,  260,  260,   77,  260,  260,
      260,  260,  260,  209,  260,  260,   84,   87,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,   98,
       99,  260,  260,  102,  175,  260,  260,  109,  108,  260,
      260,  260,  172,  260,  260,  260,  260,  117,  119,  192,
      121,  260,  122,  124,  260,  260,  260,  260,  260,  260,

      260,  133,  136,  260,  260,    0,    0,    9,  260,   15,
      260,  260,  260,   18,  260,  234,   20,   91,  260,  260,
      260,  220,  260,  260,  186,  218,  260,  260,  260,  260,
      260,   30,   31,  260,  260,  160,  260,   43,   45,  260,
      260,  260,  214,  260,  260,  260,  260,  260,  260,  260,
      260,   70,  260,  260,  260,  260,  260,   81,  260,   83,
      260,  260,  260,  260,  157,  260,  260,   95,   96,  260,
      260,  260,  100,  260,  260,  260,  112,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  128,  260,  260,  260,
      249,  240,  260,  138,  147,    0,  260,  260,  260,  176,

      221,  260,  260,  260,  260,  260,  260,  217,  216,  215,
       28,  260,  260,   34,   35,  260,  260,  260,  260,  200,
      260,  212,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  230,  260,  260,   93,  260,  260,  260,  260,
      260,  101,  104,  260,  260,  260,  260,  260,  115,  260,
      116,  260,  260,  260,  260,  130,  260,  260,  260,  260,
      148,  260,  260,   17,  260,  260,  260,  238,  202,  260,
      260,  260,  225,  260,  260,  260,  260,  260,  187,  260,
      260,  260,  260,   64,  165,  260,  260,  260,  260,  260,
      260,  260,  260,  182,  185,   94,  260,  260,  174,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  127,  260,
      184,  137,  260,  260,  149,  260,  145,   22,   24,  260,
      260,  260,   29,  179,  260,  260,  213,  260,   60,  260,
      197,  260,  260,  260,  260,   80,  260,  260,   92,  107,
      260,  180,  260,  260,  260,  260,  232,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  201,  199,
      260,  260,  260,  260,  260,  260,  260,  110,  260,  260,
      260,  260,  260,  236,  206,  131,  260,  260,  204,  260,
       26,  260,  260,  260,  169,  260,  260,  260,  260,  260,
      208,  260,  260,  260,  260,  138,  260,  260,  260,  260,

      260,  260,  260,  260,  260,  260,  260,  260,  231,  260,
      260,  260,  226,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  150,  177,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  161,  260,  260,  260,  260,
      260,  171,  260,  260,  219,  260,  166,  260,  167,  260,
      260,  152,  260,  260,  260,  151,  260,  260,  260,  260,
      260,  170,  260,  210,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  162,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    7,    7,    8,    7,
        7,    9,   10,    7,   11,   12,   13,   14,   14,   15,
       14,   16,   14,   14,   14,   17,   14,    1,    7,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,    1,   50,    7,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,    1,   78,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[79] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    5,    6,    7,
        1,    1,    6,    8,    8,    8,    8,    1,    1,    1,
        1,    1,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    1,    9,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1
    } ;

static const flex_int16_t yy_base[1192] =
    {   0,
        0,    0,    0,    0,  459,  452,  376,  375,  424, 2463,
       77,   80,  403,    0, 2463, 2463,  409,   71,  375,   77,
       76, 2463,  362, 2463,  357,  108,   71,  159,  209,   63,
      259,   85,   77,  133,   64,   79,  149,  177,  324,  370,
      207,   64,  231,  419,  473,  156,   91,  258,    0, 2463,
      296, 2463,    0,  355,    0, 2463,  113, 2463,  351,    0,
      150,    0,  257,  289,  319, 2463, 2463, 2463,  154,    0,
       95,  185,  295,   84,   99,  126,  281,  312,  114,  121,
        0,  169,  317,  170,  366,  271,  176,  193,  520,  209,
      208,  272,  303,  302,  320,  313,  361,  324,  314,  322,

      327,  371,  367,  373,  370,  379,  428,  415,  392,    0,
      387,  427,  411,  427,  462,  436,  476,  449,  487,  486,
      461,  486,  472,  521, 2463,  470,  485,  478,  516,  499,
      528,  512,  532,  531,  524,  542,  527,  543,  538,  531,
      529,  552,  574,  553,  545,  618,  555,  572,  585,  587,
      566,  581,  595,  596,  597,  595,  637,  591,  605,  596,
      614,  593,  615,  651,  623,  641,  670,  643,  668,  641,
      650,  649,  654,  657, 2463,    0, 2463,    0, 2463,    0,
      724,    0,  704,  732,  736,  740,  666,  706,    0,    0,
      709,    0,    0,  710,    0,    0,  714,  713,  728,  738,

        0,  733,  719,  741,  731,  744,  729,  738,  741,  741,
      766,  741,  757,  741,  745,  759,  755,  760,  771,  776,
      775,  792,  796,  797,  784,  790,  798,    0,  789,  800,
      803,  788,  796,  806,  793,  793,  815,  800,  819,  809,
      819,  812,  815,  839,  828,  825,  823,  838,  843,  839,
      840,  852,  853,  856,  841,  849,  848,    0,  853,    0,
      846,  865,  850,  869,  867,  877,  861,  859,  892,  865,
      876,  269,  876,  892,  880,  901,  884,    0,  895,  901,
      903,  911,  900,  900,  895,  913,  918,  919,  909,  934,
      909,  926,  917,  920,  934,  933,  933,  920,  961,  929,

      944,  945,  961,  957,  951,  958,  966,  955,  965,  961,
      973,  965,  977,  966,  261,  963,  971,  970,  981,  978,
      986,  999,  991,  984,  998,    0,  988,  992, 1001,  998,
     1006, 1007, 1022, 1004,    0, 1021, 1026, 1017, 1019, 1022,
     1029, 1038, 1022, 1029, 1023, 1050, 1034, 1036, 1043, 1046,
     1083, 1095,  298, 1099, 1104, 1056, 1065, 1067, 1076, 1088,
     1098, 1090, 1087,    0, 1087, 1106,    0,    0, 1101, 1108,
     1099, 1091, 1107, 1114, 1103, 1112, 1113, 1110, 1119, 1117,
     1103, 1104, 1106, 1121, 1155, 1116, 1116, 1122, 1140, 1156,
     1144, 1161, 1155, 1153,    0,    0,    0, 1148, 1151, 1147,

     1150, 1172, 1156, 1171,    0, 1169, 1158, 1159, 1165, 1176,
        0, 1177,    0, 1182, 1164, 1185, 1167, 1185,    0, 1200,
     1197, 1200, 1201, 1202, 1203,    0, 1210,    0, 1217,    0,
      249, 1215,    0,    0, 1205, 1214, 1222,    0, 1223, 1214,
     1226, 1225, 1215, 1229, 1234, 1230, 1212, 1220, 1221,    0,
     1235, 1237, 1235, 1227, 1256, 1267,    0, 1260, 1258, 1259,
        0, 1265, 1270, 1257, 1276, 1262,    0, 1278, 1283, 1284,
     1277, 1284, 1265, 1286,    0,    0, 1279, 1273, 1281, 1294,
     1278, 1286, 1278, 1280, 1298,    0, 1288, 1290, 1312, 1327,
     1324, 1321,    0, 1323, 1331, 1325, 1319, 1327, 1321, 1333,

     1321, 1330, 1339, 1344, 1343, 1344,    0,    0,    0, 1331,
     1342, 1340, 1334,    0, 1333, 1341, 1341, 1335, 1338,    0,
     1353, 1356, 1366, 1380,    0,    0,    0, 1386,    0,    0,
      244, 1390, 1374,    0,    0,    0, 1389, 1375, 1371, 1392,
     1394, 1394, 1397, 1382, 1397, 1384, 1385, 1392, 1393, 1388,
     1406, 1391, 1402, 1394,  243, 1408,    0, 1400, 1411, 1407,
     1417, 1418, 1424, 1431, 1448, 1438, 1446,  241, 1443, 1441,
     1440, 1450,    0, 1436, 1437, 1439, 1450, 1446,    0,    0,
      226,  343, 1438, 1459, 1450, 1445, 1463, 1455,    0, 1459,
     1462, 1461, 1466,    0, 1452, 1454, 1462, 1467, 1455, 1477,

        0,    0, 1500, 1489, 1492, 1506, 1492, 1486,    0, 1509,
     1495, 1489,    0, 1514,    0, 1498,    0, 1511, 1509, 1511,
     1501, 1508,    0,    0, 1518, 1504, 1510, 1512,    0, 1523,
     1509, 1511, 1512, 1519, 1513,    0,    0, 1518, 1530, 1544,
     1559, 1556, 1561,    0, 1547, 1567, 1548, 1569,    0, 1551,
     1557, 1572, 1562, 1570,    0, 1572, 1569, 1574,    0, 1577,
     1566, 1576,    0, 1576, 1573, 1568, 1568, 1575, 1581, 1591,
     1579,    0, 1584, 1605, 1618,    0, 1605, 1611, 1625,    0,
     2463, 1626, 1619, 1615,    0,  215,    0, 1625,  209, 1611,
     1611, 1615, 1631, 1630, 1618, 1618,    0, 1619, 1620, 1627,

     1622, 1641, 1624, 1625, 1642, 1641, 1635, 1632, 1638, 1662,
     1666, 1661,    0, 1664, 1681, 1679, 1682,    0,    0, 1681,
        0, 1673, 1687, 1667,    0,    0, 1681,    0,    0, 1686,
     1688,    0, 1679,    0, 1689,  204,    0, 1691,    0, 1673,
     1697, 1692,    0,    0,    0, 1679, 1700,    0, 1682, 1702,
     1684, 1693, 1700,    0, 1705, 1722,    0,    0, 1716, 1730,
     1722, 1721, 1733, 1734, 1739, 1720, 1741, 1728, 1739,    0,
        0, 1744, 1747,    0,    0, 1748, 1740,    0,    0, 1740,
     1736, 1755,    0, 1756, 1744, 1744, 1745,    0,    0,    0,
        0,  193,  169,    0, 1760, 1742, 1749, 1761, 1762, 1753,

     1761,    0,    0, 1793, 1779, 1786, 1784,    0, 1797,    0,
     1786, 1797, 1790,    0, 1799,    0,    0,    0, 1796, 1801,
     1802,    0, 1799, 1800,  166,    0, 1805, 1807, 1793, 1809,
     1814,    0,    0, 1815, 1812,    0, 1798,    0,    0, 1807,
     1819, 1807,    0, 1821, 1817, 1816, 1814, 1838, 1852, 1851,
     1845,    0, 1840, 1845, 1851, 1847, 1853,    0, 1848,    0,
     1846, 1860, 1851, 1863,    0, 1855, 1855,    0,    0, 1864,
     1860, 1861,    0, 1854, 1864, 1874,  156, 1857, 1856, 1859,
     1860, 1868, 1863, 1894, 1893, 1897,    0, 1908, 1896, 1912,
        0,    0, 1900, 1918, 2463, 1906, 1913, 1920, 1905,  128,

        0, 1909, 1911, 1923, 1921, 1916, 1910,    0,    0,    0,
     1940, 1912, 1920,    0,    0, 1919, 1924, 1930, 1918,  119,
     1935,    0, 1926, 1942, 1964, 1950, 1953, 1953, 1952, 1955,
     1963, 1959,    0, 1960, 1965,    0, 1973, 1967, 1977, 1974,
     1980,    0,    0, 1981, 1966, 1983, 1984, 1985,    0, 1987,
        0, 1981, 1985, 1976, 1980,    0, 1989, 1995, 1988, 2017,
     2463, 2021, 2020,    0, 2029, 2017, 2012,    0,    0, 2028,
     2025, 2016,    0, 2030, 2032, 2027, 2018, 2019,    0, 2036,
     2034, 2040, 2031,    0,    0, 2041, 2038,  117, 2043,  109,
     2045, 2038, 2062,    0,    0,    0, 2034, 2035,    0, 2038,

     2038, 2060,  106, 2064, 2062, 2067, 2076, 2085,    0, 2076,
        0,    0, 2072, 2090,    0, 2087,    0,    0,    0, 2082,
     2091, 2091,    0,    0, 2079, 2094,    0, 2097,    0, 2099,
        0, 2088, 2088,   94, 2089,    0, 2105, 2082,    0,    0,
     2089,    0, 2106,   72, 2109, 2105,    0, 2096, 2124, 2118,
     2125, 2137, 2134, 2139, 2142, 2130, 2130, 2142,    0,    0,
     2139, 2138, 2148, 2136, 2150, 2142, 2156,    0, 2141, 2157,
     2149, 2149, 2143,    0,    0,    0, 2146, 2147,    0, 2148,
        0, 2164, 2166, 2151,    0, 2155, 2172, 2176, 2194, 2180,
        0, 2191, 2183, 2200, 2201,    0, 2186, 2188, 2189, 2195,

     2192, 2209, 2190, 2211, 2210, 2208, 2197, 2200,    0, 2202,
     2208, 2221,    0, 2201, 2205, 2222, 2206, 2225,   69, 2216,
     2226, 2232,    0,    0, 2242, 2244, 2256, 2248, 2258, 2250,
     2246, 2252, 2247, 2263, 2253,    0, 2252, 2251, 2254, 2253,
     2259,    0, 2271, 2259,    0, 2273,    0, 2260,    0, 2265,
     2264,    0, 2279, 2276, 2271,    0,   62, 2273, 2277, 2300,
     2296,    0, 2298,    0, 2304, 2298, 2307, 2307, 2303, 2303,
     2309, 2307, 2321,   54, 2318, 2314, 2325, 2325, 2307,    0,
     2463, 2382, 2391, 2400, 2409,   82, 2418, 2427, 2435, 2444,
     2453

    } ;

static const flex_int16_t yy_def[1192] =
    {   0,
     1181,    1, 1182, 1182, 1183, 1183, 1184, 1184, 1181, 1181,
     1181, 1181, 1181, 1185, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1181,
     1181, 1181, 1187, 1181, 1188, 1181, 1181, 1181, 1185, 1189,
     1181, 1190, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1181, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1181, 1187, 1181, 1188, 1181, 1189,
     1181, 1191, 1181, 1181, 1181, 1181, 1181, 1181, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1181, 1181, 1191, 1181, 1181, 1181, 1181, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1181, 1181, 1181, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1181, 1181, 1181, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1181, 1181, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1181, 1181, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1181, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,

     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
        0, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181

    } ;

static const flex_int16_t yy_nxt[2542] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   15,   15,
       17,   18,   19,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   49,   49,   50,   10,
       10,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   49,   49,   51,   57,   57,
       57,   57,   57,   57,   61,   61,   61,   61,   63,   70,
       64,   64,   64,   64,   66,   67,   94,   77,   95,  108,

      114,   78,   96,   65, 1175,  115,  144,   79,   97,  116,
       80,  105, 1160,  170,   57,   57,   57,   81,  106, 1131,
      189,  194, 1070,  195,  107,   94,   77,   95,  108,  114,
       78,   96,   65,   71,  115,  144,   79,   97,  116,   80,
      105,   72,  170,   73, 1064,   74,   81,  106,   75,  189,
      194,   76,  195,  107,  196,  202, 1045,  203,  109, 1035,
      110,  111,   71,   61,   61,   61,   61, 1033,  112,  981,
       72,  117,   73,  113,   74,  118,  181,   75,  965,  119,
       76,   82,  187,  196,  202,  120,  203,  109,   83,  110,
      111,  167,   84,  168,  188,   85,  169,  112,   86,  121,

      117,   87,  113,  122,  118,  181,  945,  123,  119,  204,
       82,  187,  207,  124,  120,  215,  907,   83,  190,  885,
      167,   84,  168,  188,   85,  169,  191,   86,  121,  139,
       87,   88,  122,  140,  216,   89,  123,  141,  204,   90,
      142,  207,  124,  884,  215,   91,  143,  190,   92,  223,
      224,   93,  531,  145,  848,  191,  681,  146,  139,  811,
       88,  147,  140,  216,   89,  809,  141,  148,   90,  142,
      183,  183,  183,  183,   91,  143,  724,   92,  223,  224,
       93,   98,  145,  184,  171,   99,  146,  172,  173,  100,
      147,  714,  101,  702,  174,  102,  148,  213,  103,  599,

       63,  104,   64,   64,   64,   64,  531,  214,  225,  197,
       98,  492,  184,  171,   99,   65,  172,  173,  100,  445,
      192,  101,  198,  174,  102,  226,  213,  103,  185,  185,
      104,  125,  186,  186,  186,  186,  214,  225,  197,  205,
      199,  193,  227,  206,   65,  228,  126,  200,  127,  192,
      128,  198,  229,  201,  226,  237,  179,  235,  725,  726,
      129,  238,  177,  239,  236,  130,  131,  132,  205,  199,
      193,  227,  206,  175,  228,  126,  200,  127,   69,  128,
       68,  229,  201,   62,  237,  230,  235,  231,  208,  129,
      238,  232,  239,  236,  130,  131,  132,  133,  233,  209,

      210,  211,  234,  242,  240,  134,  243,  135,  212,  136,
      241,  244,  137,  138,  230,  245,  231,  208,  250,   60,
      232,   58,  251, 1181,   56,   56,  133,  233,  209,  210,
      211,  234,  242,  240,  134,  243,  135,  212,  136,  241,
      244,  137,  138,  149,  245,  150,  255,  250,  151,  152,
      246,  251,  153,  154,  155,  248,  156,  256,  249,   54,
      157,  158,  252,  159,  247,  160,   54,  253,  254,  259,
     1181,  262,  149, 1181,  150,  255,  263,  151,  152,  246,
     1181,  153,  154,  155,  248,  156,  256,  249,  257,  157,
      158,  252,  159,  247,  160,  161,  253,  254,  259,  162,

      262,  268,  163,  164,  260,  263,  269,  272,  258,  165,
      266,  275,  166, 1181,  276, 1181,  261,  257, 1181,  264,
      270,  265,  267,  277,  161,  271, 1181, 1181,  162,  280,
      268,  163,  164,  260,  283,  269,  272,  258,  165,  266,
      275,  166,  217,  276,  218,  261,  273,  219,  264,  270,
      265,  267,  277,  220,  271,  221,  274,  278,  280,  284,
      222,  281,  282,  283,  285,  286,  279,  287,  288,  289,
      292,  217,  293,  218,  294,  273,  219,  290,  291,  298,
      299, 1181,  220,  307,  221,  274,  278, 1181,  284,  222,
      281,  282, 1181,  285,  286,  308,  287,  288,  289,  292,

      295,  293,  316,  294,  296,  309,  290,  291,  298,  299,
      297, 1181,  307, 1181,  311,  317,  310,  318,  319,  320,
      313,  312,  321, 1181,  308,  326, 1181,  314,  315,  295,
     1181,  316, 1181,  296,  309,  327,  328,  329,  330,  297,
      300,  331,  301,  311,  317,  310,  318,  319,  320,  313,
      312,  321,  302,  303,  326,  304,  314,  315,  305,  322,
      335,  306,  323,  336,  327,  328,  329,  330,  342,  300,
      331,  301,  347, 1181,  345,  348,  324,  332, 1181,  325,
      346,  302,  303,  337,  304,  333,  334,  305,  322,  335,
      306,  323,  336,  338,  343,  349,  350,  342,  344,  356,

      339,  347,  340,  345,  348,  324,  332,  341,  325,  346,
     1181, 1181,  337, 1181,  333,  334, 1181,  183,  183,  183,
      183, 1181,  338,  343,  349,  350, 1181,  344,  356,  339,
      184,  340,  357,  351,  351,  358,  341,  352,  352,  352,
      352,  354,  354,  359,  360,  355,  355,  355,  355,  186,
      186,  186,  186,  186,  186,  186,  186,  361,  362,  184,
      363,  357,  364,  365,  358,  366,  369,  367,  371,  372,
      370,  373,  359,  360,  374,  376,  381, 1181, 1181,  382,
     1181,  383,  368,  375,  384,  385,  361,  362,  386,  363,
      387,  364,  365,  388,  366,  369,  367,  371,  372,  370,

      373,  377,  389,  374,  376,  381,  378,  379,  382,  380,
      383,  368,  375,  384,  385,  390,  391,  386,  392,  387,
      394,  395,  388,  396,  397,  398,  399,  400,  401,  402,
      377,  389,  403,  404,  405,  378,  379,  393,  380,  406,
      407,  408,  409,  410,  390,  391,  411,  392,  413,  394,
      395,  416,  396,  397,  398,  399,  400,  401,  402,  412,
      417,  403,  404,  405,  414,  418,  393,  419,  406,  407,
      408,  409,  410,  420,  421,  411,  422,  413,  423,  424,
      416,  415,  425,  427,  428,  429,  430,  431,  412,  417,
      432,  433,  426,  414,  418,  434,  419,  435,  438,  436,

      439,  443,  420,  421,  444,  422,  446,  423,  424,  437,
      415,  425,  427,  428,  429,  430,  431,  440,  447,  432,
      433,  426,  448,  449,  434,  450,  435,  438,  436,  439,
      443,  441,  451,  444,  452,  446,  453,  454,  437,  455,
      456,  457,  442,  458,  459,  460,  440,  447,  461,  464,
      465,  448,  449,  466,  450,  467,  462,  472,  468,  473,
      441,  451,  476,  452, 1181,  453,  454,  470,  455,  456,
      457,  469,  458,  459,  460,  463,  471,  461,  464,  465,
      477,  478,  466,  479,  467,  462,  472,  468,  473,  474,
      480,  476,  481,  475,  482,  483,  470,  484,  485,  488,

      469,  486,  489,  490,  463,  471,  491,  493,  494,  477,
      478,  487,  479,  495,  496,  497,  498,  501,  474,  480,
      502,  481,  475,  482,  483,  503,  484,  485,  488,  504,
      486,  489,  490,  505,  506,  491,  493,  494,  499,  507,
      500,  508,  495,  496,  497,  498,  501,  509,  510,  502,
      511,  512,  514,  515,  503,  516,  513,  517,  504,  518,
      519,  520,  505,  506,  521,  522,  526,  499,  507,  500,
      508,  527,  529,  523,  524,  528,  509,  510,  530,  511,
      512,  514,  515, 1181,  516,  513,  517,  525,  518,  519,
      520, 1181,  532,  521,  522,  526,  352,  352,  352,  352,

      527,  529,  523,  524,  528,  533,  534,  530,  352,  352,
      352,  352,  355,  355,  355,  355,  525,  355,  355,  355,
      355,  532,  535,  536,  537,  538,  539,  540,  541,  542,
      543,  544,  545,  546,  533,  534,  547,  548,  549,  551,
      552,  553,  550,  554,  555,  556,  557,  558, 1181,  564,
      565,  535,  536,  537,  538,  539,  540,  541,  542,  543,
      544,  545,  546, 1181,  566,  547,  548,  549,  551,  552,
      553,  550,  554,  555,  556,  557,  558,  559,  564,  565,
      560,  567,  568,  569,  570,  571,  572,  573,  574,  575,
      561,  576,  562,  566,  577,  578,  563,  579,  580,  581,

      582,  583,  584,  585,  586,  587,  559,  588,  589,  560,
      567,  568,  569,  570,  571,  572,  573,  574,  575,  561,
      576,  562,  590,  577,  578,  563,  579,  580,  581,  582,
      583,  584,  585,  586,  587,  591,  588,  589,  592,  593,
      594,  595,  596,  597,  598,  600,  601,  602,  603,  604,
      605,  590,  606,  607,  608,  609,  610,  612,  613,  614,
      615,  616,  611,  617,  591,  618,  619,  592,  593,  594,
      595,  596,  597,  598,  600,  601,  602,  603,  604,  605,
      620,  606,  607,  608,  609,  610,  612,  613,  614,  615,
      616,  611,  617,  621,  618,  619,  622,  623,  624,  625,

      626,  627,  628,  629,  630,  632,  633,  634,  631,  620,
      635,  636,  637,  638,  639,  640,  641,  642,  643,  644,
      645,  646,  621,  647,  648,  622,  623,  624,  625,  626,
      627,  628,  629,  630,  632,  633,  634,  631,  649,  635,
      636,  637,  638,  639,  640,  641,  642,  643,  644,  645,
      646,  650,  647,  648,  651,  652,  654,  655,  656,  657,
      658,  653,  659,  660,  661,  662,  663,  649,  664,  665,
      666,  667,  668,  669,  670,  671,  672,  673,  674,  675,
      650,  676,  677,  651,  652,  654,  655,  656,  657,  658,
      653,  659,  660,  661,  662,  663,  678,  664,  665,  666,

      667,  668,  669,  670,  671,  672,  673,  674,  675,  679,
      676,  677,  680,  682,  683,  684,  685,  686,  687,  688,
      689,  690,  691,  692,  693,  678,  694,  695,  696,  697,
      698,  699,  700,  701,  703,  704,  705,  706,  679,  707,
      708,  680,  682,  683,  684,  685,  686,  687,  688,  689,
      690,  691,  692,  693,  709,  694,  695,  696,  697,  698,
      699,  700,  701,  703,  704,  705,  706,  710,  707,  708,
      711,  712,  713,  715,  716,  717,  718,  719,  720,  721,
      722,  723,  727,  709,  728,  729,  730,  731,  732,  733,
      734,  735,  736,  737,  738,  739,  710,  740,  741,  711,

      712,  713,  715,  716,  717,  718,  719,  720,  721,  722,
      723,  727,  742,  728,  729,  730,  731,  732,  733,  734,
      735,  736,  737,  738,  739,  743,  740,  741,  744,  745,
      746,  747,  748,  749,  750,  751,  752,  753,  754,  755,
      756,  742,  757,  758,  759,  760,  761,  762,  763,  764,
      765,  766,  767,  768,  743,  769,  770,  744,  745,  746,
      747,  748,  749,  750,  751,  752,  753,  754,  755,  756,
      771,  757,  758,  759,  760,  761,  762,  763,  764,  765,
      766,  767,  768,  772,  769,  770,  773,  774,  775,  776,
      777,  778,  779,  780,  781,  782,  783,  784,  787,  771,

      788,  789,  785,  790,  791,  792,  786,  793,  794,  795,
      796,  797,  772,  798,  799,  773,  774,  775,  776,  777,
      778,  779,  780,  781,  782,  783,  784,  787,  800,  788,
      789,  785,  790,  791,  792,  786,  793,  794,  795,  796,
      797,  801,  798,  799,  802,  803,  804,  805,  806,  807,
      808,  810,  812,  813,  814,  815,  816,  800,  817,  818,
      819,  820,  821,  822,  823,  824,  825,  826,  827,  828,
      801,  829,  830,  802,  803,  804,  805,  806,  807,  808,
      810,  812,  813,  814,  815,  816,  831,  817,  818,  819,
      820,  821,  822,  823,  824,  825,  826,  827,  828,  832,

      829,  830,  833,  834,  835,  836,  837,  838,  839,  840,
      841,  842,  843,  844,  845,  831,  846,  849,  850,  851,
      852,  853,  854,  855,  856,  857,  858,  859,  832,  860,
      847,  833,  834,  835,  836,  837,  838,  839,  840,  841,
      842,  843,  844,  845,  861,  846,  849,  850,  851,  852,
      853,  854,  855,  856,  857,  858,  859,  862,  860,  847,
      863,  864,  865,  866,  867,  868,  869,  870,  871,  872,
      873,  874,  875,  861,  876,  877,  878,  879,  880,  881,
      882,  883,  886,  887,  888,  889,  862,  890,  891,  863,
      864,  865,  866,  867,  868,  869,  870,  871,  872,  873,

      874,  875,  892,  876,  877,  878,  879,  880,  881,  882,
      883,  886,  887,  888,  889,  893,  890,  891,  894,  895,
      896,  897,  898,  899,  900,  901,  902,  903,  904,  905,
      906,  892,  908,  909,  910,  911,  912,  913,  914,  915,
      916,  917,  918,  919,  893,  920,  921,  894,  895,  896,
      897,  898,  899,  900,  901,  902,  903,  904,  905,  906,
      922,  908,  909,  910,  911,  912,  913,  914,  915,  916,
      917,  918,  919,  923,  920,  921,  924,  925,  926,  927,
      928,  929,  930,  931,  932,  933,  934,  935,  936,  922,
      937,  938,  939,  940,  941,  942,  943,  944,  946,  947,

      948,  949,  923,  950,  951,  924,  925,  926,  927,  928,
      929,  930,  931,  932,  933,  934,  935,  936,  952,  937,
      938,  939,  940,  941,  942,  943,  944,  946,  947,  948,
      949,  955,  950,  951,  953,  954,  956,  957,  958,  959,
      960,  961,  962,  963,  964,  966,  967,  952,  968,  969,
      970,  971,  972,  975,  973,  976,  977,  978,  979,  980,
      955,  982,  983,  953,  954,  956,  957,  958,  959,  960,
      961,  962,  963,  964,  966,  967,  974,  968,  969,  970,
      971,  972,  975,  984,  976,  977,  978,  979,  980,  985,
      982,  983,  986,  987,  988,  989,  990,  991,  992,  993,

      994,  995,  996,  997,  998,  974,  999, 1000, 1001, 1002,
     1003, 1004,  984, 1005, 1006, 1007, 1008, 1009,  985, 1010,
     1011,  986,  987,  988,  989,  990,  991,  992,  993,  994,
      995,  996,  997,  998, 1012,  999, 1000, 1001, 1002, 1003,
     1004, 1013, 1005, 1006, 1007, 1008, 1009, 1014, 1010, 1011,
     1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
     1025, 1026, 1027, 1012, 1028, 1029, 1030, 1031, 1032, 1034,
     1013, 1036, 1037, 1181, 1040, 1041, 1014, 1042, 1043, 1015,
     1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1038, 1028, 1029, 1030, 1031, 1032, 1034, 1044,

     1036, 1037, 1039, 1040, 1041, 1046, 1042, 1043, 1047, 1048,
     1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
     1059, 1038, 1060, 1061, 1062, 1063, 1065, 1066, 1044, 1067,
     1068, 1039, 1069, 1071, 1046, 1072, 1073, 1047, 1048, 1049,
     1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
     1074, 1060, 1061, 1062, 1063, 1065, 1066, 1075, 1067, 1068,
     1076, 1069, 1071, 1077, 1072, 1073, 1078, 1079, 1080, 1081,
     1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1074,
     1091, 1092, 1093, 1094, 1095, 1096, 1075, 1097, 1098, 1076,
     1099, 1100, 1077, 1101, 1102, 1078, 1079, 1080, 1081, 1082,

     1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1103, 1091,
     1092, 1093, 1094, 1095, 1096, 1104, 1097, 1098, 1105, 1099,
     1100, 1106, 1101, 1102, 1107, 1108, 1109, 1110, 1111, 1112,
     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1103, 1120, 1121,
     1122, 1123, 1124, 1125, 1104, 1126, 1127, 1105, 1128, 1129,
     1106, 1130, 1132, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
     1114, 1115, 1116, 1117, 1118, 1119, 1133, 1120, 1121, 1122,
     1123, 1124, 1125, 1134, 1126, 1127, 1135, 1128, 1129, 1136,
     1130, 1132, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
     1145, 1146, 1147, 1148, 1149, 1133, 1150, 1151, 1152, 1153,

     1154, 1155, 1134, 1156, 1157, 1135, 1158, 1159, 1136, 1161,
     1162, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145,
     1146, 1147, 1148, 1149, 1163, 1150, 1151, 1152, 1153, 1154,
     1155, 1164, 1156, 1157, 1165, 1158, 1159, 1166, 1161, 1162,
     1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177,
     1178, 1179, 1180, 1163, 1181, 1181, 1181, 1181, 1181, 1181,
     1164, 1181, 1181, 1165, 1181, 1181, 1166, 1181, 1181, 1167,
     1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178,
     1179, 1180,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   59,
     1181,   59, 1181,   59,   59,   59,   59,   59,  176,  176,
      176,  176, 1181,  176,  176,  176,  176,  178,  178,  178,
      178,  178,  178,  178,  178,  180, 1181, 1181,  180,  180,
      180,  180,  180,  180,  182,  182,  182,  182,  182,  182,
     1181,  182,  182,  353,  353,  353,  353,  353, 1181,  353,
      353,  353,    9, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181
    } ;

static const flex_int16_t yy_chk[2542] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   11,   11,
       11,   12,   12,   12,   18,   18,   18,   18,   20, 1186,
       20,   20,   20,   20,   21,   21,   30,   27,   30,   33,

       35,   27,   30,   20, 1174,   36,   42,   27,   30,   36,
       27,   32, 1157,   47,   57,   57,   57,   27,   32, 1119,
       71,   74, 1044,   75,   32,   30,   27,   30,   33,   35,
       27,   30,   20,   26,   36,   42,   27,   30,   36,   27,
       32,   26,   47,   26, 1034,   26,   27,   32,   26,   71,
       74,   26,   75,   32,   76,   79, 1003,   80,   34,  990,
       34,   34,   26,   61,   61,   61,   61,  988,   34,  920,
       26,   37,   26,   34,   26,   37,   61,   26,  900,   37,
       26,   28,   69,   76,   79,   37,   80,   34,   28,   34,
       34,   46,   28,   46,   69,   28,   46,   34,   28,   38,

       37,   28,   34,   38,   37,   61,  877,   38,   37,   82,
       28,   69,   84,   38,   37,   87,  825,   28,   72,  793,
       46,   28,   46,   69,   28,   46,   72,   28,   38,   41,
       28,   29,   38,   41,   88,   29,   38,   41,   82,   29,
       41,   84,   38,  792,   87,   29,   41,   72,   29,   90,
       91,   29,  531,   43,  736,   72,  531,   43,   41,  689,
       29,   43,   41,   88,   29,  686,   41,   43,   29,   41,
       63,   63,   63,   63,   29,   41,  581,   29,   90,   91,
       29,   31,   43,   63,   48,   31,   43,   48,   48,   31,
       43,  568,   31,  555,   48,   31,   43,   86,   31,  431,

       64,   31,   64,   64,   64,   64,  353,   86,   92,   77,
       31,  315,   63,   48,   31,   64,   48,   48,   31,  272,
       73,   31,   77,   48,   31,   93,   86,   31,   65,   65,
       31,   39,   65,   65,   65,   65,   86,   92,   77,   83,
       78,   73,   94,   83,   64,   95,   39,   78,   39,   73,
       39,   77,   96,   78,   93,   99,   59,   98,  582,  582,
       39,  100,   54,  101,   98,   39,   39,   39,   83,   78,
       73,   94,   83,   51,   95,   39,   78,   39,   25,   39,
       23,   96,   78,   19,   99,   97,   98,   97,   85,   39,
      100,   97,  101,   98,   39,   39,   39,   40,   97,   85,

       85,   85,   97,  103,  102,   40,  104,   40,   85,   40,
      102,  105,   40,   40,   97,  106,   97,   85,  109,   17,
       97,   13,  111,    9,    8,    7,   40,   97,   85,   85,
       85,   97,  103,  102,   40,  104,   40,   85,   40,  102,
      105,   40,   40,   44,  106,   44,  113,  109,   44,   44,
      107,  111,   44,   44,   44,  108,   44,  114,  108,    6,
       44,   44,  112,   44,  107,   44,    5,  112,  112,  116,
        0,  118,   44,    0,   44,  113,  118,   44,   44,  107,
        0,   44,   44,   44,  108,   44,  114,  108,  115,   44,
       44,  112,   44,  107,   44,   45,  112,  112,  116,   45,

      118,  121,   45,   45,  117,  118,  121,  123,  115,   45,
      120,  126,   45,    0,  127,    0,  117,  115,    0,  119,
      122,  119,  120,  128,   45,  122,    0,    0,   45,  130,
      121,   45,   45,  117,  132,  121,  123,  115,   45,  120,
      126,   45,   89,  127,   89,  117,  124,   89,  119,  122,
      119,  120,  128,   89,  122,   89,  124,  129,  130,  133,
       89,  131,  131,  132,  134,  135,  129,  136,  137,  138,
      140,   89,  141,   89,  142,  124,   89,  139,  139,  144,
      145,    0,   89,  147,   89,  124,  129,    0,  133,   89,
      131,  131,    0,  134,  135,  148,  136,  137,  138,  140,

      143,  141,  151,  142,  143,  148,  139,  139,  144,  145,
      143,    0,  147,    0,  149,  152,  148,  153,  154,  155,
      150,  149,  156,    0,  148,  158,    0,  150,  150,  143,
        0,  151,    0,  143,  148,  159,  160,  161,  162,  143,
      146,  163,  146,  149,  152,  148,  153,  154,  155,  150,
      149,  156,  146,  146,  158,  146,  150,  150,  146,  157,
      165,  146,  157,  166,  159,  160,  161,  162,  168,  146,
      163,  146,  171,    0,  170,  172,  157,  164,    0,  157,
      170,  146,  146,  166,  146,  164,  164,  146,  157,  165,
      146,  157,  166,  167,  169,  173,  174,  168,  169,  187,

      167,  171,  167,  170,  172,  157,  164,  167,  157,  170,
        0,    0,  166,    0,  164,  164,    0,  183,  183,  183,
      183,    0,  167,  169,  173,  174,    0,  169,  187,  167,
      183,  167,  188,  181,  181,  191,  167,  181,  181,  181,
      181,  184,  184,  194,  197,  184,  184,  184,  184,  185,
      185,  185,  185,  186,  186,  186,  186,  198,  199,  183,
      200,  188,  202,  203,  191,  204,  205,  204,  206,  207,
      205,  208,  194,  197,  209,  210,  212,    0,    0,  213,
        0,  214,  204,  209,  215,  216,  198,  199,  217,  200,
      218,  202,  203,  219,  204,  205,  204,  206,  207,  205,

      208,  211,  220,  209,  210,  212,  211,  211,  213,  211,
      214,  204,  209,  215,  216,  221,  222,  217,  223,  218,
      224,  225,  219,  226,  227,  229,  230,  231,  232,  233,
      211,  220,  234,  235,  236,  211,  211,  223,  211,  237,
      238,  239,  240,  241,  221,  222,  242,  223,  243,  224,
      225,  245,  226,  227,  229,  230,  231,  232,  233,  242,
      246,  234,  235,  236,  244,  247,  223,  248,  237,  238,
      239,  240,  241,  249,  250,  242,  251,  243,  252,  253,
      245,  244,  254,  255,  256,  257,  259,  261,  242,  246,
      262,  263,  254,  244,  247,  264,  248,  265,  267,  266,

      268,  270,  249,  250,  271,  251,  273,  252,  253,  266,
      244,  254,  255,  256,  257,  259,  261,  269,  274,  262,
      263,  254,  275,  276,  264,  277,  265,  267,  266,  268,
      270,  269,  279,  271,  280,  273,  281,  282,  266,  283,
      284,  285,  269,  286,  287,  288,  269,  274,  289,  291,
      292,  275,  276,  293,  277,  294,  290,  297,  295,  298,
      269,  279,  300,  280,    0,  281,  282,  296,  283,  284,
      285,  295,  286,  287,  288,  290,  296,  289,  291,  292,
      301,  302,  293,  303,  294,  290,  297,  295,  298,  299,
      304,  300,  305,  299,  306,  307,  296,  308,  309,  311,

      295,  310,  312,  313,  290,  296,  314,  316,  317,  301,
      302,  310,  303,  318,  319,  320,  321,  323,  299,  304,
      324,  305,  299,  306,  307,  325,  308,  309,  311,  327,
      310,  312,  313,  328,  329,  314,  316,  317,  322,  330,
      322,  331,  318,  319,  320,  321,  323,  332,  333,  324,
      334,  336,  337,  338,  325,  339,  336,  340,  327,  341,
      342,  343,  328,  329,  344,  345,  347,  322,  330,  322,
      331,  348,  349,  346,  346,  348,  332,  333,  350,  334,
      336,  337,  338,    0,  339,  336,  340,  346,  341,  342,
      343,    0,  356,  344,  345,  347,  351,  351,  351,  351,

      348,  349,  346,  346,  348,  357,  358,  350,  352,  352,
      352,  352,  354,  354,  354,  354,  346,  355,  355,  355,
      355,  356,  359,  360,  361,  362,  363,  365,  366,  369,
      370,  371,  372,  373,  357,  358,  374,  375,  376,  377,
      378,  379,  376,  380,  381,  382,  383,  384,    0,  386,
      387,  359,  360,  361,  362,  363,  365,  366,  369,  370,
      371,  372,  373,    0,  388,  374,  375,  376,  377,  378,
      379,  376,  380,  381,  382,  383,  384,  385,  386,  387,
      385,  389,  390,  391,  392,  393,  394,  398,  399,  400,
      385,  401,  385,  388,  402,  403,  385,  404,  406,  407,

      408,  409,  410,  412,  414,  415,  385,  416,  417,  385,
      389,  390,  391,  392,  393,  394,  398,  399,  400,  385,
      401,  385,  418,  402,  403,  385,  404,  406,  407,  408,
      409,  410,  412,  414,  415,  420,  416,  417,  421,  422,
      423,  424,  425,  427,  429,  432,  435,  436,  437,  439,
      440,  418,  441,  442,  443,  444,  445,  446,  447,  448,
      449,  451,  445,  452,  420,  453,  454,  421,  422,  423,
      424,  425,  427,  429,  432,  435,  436,  437,  439,  440,
      455,  441,  442,  443,  444,  445,  446,  447,  448,  449,
      451,  445,  452,  456,  453,  454,  458,  459,  460,  462,

      463,  464,  465,  466,  468,  469,  470,  471,  468,  455,
      472,  473,  474,  477,  478,  479,  480,  481,  482,  483,
      484,  485,  456,  487,  488,  458,  459,  460,  462,  463,
      464,  465,  466,  468,  469,  470,  471,  468,  489,  472,
      473,  474,  477,  478,  479,  480,  481,  482,  483,  484,
      485,  490,  487,  488,  491,  492,  494,  495,  496,  497,
      498,  492,  499,  500,  501,  502,  503,  489,  504,  505,
      506,  510,  511,  512,  513,  515,  516,  517,  518,  519,
      490,  521,  522,  491,  492,  494,  495,  496,  497,  498,
      492,  499,  500,  501,  502,  503,  523,  504,  505,  506,

      510,  511,  512,  513,  515,  516,  517,  518,  519,  524,
      521,  522,  528,  532,  533,  537,  538,  539,  540,  541,
      542,  543,  544,  545,  546,  523,  547,  548,  549,  550,
      551,  552,  553,  554,  556,  558,  559,  560,  524,  561,
      562,  528,  532,  533,  537,  538,  539,  540,  541,  542,
      543,  544,  545,  546,  563,  547,  548,  549,  550,  551,
      552,  553,  554,  556,  558,  559,  560,  564,  561,  562,
      565,  566,  567,  569,  570,  571,  572,  574,  575,  576,
      577,  578,  583,  563,  584,  585,  586,  587,  588,  590,
      591,  592,  593,  595,  596,  597,  564,  598,  599,  565,

      566,  567,  569,  570,  571,  572,  574,  575,  576,  577,
      578,  583,  600,  584,  585,  586,  587,  588,  590,  591,
      592,  593,  595,  596,  597,  603,  598,  599,  604,  605,
      606,  607,  608,  610,  611,  612,  614,  616,  618,  619,
      620,  600,  621,  622,  625,  626,  627,  628,  630,  631,
      632,  633,  634,  635,  603,  638,  639,  604,  605,  606,
      607,  608,  610,  611,  612,  614,  616,  618,  619,  620,
      640,  621,  622,  625,  626,  627,  628,  630,  631,  632,
      633,  634,  635,  641,  638,  639,  642,  643,  645,  646,
      647,  648,  650,  651,  652,  653,  654,  656,  657,  640,

      658,  660,  656,  661,  662,  664,  656,  665,  666,  667,
      668,  669,  641,  670,  671,  642,  643,  645,  646,  647,
      648,  650,  651,  652,  653,  654,  656,  657,  673,  658,
      660,  656,  661,  662,  664,  656,  665,  666,  667,  668,
      669,  674,  670,  671,  675,  677,  678,  679,  682,  683,
      684,  688,  690,  691,  692,  693,  694,  673,  695,  696,
      698,  699,  700,  701,  702,  703,  704,  705,  706,  707,
      674,  708,  709,  675,  677,  678,  679,  682,  683,  684,
      688,  690,  691,  692,  693,  694,  710,  695,  696,  698,
      699,  700,  701,  702,  703,  704,  705,  706,  707,  711,

      708,  709,  712,  714,  715,  716,  717,  720,  722,  723,
      724,  727,  730,  731,  733,  710,  735,  738,  740,  741,
      742,  746,  747,  749,  750,  751,  752,  753,  711,  755,
      735,  712,  714,  715,  716,  717,  720,  722,  723,  724,
      727,  730,  731,  733,  756,  735,  738,  740,  741,  742,
      746,  747,  749,  750,  751,  752,  753,  759,  755,  735,
      760,  761,  762,  763,  764,  765,  766,  767,  768,  769,
      772,  773,  776,  756,  777,  780,  781,  782,  784,  785,
      786,  787,  795,  796,  797,  798,  759,  799,  800,  760,
      761,  762,  763,  764,  765,  766,  767,  768,  769,  772,

      773,  776,  801,  777,  780,  781,  782,  784,  785,  786,
      787,  795,  796,  797,  798,  804,  799,  800,  805,  806,
      807,  809,  811,  812,  813,  815,  819,  820,  821,  823,
      824,  801,  827,  828,  829,  830,  831,  834,  835,  837,
      840,  841,  842,  844,  804,  845,  846,  805,  806,  807,
      809,  811,  812,  813,  815,  819,  820,  821,  823,  824,
      847,  827,  828,  829,  830,  831,  834,  835,  837,  840,
      841,  842,  844,  848,  845,  846,  849,  850,  851,  853,
      854,  855,  856,  857,  859,  861,  862,  863,  864,  847,
      866,  867,  870,  871,  872,  874,  875,  876,  878,  879,

      880,  881,  848,  882,  883,  849,  850,  851,  853,  854,
      855,  856,  857,  859,  861,  862,  863,  864,  884,  866,
      867,  870,  871,  872,  874,  875,  876,  878,  879,  880,
      881,  886,  882,  883,  885,  885,  888,  889,  890,  893,
      894,  896,  897,  898,  899,  902,  903,  884,  904,  905,
      906,  907,  907,  912,  911,  913,  916,  917,  918,  919,
      886,  921,  923,  885,  885,  888,  889,  890,  893,  894,
      896,  897,  898,  899,  902,  903,  911,  904,  905,  906,
      907,  907,  912,  924,  913,  916,  917,  918,  919,  925,
      921,  923,  926,  927,  928,  929,  930,  931,  932,  934,

      935,  937,  938,  939,  940,  911,  941,  944,  945,  946,
      947,  948,  924,  950,  952,  953,  954,  955,  925,  957,
      958,  926,  927,  928,  929,  930,  931,  932,  934,  935,
      937,  938,  939,  940,  959,  941,  944,  945,  946,  947,
      948,  960,  950,  952,  953,  954,  955,  962,  957,  958,
      963,  965,  966,  967,  970,  971,  972,  974,  975,  976,
      977,  978,  980,  959,  981,  982,  983,  986,  987,  989,
      960,  991,  992,    0,  997,  998,  962, 1000, 1001,  963,
      965,  966,  967,  970,  971,  972,  974,  975,  976,  977,
      978,  980,  993,  981,  982,  983,  986,  987,  989, 1002,

      991,  992,  993,  997,  998, 1004, 1000, 1001, 1005, 1006,
     1007, 1008, 1010, 1013, 1014, 1016, 1020, 1021, 1022, 1025,
     1026,  993, 1028, 1030, 1032, 1033, 1035, 1037, 1002, 1038,
     1041,  993, 1043, 1045, 1004, 1046, 1048, 1005, 1006, 1007,
     1008, 1010, 1013, 1014, 1016, 1020, 1021, 1022, 1025, 1026,
     1049, 1028, 1030, 1032, 1033, 1035, 1037, 1050, 1038, 1041,
     1051, 1043, 1045, 1052, 1046, 1048, 1053, 1054, 1055, 1056,
     1057, 1058, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1049,
     1069, 1070, 1071, 1072, 1073, 1077, 1050, 1078, 1080, 1051,
     1082, 1083, 1052, 1084, 1086, 1053, 1054, 1055, 1056, 1057,

     1058, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1087, 1069,
     1070, 1071, 1072, 1073, 1077, 1088, 1078, 1080, 1089, 1082,
     1083, 1090, 1084, 1086, 1092, 1093, 1094, 1095, 1097, 1098,
     1099, 1100, 1101, 1102, 1103, 1104, 1105, 1087, 1106, 1107,
     1108, 1110, 1111, 1112, 1088, 1114, 1115, 1089, 1116, 1117,
     1090, 1118, 1120, 1092, 1093, 1094, 1095, 1097, 1098, 1099,
     1100, 1101, 1102, 1103, 1104, 1105, 1121, 1106, 1107, 1108,
     1110, 1111, 1112, 1122, 1114, 1115, 1125, 1116, 1117, 1126,
     1118, 1120, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
     1135, 1137, 1138, 1139, 1140, 1121, 1141, 1143, 1144, 1146,

     1148, 1150, 1122, 1151, 1153, 1125, 1154, 1155, 1126, 1158,
     1159, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135,
     1137, 1138, 1139, 1140, 1160, 1141, 1143, 1144, 1146, 1148,
     1150, 1161, 1151, 1153, 1163, 1154, 1155, 1165, 1158, 1159,
     1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1176,
     1177, 1178, 1179, 1160,    0,    0,    0,    0,    0,    0,
     1161,    0,    0, 1163,    0,    0, 1165,    0,    0, 1166,
     1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1176, 1177,
     1178, 1179, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,

     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1185,
        0, 1185,    0, 1185, 1185, 1185, 1185, 1185, 1187, 1187,
     1187, 1187,    0, 1187, 1187, 1187, 1187, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1189,    0,    0, 1189, 1189,
     1189, 1189, 1189, 1189, 1190, 1190, 1190, 1190, 1190, 1190,
        0, 1190, 1190, 1191, 1191, 1191, 1191, 1191,    0, 1191,
     1191, 1191, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sqlparser.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "sqlparser.l"

#include "node.h"
#include "sqlparser_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#line 1432 "sqlparser_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1445 "sqlparser_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 99 "sqlparser.l"

#line 1732 "sqlparser_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1182 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1181 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 100 "sqlparser.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 101 "sqlparser.l"
{ return ALTER; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 102 "sqlparser.l"
{ return AND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 103 "sqlparser.l"
{ return ANY; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 104 "sqlparser.l"
{ return ALL; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 105 "sqlparser.l"
{ return AS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 106 "sqlparser.l"
{ return ASC; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 107 "sqlparser.l"
{ return BEGI; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 108 "sqlparser.l"
{ return BETWEEN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 109 "sqlparser.l"
{ return BIGINT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 110 "sqlparser.l"
{ return BINARY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 111 "sqlparser.l"
{ return BOTH; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 112 "sqlparser.l"
{ return BROWSE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "sqlparser.l"
{ return BY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 114 "sqlparser.l"
{ return CASCADE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 115 "sqlparser.l"
{ return CASE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 116 "sqlparser.l"
{ return CHARACTER; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 117 "sqlparser.l"
{ return CLUSTER; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 118 "sqlparser.l"
{ return COLUMN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 119 "sqlparser.l"
{ return COLUMNS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 120 "sqlparser.l"
{ return COMMIT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 121 "sqlparser.l"
{ return CONSISTENT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 122 "sqlparser.l"
{ return CREATE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 123 "sqlparser.l"
{ return CREATETIME; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 124 "sqlparser.l"
{ return CROSS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 125 "sqlparser.l"
{ return CURRENT_USER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 126 "sqlparser.l"
{ return DATE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 127 "sqlparser.l"
{ return DATETIME; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 128 "sqlparser.l"
{ return DEALLOCATE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 129 "sqlparser.l"
{ return DECIMAL; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 130 "sqlparser.l"
{ return DEFAULT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 131 "sqlparser.l"
{ return DELETE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 132 "sqlparser.l"
{ return DESC; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 133 "sqlparser.l"
{ return DESCRIBE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 134 "sqlparser.l"
{ return DISTINCT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 135 "sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 136 "sqlparser.l"
{ return DROP; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 137 "sqlparser.l"
{ return DUAL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 138 "sqlparser.l"
{ return ELSE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 139 "sqlparser.l"
{ return END; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 140 "sqlparser.l"
{ return ERROR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 141 "sqlparser.l"
{ return EXCEPT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 142 "sqlparser.l"
{ return EXECUTE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 143 "sqlparser.l"
{ return EXISTS; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 144 "sqlparser.l"
{ return EXPLAIN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 145 "sqlparser.l"
{ return FETCH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 146 "sqlparser.l"
{ return FIRST; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 147 "sqlparser.l"
{ return NEXT; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 148 "sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 149 "sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 150 "sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 151 "sqlparser.l"
{ return FOR; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 152 "sqlparser.l"
{ return FROM; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 153 "sqlparser.l"
{ return FULL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 154 "sqlparser.l"
{ return GRANT; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 155 "sqlparser.l"
{ return GROUP; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 156 "sqlparser.l"
{ return GLOBAL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 157 "sqlparser.l"
{ return HASH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 158 "sqlparser.l"
{ return HAVING; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 159 "sqlparser.l"
{ return IDENTIFIED; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 160 "sqlparser.l"
{ return IF; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 161 "sqlparser.l"
{ return IN; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 162 "sqlparser.l"
{ return INNER; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 163 "sqlparser.l"
{ return INTERSECT; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 164 "sqlparser.l"
{ return INSERT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 165 "sqlparser.l"
{ return INTO; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 166 "sqlparser.l"
{ return IS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 167 "sqlparser.l"
{ return JOIN; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 168 "sqlparser.l"
{ return KEY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 169 "sqlparser.l"
{ return LEADING; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 170 "sqlparser.l"
{ return LEFT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 171 "sqlparser.l"
{ return LIMIT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 172 "sqlparser.l"
{ return LIKE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 173 "sqlparser.l"
{ return LOCAL; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 174 "sqlparser.l"
{ return LOCKED; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 175 "sqlparser.l"
{ return LOOP; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 176 "sqlparser.l"
{ return MEMORY; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 177 "sqlparser.l"
{ return MERGE; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 178 "sqlparser.l"
{ return MOD; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 179 "sqlparser.l"
{ return MODIFYTIME; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 180 "sqlparser.l"
{ return NATURAL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "sqlparser.l"
{ return NOT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "sqlparser.l"
{ return NUMERIC; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "sqlparser.l"
{ return OFFSET; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 184 "sqlparser.l"
{ return ON; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 185 "sqlparser.l"
{ return ONLY; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 186 "sqlparser.l"
{ return OPTION; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 187 "sqlparser.l"
{ return OR; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 188 "sqlparser.l"
{ return ORDER; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 189 "sqlparser.l"
{ return OUTER; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 190 "sqlparser.l"
{ return COMMENT; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 191 "sqlparser.l"
{ return PARAMETERS; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 192 "sqlparser.l"
{ return PASSWORD; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 193 "sqlparser.l"
{ return PRECISION; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 194 "sqlparser.l"
{ return PREPARE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 195 "sqlparser.l"
{ return PRIMARY; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 196 "sqlparser.l"
{ return REAL; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 197 "sqlparser.l"
{ return REMOTE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 198 "sqlparser.l"
{ return RENAME; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 199 "sqlparser.l"
{ return REPLACE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 200 "sqlparser.l"
{ return RESTRICT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 201 "sqlparser.l"
{ return REVOKE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 202 "sqlparser.l"
{ return RIGHT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 203 "sqlparser.l"
{ return ROLLBACK; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 204 "sqlparser.l"
{ return ROW; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 205 "sqlparser.l"
{ return ROWS; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 206 "sqlparser.l"
{ return PRIVILEGES; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 207 "sqlparser.l"
{ return SELECT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 208 "sqlparser.l"
{ return SCHEMA; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 209 "sqlparser.l"
{ return PROCESSLIST; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 210 "sqlparser.l"
{ return SCOPE; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 211 "sqlparser.l"
{ return SESSION; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 212 "sqlparser.l"
{ return SET; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 213 "sqlparser.l"
{ return SHOW; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 214 "sqlparser.l"
{ return SMALLINT; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 215 "sqlparser.l"
{ return SNAPSHOT; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 216 "sqlparser.l"
{ return SPFILE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 217 "sqlparser.l"
{ return START; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 218 "sqlparser.l"
{ return STATIC; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 219 "sqlparser.l"
{ return WEAK;   }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 220 "sqlparser.l"
{ return STRONG; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 221 "sqlparser.l"
{ return SYSTEM; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 222 "sqlparser.l"
{ return TABLE; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 223 "sqlparser.l"
{ return TABLES; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 224 "sqlparser.l"
{ return THEN; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 225 "sqlparser.l"
{ return TIME; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 226 "sqlparser.l"
{ return TIMESTAMP; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 227 "sqlparser.l"
{ return TINYINT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 228 "sqlparser.l"
{ return TO; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 229 "sqlparser.l"
{ return TRAILING; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 230 "sqlparser.l"
{ return TRANSACTION; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 231 "sqlparser.l"
{ return UNION; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 232 "sqlparser.l"
{ return UPDATE; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 233 "sqlparser.l"
{ return USER; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 234 "sqlparser.l"
{ return USING; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 235 "sqlparser.l"
{ return VALUES; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 236 "sqlparser.l"
{ return VARBINARY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 237 "sqlparser.l"
{ return VARCHAR; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 238 "sqlparser.l"
{ return WHERE; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 239 "sqlparser.l"
{ return WHEN; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 240 "sqlparser.l"
{ return WITH; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 241 "sqlparser.l"
{ return WORK; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 242 "sqlparser.l"
{ return KILL; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 243 "sqlparser.l"
{ return QUERY; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 244 "sqlparser.l"
{ return CONNECTION; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 245 "sqlparser.l"
{ return FROZEN;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 246 "sqlparser.l"
{ return GLOBAL_ALIAS; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 247 "sqlparser.l"
{ return SESSION_ALIAS; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 248 "sqlparser.l"
{ return CHANGE_OBI; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 249 "sqlparser.l"
{ return SWITCH_CLUSTER; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 250 "sqlparser.l"
{ return SET_MASTER_CLUSTER; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 251 "sqlparser.l"
{ return SET_SLAVE_CLUSTER;  }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 252 "sqlparser.l"
{ return MASTER; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 253 "sqlparser.l"
{ return SLAVE;  }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 254 "sqlparser.l"
{ return FORCE;  }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 255 "sqlparser.l"
{ return TOP; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 256 "sqlparser.l"
{ return PERCENT; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 257 "sqlparser.l"
{ return TIES; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 258 "sqlparser.l"
{ return FAST; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 259 "sqlparser.l"
{ return DISABLE; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 260 "sqlparser.l"
{ return EXTERNALPUSHDOWN; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 261 "sqlparser.l"
{ return IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 262 "sqlparser.l"
{ return KEEP; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 263 "sqlparser.l"
{ return PLAN; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 264 "sqlparser.l"
{ return KEEPFIXED; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 265 "sqlparser.l"
{ return MAX_GRANT_PERCENT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 266 "sqlparser.l"
{ return MIN_GRANT_PERCENT; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 267 "sqlparser.l"
{ return MAXDOP; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 268 "sqlparser.l"
{ return MAXRECURSION; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 269 "sqlparser.l"
{ return NO_PERFORMANCE_SPOOL; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 270 "sqlparser.l"
{ return PARAMETERIZATION; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 271 "sqlparser.l"
{ return SIMPLE; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 272 "sqlparser.l"
{ return FORCED; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 273 "sqlparser.l"
{ return RECOMPILE; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 274 "sqlparser.l"
{ return ROBUST; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 275 "sqlparser.l"
{ return CHECKSUM; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 276 "sqlparser.l"
{ return BINARY_CHECKSUM; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 277 "sqlparser.l"
{ return RANK; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 278 "sqlparser.l"
{ return DENSE_RANK; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 279 "sqlparser.l"
{ return ROW_NUMBER; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 280 "sqlparser.l"
{ return NTILE; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 281 "sqlparser.l"
{ return PARTITION; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 282 "sqlparser.l"
{ return RANGE; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 283 "sqlparser.l"
{ return UNBOUNDED; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 284 "sqlparser.l"
{ return PRECEDING; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 285 "sqlparser.l"
{ return CURRENT; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 286 "sqlparser.l"
{ return FOLLOWING; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 287 "sqlparser.l"
{ return OVER; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 288 "sqlparser.l"
{ return VARP; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 289 "sqlparser.l"
{ return VAR; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 290 "sqlparser.l"
{ return SUM; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 291 "sqlparser.l"
{ return STDEVP; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 292 "sqlparser.l"
{ return STDEV; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 293 "sqlparser.l"
{ return MIN; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 294 "sqlparser.l"
{ return MAX; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 295 "sqlparser.l"
{ return LEAD; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 296 "sqlparser.l"
{ return LAST_VALUE; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 297 "sqlparser.l"
{ return LAG; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 298 "sqlparser.l"
{ return GROUPING_ID; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 299 "sqlparser.l"
{ return GROUPING; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 300 "sqlparser.l"
{ return FIRST_VALUE; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 301 "sqlparser.l"
{ return COUNT_BIG; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 302 "sqlparser.l"
{ return COUNT; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 303 "sqlparser.l"
{ return CHECKSUM_AGG; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 304 "sqlparser.l"
{ return AVG; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 305 "sqlparser.l"
{ return SYSTEM_USER; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 306 "sqlparser.l"
{ return STUFF; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 307 "sqlparser.l"
{ return SESSION_USER; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 308 "sqlparser.l"
{ return NULLIF; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 309 "sqlparser.l"
{ return MIN_ACTIVE_ROWVERSION; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 310 "sqlparser.l"
{ return ISNULL; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 311 "sqlparser.l"
{ return IDENTITY; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 312 "sqlparser.l"
{ return GETUTCDATE; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 313 "sqlparser.l"
{ return GETDATE; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 314 "sqlparser.l"
{ return DATEPART; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 315 "sqlparser.l"
{ return DATENAME; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 316 "sqlparser.l"
{ return DATEDIFF; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 317 "sqlparser.l"
{ return DATEADD; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 318 "sqlparser.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 319 "sqlparser.l"
{ return CONVERT; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 320 "sqlparser.l"
{ return COALESCE; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 321 "sqlparser.l"
{ return CAST; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 323 "sqlparser.l"
{ return BIT; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 324 "sqlparser.l"
{ return CHAR; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 325 "sqlparser.l"
{ return DATETIME2; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 326 "sqlparser.l"
{ return DATETIMEOFFSET; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 327 "sqlparser.l"
{ return INT; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 328 "sqlparser.l"
{ return MONEY; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 329 "sqlparser.l"
{ return NCHAR; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 330 "sqlparser.l"
{ return NVARCHAR; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 331 "sqlparser.l"
{ return SMALLDATETIME; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 333 "sqlparser.l"
{ return SMALLMONEY; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 334 "sqlparser.l"
{ return TEXT; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 335 "sqlparser.l"
{ return COLLATE; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 336 "sqlparser.l"
{ return APPLY; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 338 "sqlparser.l"
{ return SYSTEM_TIME; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 339 "sqlparser.l"
{ return OF; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 340 "sqlparser.l"
{ return CONTAINED; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 341 "sqlparser.l"
{ return PIVOT; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 342 "sqlparser.l"
{ return UNPIVOT; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 344 "sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return NULLX;
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 349 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return INTNUM;
}
	YY_BREAK
case 243:
#line 357 "sqlparser.l"
case 244:
#line 358 "sqlparser.l"
case 245:
YY_RULE_SETUP
#line 358 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 246:
#line 366 "sqlparser.l"
case 247:
YY_RULE_SETUP
#line 366 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 373 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return BOOL;
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 380 "sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return UNKNOWN;
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 385 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return BOOL;
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 392 "sqlparser.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 398 "sqlparser.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "N'";
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 404 "sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 408 "sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 412 "sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return STRING;
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 421 "sqlparser.l"
{
    BEGIN(sb);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '[';
}
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 427 "sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 431 "sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << ']';
    std::string text = ((ParseResult*)yyextra)->buf_.str();
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, text.c_str());
    nd->terminalToken_.str = text.substr(1, text.length() - 2);
    yylval->node = nd;
    return NAME;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 441 "sqlparser.l"
{
  fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return ERROR;
}
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 446 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = std::string(yytext+1, yytext + strlen(yytext) - 1);
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return NAME;
}
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 455 "sqlparser.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return NAME;
}
	YY_BREAK
case 261:
/* rule 261 can match eol */
YY_RULE_SETUP
#line 464 "sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 262:
/* rule 262 can match eol */
YY_RULE_SETUP
#line 465 "sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 467 "sqlparser.l"
{ return yytext[0];}
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 469 "sqlparser.l"
{ return CNNOP; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 470 "sqlparser.l"
{ return COMP_EQ; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 471 "sqlparser.l"
{ return COMP_GE; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 472 "sqlparser.l"
{ return COMP_GT; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 473 "sqlparser.l"
{ return COMP_LE; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 474 "sqlparser.l"
{ return COMP_LT; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 475 "sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 476 "sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 478 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
case YY_STATE_EOF(sb):
#line 485 "sqlparser.l"
{ return END_P; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 487 "sqlparser.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return ERROR;
}
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 491 "sqlparser.l"
ECHO;
	YY_BREAK
#line 3248 "sqlparser_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1182 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1182 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1181);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 491 "sqlparser.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

