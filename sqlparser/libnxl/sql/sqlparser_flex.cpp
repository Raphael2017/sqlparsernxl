#line 2 "sqlparser_flex.cpp"

#line 4 "sqlparser_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yyget_lval
#define yyget_lval_ALREADY_DEFINED
#else
#define yyget_lval yyget_lval
#endif

#ifdef yyset_lval
#define yyset_lval_ALREADY_DEFINED
#else
#define yyset_lval yyset_lval
#endif

#ifdef yyget_lloc
#define yyget_lloc_ALREADY_DEFINED
#else
#define yyget_lloc yyget_lloc
#endif

#ifdef yyset_lloc
#define yyset_lloc_ALREADY_DEFINED
#else
#define yyset_lloc yyset_lloc
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 179
#define YY_END_OF_BUFFER 180
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[739] =
    {   0,
        0,    0,    0,    0,  162,  162,  180,  178,  177,  177,
      167,  178,  167,  160,  167,  167,  167,  151,  173,  169,
      171,  176,  178,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  167,  179,  162,
      163,  175,    0,  166,  156,    0,  155,  151,    0,  172,
      174,  170,    0,  165,  165,  165,  165,    6,  165,  165,
      165,   14,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,   57,   58,   65,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,   82,  165,   84,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  122,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  168,  162,  161,  164,
      166,    0,    0,  155,    0,    0,  152,    0,    0,    1,
        5,  165,    3,    4,    7,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,   30,  165,  165,  165,  165,  165,  165,  165,
      165,   40,  165,  165,  165,  165,  165,  165,  165,   49,

      165,  165,  165,  165,  165,  165,  165,  165,  165,   60,
      165,   67,  165,  165,  165,  165,  165,  165,  165,  165,
      165,   76,  165,   79,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  106,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  149,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,    0,  154,    0,    0,  153,
        0,    0,  165,  165,  165,  165,  165,   12,   13,  165,
       16,  165,   17,  165,  165,  165,  165,  165,  165,  165,

      165,   27,  165,  165,  165,  165,   33,  165,  165,   37,
       38,   39,  165,  165,  165,  165,  165,  165,  165,  165,
       50,  165,   51,  165,  165,  165,  165,  165,  165,  165,
      165,   64,   66,  136,  165,   69,   71,  165,  165,  165,
      165,  165,  165,  165,  165,  150,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,   93,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  107,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  118,  119,  165,  165,  165,  157,  165,  165,
      165,  127,  165,  165,  165,  165,  113,  133,  165,  134,

      135,    0,    0,    0,    2,    8,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
       25,  165,  165,  165,  165,  165,  165,  165,  165,  165,
       41,  165,  165,  165,  165,  159,   46,  148,  165,  165,
       52,   53,  165,  165,   59,  165,  165,  165,  165,   70,
       72,  165,  165,  165,  165,  165,  165,  165,  165,  165,
       85,   86,  165,  165,  165,  165,  165,  165,  165,  137,
      165,  165,  165,  165,   98,  165,  165,  104,  165,  165,
      165,  165,  147,  165,  165,  165,  111,  165,  165,  165,
      165,  116,  165,  165,  165,  165,  125,  165,  165,  128,

      165,  165,  165,  132,  166,    0,    0,  165,   10,   11,
      165,  165,  165,  165,  165,   19,  165,   21,  165,  165,
       23,  165,  165,  165,  165,  165,   32,  165,  165,   36,
       42,  165,   44,  165,   47,   48,  139,   54,   55,  165,
       63,  165,  165,  165,   73,  146,  165,   75,  165,  165,
      165,   81,   83,  165,  165,  165,  165,  165,  165,  165,
       94,  165,  165,   97,  165,  102,  101,  165,  165,  165,
      165,  165,  110,  112,  114,  165,  115,  117,  165,  165,
      165,  165,  165,  126,  129,  165,  165,    0,    0,    9,
       12,   15,  165,  165,   18,   20,   87,  165,  165,  165,

      165,  165,  165,   30,   31,  165,  165,   43,   45,  165,
       61,  165,   68,  165,  165,   78,   80,  165,  165,  165,
       91,   92,  165,  165,   95,  165,  165,  105,  165,  165,
      165,  165,  165,  165,  121,  165,  165,  158,  165,  131,
      140,    0,  165,  165,  165,  165,  165,  165,   28,  165,
       34,   35,  165,  165,  165,  165,  165,   89,  165,  165,
      165,   96,   99,  165,  165,  108,  109,  165,  165,  123,
      165,  165,  165,  141,  165,   17,  165,  165,  165,  165,
      165,  165,   62,   74,  165,  165,   90,  165,  165,  165,
      165,  165,  120,  165,  130,  165,  142,  138,   22,   24,

      165,   29,   56,   77,   88,  100,  165,  165,  165,  165,
      165,  165,  165,  103,  165,  165,  165,  124,  165,   26,
      165,  165,  165,  131,  165,  165,  165,  165,  165,  143,
      165,  165,  165,  165,  165,  145,  144,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    7,    7,    8,    7,
        7,    9,   10,    7,   11,   12,   13,   14,   14,   14,
       14,   15,   14,   14,   14,   16,   14,    1,    7,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
        1,    1,    1,    7,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,   75,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    1,    2,    3,    1,    4,    1,    5,    6,    7,
        1,    1,    6,    8,    8,    8,    1,    1,    1,    1,
        1,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    1
    } ;

static const flex_int16_t yy_base[747] =
    {   0,
        0,    0,    0,    0,  377,  365,  338, 1544, 1544, 1544,
      311,    0, 1544, 1544,  313,   62,  304,   67,   66, 1544,
      282, 1544,  229,   55,   66,  118,  166,   64,   72,   65,
       64,  118,   53,   80,  116,  140,  141,  172,  173,   49,
      191,  231,  240,  216,   78,  279,    0,  174, 1544,    0,
      234, 1544,  231,    0,  296,    0,  302,  311,  329, 1544,
     1544, 1544,  131,    0,   76,  226,  109,  124,  190,  178,
      184,    0,  124,  175,  159,  286,  235,  177,  205,  329,
      223,  232,  271,  292,  290,  306,  294,  335,  317,  316,
      315,  327,  333,  331,  346,  327,  345,    0,  365,    0,

      344,  329,  343,  385,  376,  360,  347,  379,  366,  374,
      375,  386,  390,    0,  380,  397,  382,  385,  400,  402,
      419,  410,  412,  431,  433,  422,  439,  442,  447,  443,
      453,  441,  436,  454,  452,  445,  445,  468,  481,  470,
      482,  481,  477,  489,  475,  479, 1544,    0, 1544, 1544,
        0,  513,    0,  518,  538,  541,  544,  503,  520,    0,
        0,  524,    0,    0,    0,  521,  517,  532,  542,  532,
      537,  543,  533,  530,  532,  541,  541,  557,  540,  543,
      557,  551,  555,  564,  561,  566,  557,  577,  567,  572,
      589,    0,  580,  592,  595,  580,  588,  582,  601,  600,

      592,  595,  606,  595,  591,  604,  600,  610,  611,  618,
      603,    0,  607,  616,  611,  632,  629,  648,  628,  642,
      637,  644,  633,    0,  643,  651,  638,  652,  657,  658,
      665,  648,  669,  655,  666,  652,  659,  672,  662,  667,
      676,  684,  690,  698,  689,  701,  688,  182,  685,  687,
      698,  695,  704,  697,  701,  700,  701,  710,  709,  719,
      700,    0,  717,  722,  713,  725,  740,  727,  732,  735,
      757,  746,  747,  754,  752,  776,  781,  191,  784,  787,
      749,  748,  767,  779,  790,  782,  779,  793,    0,  798,
        0,  793,  800,  782,  790,  799,  800,  797,  787,  790,

      805,  791,  801,  801,  794,  796,  799,  809,  807,    0,
        0,    0,  803,  823,  826,  829,  849,  846,  832,  848,
        0,  849,    0,  854,  836,  841,  844,  839,  842,  843,
      855,    0,    0,    0,  854,    0,    0,  844,  853,  862,
      863,  848,  852,  865,  854,    0,  857,  888,  886,  885,
      886,  892,  883,  898,  907,  908,  901,  906,  887,    0,
      900,  913,  897,  905,  897,  916,  906,  916,  919,  914,
      934,    0,  919,  913,  908,  917,  935,  948,  944,  956,
      955,  956,    0,  943,  954,  952,  946,    0,  952,  952,
      948,    0,  962,  965,  962,  964,    0,    0,  968,    0,

        0,  272,  973,  957,    0,    0,  972,  958,  954,  980,
      979,  996, 1004, 1004,  997,  998,  993, 1011,  996, 1011,
        0, 1003, 1009, 1004, 1019, 1009, 1017, 1014, 1010, 1020,
        0, 1006, 1007, 1010, 1021,    0,  134,    0, 1017, 1020,
        0,    0, 1026, 1026,    0, 1017, 1050, 1042, 1049,    0,
        0, 1061, 1048, 1054, 1043, 1044, 1069, 1062, 1052, 1059,
        0,    0, 1069, 1060, 1057, 1059, 1060, 1067, 1061,    0,
     1076, 1080, 1075, 1080,    0, 1085, 1086,    0, 1069, 1076,
     1108, 1103,    0, 1108, 1111, 1115,    0, 1118, 1115, 1115,
     1111, 1106, 1106, 1113, 1119, 1128,    0, 1107, 1126,    0,

     1113, 1119, 1133,    0, 1544, 1134, 1128, 1124,    0,    0,
     1125, 1135,  146, 1121, 1125, 1126, 1143,    0, 1149, 1151,
     1153, 1154, 1162, 1173, 1165, 1158,    0, 1177, 1177,    0,
        0, 1176,    0, 1168,    0,    0,    0,    0,    0, 1177,
        0, 1166, 1180, 1179,    0,    0, 1178,    0, 1168, 1177,
     1188,    0,    0, 1172, 1175, 1185, 1190, 1172, 1194, 1198,
        0, 1218, 1222,    0, 1224,    0,    0, 1214, 1210, 1229,
     1217, 1217,    0,    0,    0,  120,    0,    0, 1232, 1214,
     1221, 1233, 1223,    0,    0, 1237, 1221, 1228, 1226,    0,
        0,    0, 1227, 1238,    0,    0,    0, 1236, 1241, 1238,

      117, 1243, 1248,    0,    0, 1246, 1233,    0,    0, 1262,
        0, 1274,    0, 1265, 1272,    0,    0, 1277, 1279, 1269,
        0,    0, 1278, 1274,    0, 1267, 1277,    0, 1269, 1268,
     1271, 1272, 1290, 1281,    0, 1288, 1276,    0, 1279, 1298,
     1544, 1286, 1299, 1284, 1288, 1291, 1294, 1304,    0, 1311,
        0,    0, 1328, 1315, 1316, 1324, 1320,    0, 1325, 1335,
     1332,    0,    0, 1337, 1338,    0,    0, 1332, 1329,    0,
     1337, 1322, 1345, 1544, 1340,    0, 1336, 1331, 1348, 1335,
     1350, 1352,    0,    0, 1352, 1340,    0, 1342, 1360, 1367,
      108, 1366,    0, 1374,    0, 1370,    0,    0,    0,    0,

     1386,    0,    0,    0,    0,    0, 1372,   96, 1390, 1375,
     1381, 1391, 1379,    0, 1395, 1387, 1380,    0, 1383,    0,
     1390, 1382, 1399,    0, 1384, 1388, 1390, 1390, 1390,    0,
     1391, 1408, 1410, 1415, 1421,    0,    0, 1544, 1487, 1495,
     1503,   79, 1511, 1519, 1527, 1535
    } ;

static const flex_int16_t yy_def[747] =
    {   0,
      738,    1,  739,  739,  740,  740,  738,  738,  738,  738,
      738,  741,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  738,  738,  743,
      738,  738,  741,  744,  738,  745,  738,  738,  738,  738,
      738,  738,  738,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  738,  743,  738,  738,
      744,  738,  746,  738,  738,  738,  738,  738,  738,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  738,  738,  746,  738,  738,
      738,  738,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  738,  738,  738,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  738,  738,  738,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  738,  738,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      738,  738,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  738,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,

      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,    0,  738,  738,
      738,  738,  738,  738,  738,  738
    } ;

static const flex_int16_t yy_nxt[1620] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   13,   13,
       15,   16,   17,   18,   18,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   47,   47,    8,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   47,   47,   48,   55,   55,   55,   57,   65,
       58,   58,   58,   60,   61,   96,   64,   66,  101,   67,
      120,   69,   59,   89,   68,   70,   85,   94,   86,  142,

      160,   71,   87,   95,   90,  102,   65,   91,   88,  103,
       92,   72,   96,   93,   66,  101,   67,  120,   69,   59,
       89,   68,   70,   85,   94,   86,  142,  160,   71,   87,
       95,   90,  102,  163,   91,   88,  103,   92,   72,   73,
       93,  104,   97,  715,   98,  105,   74,  165,  535,  536,
       75,  106,   99,   76,  164,  709,   77,  100,  158,   78,
      163,  107,  110,  172,  648,  108,   73,  633,  104,   97,
      159,   98,  105,   74,  165,  109,  111,   75,  106,   99,
       76,  164,  112,   77,  100,  158,   78,   79,  107,  110,
      172,   80,  108,  593,  118,   81,  173,  159,  113,  402,

      174,   82,  109,  111,   83,  168,  114,   84,  115,  112,
      116,  119,  169,  117,   79,  180,  121,  166,   80,  170,
      122,  118,   81,  173,  171,  113,  123,  174,   82,  371,
      167,   83,  168,  114,   84,  115,  150,  116,  119,  169,
      117,  149,  180,  121,  166,  181,  170,  122,  147,   63,
      139,  171,  140,  123,  124,  141,  125,  167,  161,  126,
      178,  134,  187,  127,  128,  129,  162,  130,  135,  136,
      179,  131,  181,  188,  132,  137,  133,  139,  138,  140,
      402,  124,  141,  125,  505,  161,  126,  178,  134,  187,
      127,  128,  129,  162,  130,  135,  136,  179,  131,   62,

      188,  132,  137,  133,  143,  138,  189,  144,  145,   55,
       55,   55,   56,  190,  146,  154,  154,  154,  175,  176,
      177,  152,   57,   54,   58,   58,   58,  155,   52,  191,
      192,  143,  193,  189,  144,  145,   59,  738,  156,  156,
      190,  146,  157,  157,  157,  175,  176,  177,  152,  198,
      182,  199,  183,  200,  155,  184,  191,  192,  194,  193,
      195,  185,  201,   59,  196,  202,  203,  204,  186,  206,
      207,  197,   51,  211,  212,  213,  198,  182,  199,  183,
      200,  205,  184,  218,   51,  194,  219,  195,  185,  201,
      222,  196,  202,  203,  204,  186,  206,  207,  197,  208,

      211,  212,  213,  220,  209,  210,  214,  216,  205,  217,
      218,  215,  221,  219,  223,  224,  227,  222,  225,  226,
      228,  229,  230,  231,  232,  233,  208,  236,  738,  234,
      220,  209,  210,  214,  216,  235,  217,  242,  215,  221,
      237,  223,  224,  227,  243,  225,  226,  228,  229,  230,
      231,  232,  233,  238,  236,  239,  234,  249,  240,  244,
      250,  241,  235,  251,  242,  246,  245,  237,  252,  253,
      256,  243,  247,  248,  254,  257,  258,  259,  260,  261,
      238,  262,  239,  738,  249,  240,  244,  250,  241,  263,
      251,  255,  246,  245,  267,  252,  253,  256,  272,  247,

      248,  254,  257,  258,  259,  260,  261,  268,  262,  264,
      265,  269,  266,  270,  273,  274,  263,  275,  255,  271,
      738,  267,  276,  276,  738,  272,  277,  277,  277,  738,
      738,  154,  154,  154,  268,  281,  264,  265,  269,  266,
      270,  273,  274,  155,  275,  282,  271,  279,  279,  283,
      284,  280,  280,  280,  157,  157,  157,  157,  157,  157,
      285,  286,  281,  287,  288,  289,  290,  292,  291,  294,
      155,  293,  282,  295,  296,  297,  283,  284,  299,  300,
      298,  301,  302,  303,  304,  305,  306,  285,  286,  307,
      287,  288,  289,  290,  292,  291,  294,  308,  293,  309,

      295,  296,  297,  310,  311,  299,  300,  298,  301,  302,
      303,  304,  305,  306,  312,  313,  307,  314,  315,  316,
      317,  318,  319,  320,  308,  321,  309,  323,  324,  325,
      310,  311,  326,  327,  328,  329,  330,  333,  322,  334,
      335,  312,  313,  331,  314,  315,  316,  317,  318,  319,
      320,  336,  321,  332,  323,  324,  325,  337,  338,  326,
      327,  328,  329,  330,  333,  322,  334,  335,  341,  339,
      331,  342,  343,  344,  345,  346,  347,  348,  336,  340,
      332,  349,  350,  351,  337,  338,  352,  353,  356,  358,
      359,  360,  354,  361,  362,  341,  339,  357,  342,  343,

      344,  345,  346,  347,  348,  355,  340,  363,  349,  350,
      351,  364,  365,  352,  353,  356,  358,  359,  360,  354,
      361,  362,  366,  367,  357,  368,  369,  370,  372,  373,
      374,  375,  355,  376,  363,  377,  379,  378,  364,  365,
      380,  381,  382,  383,  384,  385,  386,  388,  389,  366,
      367,  387,  368,  369,  370,  372,  373,  374,  375,  390,
      376,  391,  377,  379,  378,  392,  393,  380,  381,  382,
      383,  384,  385,  386,  388,  389,  394,  397,  387,  395,
      396,  398,  400,  401,  403,  399,  390,  404,  391,  277,
      277,  277,  392,  393,  277,  277,  277,  280,  280,  280,

      280,  280,  280,  394,  397,  405,  395,  396,  398,  400,
      401,  403,  399,  406,  404,  407,  408,  409,  410,  411,
      412,  413,  414,  415,  416,  418,  419,  420,  417,  421,
      422,  423,  405,  424,  425,  426,  427,  428,  429,  430,
      406,  431,  407,  408,  409,  410,  411,  412,  413,  414,
      415,  416,  418,  419,  420,  417,  421,  422,  423,  432,
      424,  425,  426,  427,  428,  429,  430,  433,  431,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  444,
      445,  446,  447,  449,  450,  451,  432,  452,  453,  454,
      455,  456,  457,  448,  433,  458,  434,  435,  436,  437,

      438,  439,  440,  441,  442,  443,  444,  445,  446,  447,
      449,  450,  451,  459,  452,  453,  454,  455,  456,  457,
      448,  460,  458,  461,  462,  463,  464,  465,  466,  467,
      468,  469,  470,  471,  472,  473,  474,  475,  476,  477,
      459,  478,  479,  480,  483,  484,  738,  485,  460,  486,
      461,  462,  463,  464,  465,  466,  467,  468,  469,  470,
      471,  472,  473,  474,  475,  476,  477,  481,  478,  479,
      480,  483,  484,  482,  485,  487,  486,  488,  489,  490,
      491,  492,  493,  494,  495,  496,  497,  498,  499,  500,
      501,  502,  503,  504,  481,  506,  507,  508,  509,  510,

      482,  511,  487,  512,  488,  489,  490,  491,  492,  493,
      494,  495,  496,  497,  498,  499,  500,  501,  502,  503,
      504,  513,  506,  507,  508,  509,  510,  514,  511,  515,
      512,  516,  517,  518,  519,  520,  521,  522,  523,  524,
      525,  526,  527,  528,  529,  530,  531,  532,  513,  533,
      534,  537,  538,  539,  514,  540,  515,  541,  516,  517,
      518,  519,  520,  521,  522,  523,  524,  525,  526,  527,
      528,  529,  530,  531,  532,  542,  533,  534,  537,  538,
      539,  543,  540,  544,  541,  545,  546,  547,  548,  549,
      550,  551,  552,  553,  554,  555,  556,  557,  558,  559,

      560,  561,  542,  562,  563,  564,  565,  566,  543,  567,
      544,  568,  545,  546,  547,  548,  549,  550,  551,  552,
      553,  554,  555,  556,  557,  558,  559,  560,  561,  569,
      562,  563,  564,  565,  566,  570,  567,  571,  568,  572,
      573,  574,  575,  576,  577,  578,  579,  580,  581,  582,
      583,  584,  585,  586,  587,  588,  569,  589,  590,  591,
      592,  594,  570,  595,  571,  596,  572,  573,  574,  575,
      576,  577,  578,  579,  580,  581,  582,  583,  584,  585,
      586,  587,  588,  597,  589,  590,  591,  592,  594,  598,
      595,  599,  596,  600,  601,  602,  603,  604,  605,  606,

      607,  608,  609,  610,  611,  612,  613,  614,  615,  616,
      597,  617,  618,  619,  620,  621,  598,  622,  599,  623,
      600,  601,  602,  603,  604,  605,  606,  607,  608,  609,
      610,  611,  612,  613,  614,  615,  616,  624,  617,  618,
      619,  620,  621,  625,  622,  626,  623,  627,  628,  629,
      630,  631,  632,  634,  635,  636,  637,  638,  639,  640,
      641,  642,  643,  644,  624,  645,  646,  647,  649,  650,
      625,  651,  626,  652,  627,  628,  629,  630,  631,  632,
      634,  635,  636,  637,  638,  639,  640,  641,  642,  643,
      644,  653,  645,  646,  647,  649,  650,  654,  651,  655,

      652,  656,  657,  658,  659,  660,  661,  662,  663,  664,
      665,  666,  667,  668,  669,  670,  671,  672,  653,  673,
      674,  675,  676,  677,  654,  678,  655,  679,  656,  657,
      658,  659,  660,  661,  662,  663,  664,  665,  666,  667,
      668,  669,  670,  671,  672,  680,  673,  674,  675,  676,
      677,  681,  678,  682,  679,  683,  684,  685,  686,  687,
      688,  689,  690,  691,  692,  693,  694,  695,  696,  697,
      698,  699,  680,  700,  701,  702,  703,  704,  681,  705,
      682,  706,  683,  684,  685,  686,  687,  688,  689,  690,
      691,  692,  693,  694,  695,  696,  697,  698,  699,  707,

      700,  701,  702,  703,  704,  708,  705,  710,  706,  711,
      712,  713,  714,  716,  717,  718,  719,  720,  721,  722,
      723,  724,  725,  726,  727,  728,  707,  729,  730,  731,
      732,  733,  708,  734,  710,  735,  711,  712,  713,  714,
      716,  717,  718,  719,  720,  721,  722,  723,  724,  725,
      726,  727,  728,  736,  729,  730,  731,  732,  733,  737,
      734,  738,  735,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      736,  738,  738,  738,  738,  738,  737,   49,   49,   49,
       49,   49,   49,   49,   49,   50,   50,   50,   50,   50,

       50,   50,   50,   53,  738,   53,  738,   53,   53,   53,
       53,  148,  148,  148,  148,  738,  148,  148,  148,  151,
      738,  738,  151,  151,  151,  151,  151,  153,  153,  153,
      153,  153,  153,  738,  153,  278,  278,  278,  278,  278,
      738,  278,  278,    7,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738
    } ;

static const flex_int16_t yy_chk[1620] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   16,   16,   16,   18,   24,
       18,   18,   18,   19,   19,   31,  742,   24,   33,   24,
       40,   25,   18,   29,   24,   25,   28,   30,   28,   45,

       65,   25,   28,   30,   29,   34,   24,   29,   28,   34,
       29,   25,   31,   29,   24,   33,   24,   40,   25,   18,
       29,   24,   25,   28,   30,   28,   45,   65,   25,   28,
       30,   29,   34,   67,   29,   28,   34,   29,   25,   26,
       29,   35,   32,  708,   32,   35,   26,   68,  437,  437,
       26,   35,   32,   26,   67,  691,   26,   32,   63,   26,
       67,   36,   37,   73,  601,   36,   26,  576,   35,   32,
       63,   32,   35,   26,   68,   36,   37,   26,   35,   32,
       26,   67,   37,   26,   32,   63,   26,   27,   36,   37,
       73,   27,   36,  513,   39,   27,   74,   63,   38,  278,

       75,   27,   36,   37,   27,   70,   38,   27,   38,   37,
       38,   39,   70,   38,   27,   78,   41,   69,   27,   71,
       41,   39,   27,   74,   71,   38,   41,   75,   27,  248,
       69,   27,   70,   38,   27,   38,   53,   38,   39,   70,
       38,   51,   78,   41,   69,   79,   71,   41,   48,   23,
       44,   71,   44,   41,   42,   44,   42,   69,   66,   42,
       77,   43,   81,   42,   42,   42,   66,   42,   43,   43,
       77,   42,   79,   82,   42,   43,   42,   44,   43,   44,
      402,   42,   44,   42,  402,   66,   42,   77,   43,   81,
       42,   42,   42,   66,   42,   43,   43,   77,   42,   21,

       82,   42,   43,   42,   46,   43,   83,   46,   46,   55,
       55,   55,   17,   84,   46,   57,   57,   57,   76,   76,
       76,   55,   58,   15,   58,   58,   58,   57,   11,   85,
       86,   46,   87,   83,   46,   46,   58,    7,   59,   59,
       84,   46,   59,   59,   59,   76,   76,   76,   55,   89,
       80,   90,   80,   91,   57,   80,   85,   86,   88,   87,
       88,   80,   92,   58,   88,   93,   94,   95,   80,   96,
       97,   88,    6,  101,  102,  103,   89,   80,   90,   80,
       91,   95,   80,  106,    5,   88,  107,   88,   80,   92,
      109,   88,   93,   94,   95,   80,   96,   97,   88,   99,

      101,  102,  103,  108,   99,   99,  104,  105,   95,  105,
      106,  104,  108,  107,  110,  111,  113,  109,  112,  112,
      115,  116,  117,  118,  118,  119,   99,  120,    0,  119,
      108,   99,   99,  104,  105,  119,  105,  122,  104,  108,
      121,  110,  111,  113,  123,  112,  112,  115,  116,  117,
      118,  118,  119,  121,  120,  121,  119,  126,  121,  124,
      127,  121,  119,  128,  122,  125,  124,  121,  129,  130,
      132,  123,  125,  125,  131,  133,  134,  135,  136,  136,
      121,  137,  121,    0,  126,  121,  124,  127,  121,  138,
      128,  131,  125,  124,  140,  129,  130,  132,  143,  125,

      125,  131,  133,  134,  135,  136,  136,  141,  137,  138,
      139,  141,  139,  142,  144,  145,  138,  146,  131,  142,
        0,  140,  152,  152,    0,  143,  152,  152,  152,    0,
        0,  154,  154,  154,  141,  158,  138,  139,  141,  139,
      142,  144,  145,  154,  146,  159,  142,  155,  155,  162,
      166,  155,  155,  155,  156,  156,  156,  157,  157,  157,
      167,  168,  158,  169,  170,  171,  172,  173,  172,  174,
      154,  173,  159,  175,  176,  177,  162,  166,  178,  179,
      177,  180,  181,  182,  183,  184,  185,  167,  168,  186,
      169,  170,  171,  172,  173,  172,  174,  187,  173,  188,

      175,  176,  177,  189,  190,  178,  179,  177,  180,  181,
      182,  183,  184,  185,  191,  193,  186,  194,  195,  196,
      197,  198,  199,  200,  187,  201,  188,  202,  203,  204,
      189,  190,  205,  206,  207,  208,  209,  211,  201,  213,
      214,  191,  193,  210,  194,  195,  196,  197,  198,  199,
      200,  215,  201,  210,  202,  203,  204,  216,  217,  205,
      206,  207,  208,  209,  211,  201,  213,  214,  219,  218,
      210,  220,  221,  222,  223,  225,  226,  227,  215,  218,
      210,  228,  229,  230,  216,  217,  231,  232,  234,  235,
      236,  237,  233,  238,  239,  219,  218,  234,  220,  221,

      222,  223,  225,  226,  227,  233,  218,  240,  228,  229,
      230,  241,  242,  231,  232,  234,  235,  236,  237,  233,
      238,  239,  243,  244,  234,  245,  246,  247,  249,  250,
      251,  252,  233,  253,  240,  254,  255,  254,  241,  242,
      256,  257,  258,  259,  260,  261,  263,  264,  265,  243,
      244,  263,  245,  246,  247,  249,  250,  251,  252,  266,
      253,  267,  254,  255,  254,  268,  269,  256,  257,  258,
      259,  260,  261,  263,  264,  265,  270,  272,  263,  271,
      271,  273,  274,  275,  281,  273,  266,  282,  267,  276,
      276,  276,  268,  269,  277,  277,  277,  279,  279,  279,

      280,  280,  280,  270,  272,  283,  271,  271,  273,  274,
      275,  281,  273,  284,  282,  285,  286,  287,  288,  290,
      292,  293,  294,  295,  296,  297,  298,  299,  296,  300,
      301,  302,  283,  303,  304,  305,  306,  307,  308,  309,
      284,  313,  285,  286,  287,  288,  290,  292,  293,  294,
      295,  296,  297,  298,  299,  296,  300,  301,  302,  314,
      303,  304,  305,  306,  307,  308,  309,  315,  313,  316,
      317,  318,  319,  320,  322,  324,  325,  326,  327,  328,
      329,  330,  331,  335,  338,  339,  314,  340,  341,  342,
      343,  344,  345,  331,  315,  347,  316,  317,  318,  319,

      320,  322,  324,  325,  326,  327,  328,  329,  330,  331,
      335,  338,  339,  348,  340,  341,  342,  343,  344,  345,
      331,  349,  347,  350,  351,  352,  353,  354,  355,  356,
      357,  358,  359,  361,  362,  363,  364,  365,  366,  367,
      348,  368,  369,  370,  373,  374,    0,  375,  349,  376,
      350,  351,  352,  353,  354,  355,  356,  357,  358,  359,
      361,  362,  363,  364,  365,  366,  367,  371,  368,  369,
      370,  373,  374,  371,  375,  377,  376,  378,  379,  380,
      381,  382,  384,  385,  386,  387,  389,  390,  391,  393,
      394,  395,  396,  399,  371,  403,  404,  407,  408,  409,

      371,  410,  377,  411,  378,  379,  380,  381,  382,  384,
      385,  386,  387,  389,  390,  391,  393,  394,  395,  396,
      399,  412,  403,  404,  407,  408,  409,  413,  410,  414,
      411,  415,  416,  417,  418,  419,  420,  422,  423,  424,
      425,  426,  427,  428,  429,  430,  432,  433,  412,  434,
      435,  439,  440,  443,  413,  444,  414,  446,  415,  416,
      417,  418,  419,  420,  422,  423,  424,  425,  426,  427,
      428,  429,  430,  432,  433,  447,  434,  435,  439,  440,
      443,  448,  444,  449,  446,  452,  453,  454,  455,  456,
      457,  458,  459,  460,  463,  464,  465,  466,  467,  468,

      469,  471,  447,  472,  473,  474,  476,  477,  448,  479,
      449,  480,  452,  453,  454,  455,  456,  457,  458,  459,
      460,  463,  464,  465,  466,  467,  468,  469,  471,  481,
      472,  473,  474,  476,  477,  482,  479,  484,  480,  485,
      486,  488,  489,  490,  491,  492,  493,  494,  495,  496,
      498,  499,  501,  502,  503,  506,  481,  507,  508,  511,
      512,  514,  482,  515,  484,  516,  485,  486,  488,  489,
      490,  491,  492,  493,  494,  495,  496,  498,  499,  501,
      502,  503,  506,  517,  507,  508,  511,  512,  514,  519,
      515,  520,  516,  521,  522,  523,  524,  525,  526,  528,

      529,  532,  534,  540,  542,  543,  544,  547,  549,  550,
      517,  551,  554,  555,  556,  557,  519,  558,  520,  559,
      521,  522,  523,  524,  525,  526,  528,  529,  532,  534,
      540,  542,  543,  544,  547,  549,  550,  560,  551,  554,
      555,  556,  557,  562,  558,  563,  559,  565,  568,  569,
      570,  571,  572,  579,  580,  581,  582,  583,  586,  587,
      588,  589,  593,  594,  560,  598,  599,  600,  602,  603,
      562,  606,  563,  607,  565,  568,  569,  570,  571,  572,
      579,  580,  581,  582,  583,  586,  587,  588,  589,  593,
      594,  610,  598,  599,  600,  602,  603,  612,  606,  614,

      607,  615,  618,  619,  620,  623,  624,  626,  627,  629,
      630,  631,  632,  633,  634,  636,  637,  639,  610,  640,
      642,  643,  644,  645,  612,  646,  614,  647,  615,  618,
      619,  620,  623,  624,  626,  627,  629,  630,  631,  632,
      633,  634,  636,  637,  639,  648,  640,  642,  643,  644,
      645,  650,  646,  653,  647,  654,  655,  656,  657,  659,
      660,  661,  664,  665,  668,  669,  671,  672,  673,  675,
      677,  678,  648,  679,  680,  681,  682,  685,  650,  686,
      653,  688,  654,  655,  656,  657,  659,  660,  661,  664,
      665,  668,  669,  671,  672,  673,  675,  677,  678,  689,

      679,  680,  681,  682,  685,  690,  686,  692,  688,  694,
      696,  701,  707,  709,  710,  711,  712,  713,  715,  716,
      717,  719,  721,  722,  723,  725,  689,  726,  727,  728,
      729,  731,  690,  732,  692,  733,  694,  696,  701,  707,
      709,  710,  711,  712,  713,  715,  716,  717,  719,  721,
      722,  723,  725,  734,  726,  727,  728,  729,  731,  735,
      732,    0,  733,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      734,    0,    0,    0,    0,    0,  735,  739,  739,  739,
      739,  739,  739,  739,  739,  740,  740,  740,  740,  740,

      740,  740,  740,  741,    0,  741,    0,  741,  741,  741,
      741,  743,  743,  743,  743,    0,  743,  743,  743,  744,
        0,    0,  744,  744,  744,  744,  744,  745,  745,  745,
      745,  745,  745,    0,  745,  746,  746,  746,  746,  746,
        0,  746,  746,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,

      738,  738,  738,  738,  738,  738,  738,  738,  738,  738,
      738,  738,  738,  738,  738,  738,  738,  738,  738
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sqlparser.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "sqlparser.l"

#include "node.h"
#include "sqlparser_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>

//static std::stringstream strbuf;

#line 1068 "sqlparser_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1081 "sqlparser_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 79 "sqlparser.l"

#line 1367 "sqlparser_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 739 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 738 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 80 "sqlparser.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 81 "sqlparser.l"
{ return ALTER; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 82 "sqlparser.l"
{ return AND; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 83 "sqlparser.l"
{ return ANY; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 84 "sqlparser.l"
{ return ALL; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 85 "sqlparser.l"
{ return AS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 86 "sqlparser.l"
{ return ASC; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 87 "sqlparser.l"
{ return BEGI; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 88 "sqlparser.l"
{ return BETWEEN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 89 "sqlparser.l"
{ return BIGINT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 90 "sqlparser.l"
{ return BINARY; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 91 "sqlparser.l"
{ return BOOLEAN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 92 "sqlparser.l"
{ return BOTH; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 93 "sqlparser.l"
{ return BY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 94 "sqlparser.l"
{ return CASCADE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 95 "sqlparser.l"
{ return CASE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 96 "sqlparser.l"
{ return CHARACTER; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 97 "sqlparser.l"
{ return CLUSTER; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 98 "sqlparser.l"
{ return COLUMN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 99 "sqlparser.l"
{ return COLUMNS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 100 "sqlparser.l"
{ return COMMIT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 101 "sqlparser.l"
{ return CONSISTENT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 102 "sqlparser.l"
{ return CREATE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 103 "sqlparser.l"
{ return CREATETIME; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 104 "sqlparser.l"
{ return CROSS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 105 "sqlparser.l"
{ return CURRENT_USER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 106 "sqlparser.l"
{ return DATE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 107 "sqlparser.l"
{ return DATETIME; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 108 "sqlparser.l"
{ return DEALLOCATE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 109 "sqlparser.l"
{ return DECIMAL; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 110 "sqlparser.l"
{ return DEFAULT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 111 "sqlparser.l"
{ return DELETE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 112 "sqlparser.l"
{ return DESC; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 113 "sqlparser.l"
{ return DESCRIBE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 114 "sqlparser.l"
{ return DISTINCT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 115 "sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 116 "sqlparser.l"
{ return DROP; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 117 "sqlparser.l"
{ return DUAL; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 118 "sqlparser.l"
{ return ELSE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 119 "sqlparser.l"
{ return END; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 120 "sqlparser.l"
{ return ERROR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 121 "sqlparser.l"
{ return EXCEPT; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 122 "sqlparser.l"
{ return EXECUTE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 123 "sqlparser.l"
{ return EXISTS; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 124 "sqlparser.l"
{ return EXPLAIN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 125 "sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 126 "sqlparser.l"
{ return FLOAT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 127 "sqlparser.l"
{ return DOUBLE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 128 "sqlparser.l"
{ return FOR; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 129 "sqlparser.l"
{ return FROM; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 130 "sqlparser.l"
{ return FULL; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 131 "sqlparser.l"
{ return GRANT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 132 "sqlparser.l"
{ return GROUP; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 133 "sqlparser.l"
{ return GLOBAL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 134 "sqlparser.l"
{ return HAVING; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 135 "sqlparser.l"
{ return IDENTIFIED; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 136 "sqlparser.l"
{ return IF; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 137 "sqlparser.l"
{ return IN; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 138 "sqlparser.l"
{ return INNER; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 139 "sqlparser.l"
{ return INTEGER; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 140 "sqlparser.l"
{ return INTEGER; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 141 "sqlparser.l"
{ return INTERSECT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 142 "sqlparser.l"
{ return INSERT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 143 "sqlparser.l"
{ return INTO; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 144 "sqlparser.l"
{ return IS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 145 "sqlparser.l"
{ return JOIN; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 146 "sqlparser.l"
{ return KEY; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 147 "sqlparser.l"
{ return LEADING; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 148 "sqlparser.l"
{ return LEFT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 149 "sqlparser.l"
{ return LIMIT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 150 "sqlparser.l"
{ return LIKE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 151 "sqlparser.l"
{ return LOCAL; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 152 "sqlparser.l"
{ return LOCKED; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 153 "sqlparser.l"
{ return MEDIUMINT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 154 "sqlparser.l"
{ return MEMORY; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 155 "sqlparser.l"
{ return MOD; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 156 "sqlparser.l"
{ return MODIFYTIME; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 157 "sqlparser.l"
{ return NATURAL; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 158 "sqlparser.l"
{ return NOT; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 159 "sqlparser.l"
{ return NUMERIC; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 160 "sqlparser.l"
{ return OFFSET; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 161 "sqlparser.l"
{ return ON; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 162 "sqlparser.l"
{ return OPTION; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 163 "sqlparser.l"
{ return OR; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 164 "sqlparser.l"
{ return ORDER; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 165 "sqlparser.l"
{ return OUTER; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 166 "sqlparser.l"
{ return COMMENT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 167 "sqlparser.l"
{ return PARAMETERS; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 168 "sqlparser.l"
{ return PASSWORD; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 169 "sqlparser.l"
{ return PRECISION; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 170 "sqlparser.l"
{ return PREPARE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 171 "sqlparser.l"
{ return PRIMARY; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 172 "sqlparser.l"
{ return REAL; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 173 "sqlparser.l"
{ return RENAME; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 174 "sqlparser.l"
{ return REPLACE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 175 "sqlparser.l"
{ return RESTRICT; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 176 "sqlparser.l"
{ return REVOKE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 177 "sqlparser.l"
{ return RIGHT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 178 "sqlparser.l"
{ return ROLLBACK; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 179 "sqlparser.l"
{ return PRIVILEGES; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 180 "sqlparser.l"
{ return SELECT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 181 "sqlparser.l"
{ return SCHEMA; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 182 "sqlparser.l"
{ return PROCESSLIST; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 183 "sqlparser.l"
{ return SCOPE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 184 "sqlparser.l"
{ return SESSION; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 185 "sqlparser.l"
{ return SET; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 186 "sqlparser.l"
{ return SHOW; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 187 "sqlparser.l"
{ return SMALLINT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 188 "sqlparser.l"
{ return SNAPSHOT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 189 "sqlparser.l"
{ return SPFILE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 190 "sqlparser.l"
{ return START; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 191 "sqlparser.l"
{ return STATIC; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 192 "sqlparser.l"
{ return WEAK;   }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 193 "sqlparser.l"
{ return STRONG; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 194 "sqlparser.l"
{ return SYSTEM; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 195 "sqlparser.l"
{ return TABLE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 196 "sqlparser.l"
{ return TABLES; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 197 "sqlparser.l"
{ return THEN; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 198 "sqlparser.l"
{ return TIME; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 199 "sqlparser.l"
{ return TIMESTAMP; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 200 "sqlparser.l"
{ return TINYINT; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 201 "sqlparser.l"
{ return TO; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 202 "sqlparser.l"
{ return TRAILING; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 203 "sqlparser.l"
{ return TRANSACTION; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 204 "sqlparser.l"
{ return UNION; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 205 "sqlparser.l"
{ return UPDATE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 206 "sqlparser.l"
{ return USER; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 207 "sqlparser.l"
{ return USING; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 208 "sqlparser.l"
{ return VALUES; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 209 "sqlparser.l"
{ return VARBINARY; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 210 "sqlparser.l"
{ return VARCHAR; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 211 "sqlparser.l"
{ return WHERE; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 212 "sqlparser.l"
{ return WHEN; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 213 "sqlparser.l"
{ return WITH; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 214 "sqlparser.l"
{ return WORK; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 215 "sqlparser.l"
{ return KILL; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 216 "sqlparser.l"
{ return QUERY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 217 "sqlparser.l"
{ return CONNECTION; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 218 "sqlparser.l"
{ return FROZEN;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 219 "sqlparser.l"
{ return GLOBAL_ALIAS; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 220 "sqlparser.l"
{ return SESSION_ALIAS; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 221 "sqlparser.l"
{ return CHANGE_OBI; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 222 "sqlparser.l"
{ return SWITCH_CLUSTER; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 223 "sqlparser.l"
{ return SET_MASTER_CLUSTER; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 224 "sqlparser.l"
{ return SET_SLAVE_CLUSTER;  }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 225 "sqlparser.l"
{ return MASTER; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 226 "sqlparser.l"
{ return SLAVE;  }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 227 "sqlparser.l"
{ return FORCE;  }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 228 "sqlparser.l"
{ return TOP; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 230 "sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return NULLX;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 235 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return INTNUM;
}
	YY_BREAK
case 152:
#line 243 "sqlparser.l"
case 153:
#line 244 "sqlparser.l"
case 154:
YY_RULE_SETUP
#line 244 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 155:
#line 252 "sqlparser.l"
case 156:
YY_RULE_SETUP
#line 252 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return APPROXNUM;
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 259 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return BOOL;
}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 266 "sqlparser.l"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return UNKNOWN;
}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 271 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return BOOL;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 278 "sqlparser.l"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 284 "sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 288 "sqlparser.l"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 292 "sqlparser.l"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return STRING;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 301 "sqlparser.l"
{
  fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return ERROR;
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 306 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = std::string(yytext+1, yytext + strlen(yytext) - 1);
    return NAME;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 313 "sqlparser.l"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	return NAME;
}
	YY_BREAK
case 166:
/* rule 166 can match eol */
YY_RULE_SETUP
#line 320 "sqlparser.l"
{ /* ignore */ }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 322 "sqlparser.l"
{ return yytext[0];}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 324 "sqlparser.l"
{ return CNNOP; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 325 "sqlparser.l"
{ return COMP_EQ; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 326 "sqlparser.l"
{ return COMP_GE; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 327 "sqlparser.l"
{ return COMP_GT; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 328 "sqlparser.l"
{ return COMP_LE; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 329 "sqlparser.l"
{ return COMP_LT; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 330 "sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 331 "sqlparser.l"
{ return COMP_NE; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 333 "sqlparser.l"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    yylval->node = nd;
    return QUESTIONMARK;
}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 339 "sqlparser.l"
{}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
#line 340 "sqlparser.l"
{ return END_P; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 342 "sqlparser.l"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return ERROR;
}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 346 "sqlparser.l"
ECHO;
	YY_BREAK
#line 2384 "sqlparser_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 739 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 739 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 738);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 346 "sqlparser.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

